{
    "docs": [
        {
            "location": "/",
            "text": "Robo Documentation\n\n\n\n\nGetting Started\n\n\nCollections\n\n\nExtending\n\n\nRobo as a Framework\n\n\n\n\nTasks\n\n\n\n\nApiGen\n\n\nArchive\n\n\nAssets\n\n\nBase\n\n\nBower\n\n\nComposer\n\n\nDevelopment\n\n\nDocker\n\n\nFile\n\n\nFilesystem\n\n\nGulp\n\n\nNpm\n\n\nRemote\n\n\nTesting\n\n\nVcs",
            "title": "Index"
        },
        {
            "location": "/#robo-documentation",
            "text": "Getting Started  Collections  Extending  Robo as a Framework",
            "title": "Robo Documentation"
        },
        {
            "location": "/#tasks",
            "text": "ApiGen  Archive  Assets  Base  Bower  Composer  Development  Docker  File  Filesystem  Gulp  Npm  Remote  Testing  Vcs",
            "title": "Tasks"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\n\nTo begin you need to create a RoboFile. Just run \nrobo init\n in your project directory:\n\n\ncd myproject\nrobo init\n\n\n\nYour project directory may start out empty; Robo will create a new \nRoboFile.php\n for you. There will be RoboFile class which extends \n\\Robo\\Tasks\n, which includes all bundled tasks of Robo.\n\n\n<?php\nclass RoboFile extends \\Robo\\Tasks\n{\n}\n?>\n\n\n\nCommands\n\n\nAll public methods of the RoboFile class will be treated as \ncommands\n. You can run them from the CLI and pass arguments.\n\n\n<?php\n\nuse Robo\\Symfony\\ConsoleIO;\n\nclass RoboFile extends \\Robo\\Tasks\n{\n    function hello(ConsoleIO $io, $world)\n    {\n        $io->say(\"Hello, $world\");\n    }\n}\n?>\n\n\n\nNote:\n The class ConsoleIO \nisa\n SymfonyStyle, and therefore has access to all of the Symfony styling methods. It also adds a few Robo extensions such as the \nsay()\n and \nyell()\n output styles. This parameter may be omitted for commands that do not perofrom any output.\n\n\nWhen we run:\n\n\nrobo hello davert\n\u279c Hello, davert\n\n\n\nNote:\n This assumes you have installed Robo by downloading the \nrobo.phar\n file and copied it to a directory in your \n$PATH\n. For example, \ncp robo.phar ~/bin/robo\n.\n\n\nMethod names in a RoboFile should be camelCased. When called from the CLI, \ncamelCased\n methods will be available as commands formatted as \ncamel:cased\n.\n\nlongCamelCased\n methods will be transformed to commands formatted as \nlong:camel-cased\n.\n\n\nArguments\n\n\nAll method parameters without default values are treated as required arguments. In our example command \nhello\n requires one argument.\n\n\nIf you pass a default value to parameter the argument becomes optional:\n\n\n<?php\n    function hello(ConsoleIO $io, $world = 'world')\n    {\n        $io->say(\"Hello, $world\");\n    }\n?>\n\n\n\nrobo hello\n\u279c Hello, world\n\n\n\nTo accept multiple, variable arguments, typehint a parameter as an \narray\n; Robo will then pass all CLI arguments in this variable:\n\n\n<?php\n    function hello(ConsoleIO $io, array $world)\n    {\n        $io->say(\"Hello, \" . implode(', ', $world));\n    }\n?>\n\n\n\nrobo hello davert jon bill bob\n\u279c Hello, davert, jon, bill, bob\n\n\n\nOptions\n\n\nTo define command options you should define the last method parameter as an associative array where the keys define the option names and the values provide each option's default value:\n\n\n<?php\n    function hello(ConsoleIO $io, $opts = ['silent' => false])\n    {\n        if (!$opts['silent']) $io->say(\"Hello, world\");\n    }\n?>\n\n\n\nrobo hello\n\u279c Hello, world\n\nrobo hello --silent\n\n\n\nA one-character shortcut can be specified for option:\n\n\n<?php\n    function hello(ConsoleIO $io, $opts = ['silent|s' => false])\n    {\n        if (!$opts['silent']) $io->say(\"Hello, world\");\n    }\n?>\n\n\n\nNow command can be executed with '-s' to run in silent mode: \n\n\nrobo hello -s\n\n\n\nThe default value for options must be one of:\n\n\n\n\nThe boolean value \nfalse\n, which indicates that the option takes no value; the variable will be \ntrue\n if the option appears on the commandline, and will be false otherwise.\n\n\nThe boolean value \ntrue\n, which indicates that the variable should be true unless the option is disabled on the commandline via the flag \n--no-foo\n or \n--foo=0\n (for \n$opts = ['foo' => true]\n).\n\n\nA \nstring\n containing the default value for options that may be provided a value, but are not required to.\n\n\nNULL for options that may be provided an optional value, but that have no default when a value is not provided.\n\n\nThe special value InputOption::VALUE_REQUIRED, which indicates that the user must provide a value for the option whenever it is used.\n\n\nAn empty array, which indicates that the option may appear multiple times on the command line.\n\n\n\n\nNo other values should be used for the default value. For example, \n$options = ['a' => 1]\n is \nincorrect\n; instead, use \n$options = ['a' => '1']\n.\n\n\nLoad From Other Robofile\n\n\nRobo can execute commands from a different RoboFile, eg. located in different directory or with a different filename.\n\nYou can specify the path to another RoboFile by including the \n--load-from\n option:\n\n\nrobo run --load-from /path/to/my/other/robofile\n\n\n\nAdditional notes:\n\n\n\n\nThe filename can be anything; it is not limited to \nRoboFile.php\n.\n\n\nThe class name inside the file has to be the same name as the file has.\n\n\nThe class has to be in the root namespace. Eg. \nFoo.php => \\Foo\n\n\nThe internal current directory (cwd) of the PHP process will be switched to the directory where the provided RoboFile came from.\n\n\n\n\nPass-Through Arguments\n\n\nSometimes you need to pass arguments from your command into a task. A command line after the \n--\n delimiter is passed as a single parameter containing all of the following arguments.\nAny special characters such as \n-\n will be passed into without change.\n\n\n<?php\n    function ls(ConsoleIO $io, array $args)\n    {\n        $this->taskExec('ls')->args($args)->run();\n    }\n?>\n\n\n\nNote:\n Creating tasks without a builder, e.g. \n$this->taskExec()\n as shown above, is deprecated. See the \nCollections\n documentation for the preferred way to declare tasks.\n\n\nrobo ls -- Robo -c --all\n [ExecTask] running ls Robo -c --all\n .  ..  CHANGELOG.md  codeception.yml  composer.json  composer.lock  docs  .git  .gitignore  .idea  LICENSE  README.md  robo  RoboFile.php  robo.phar  src  tests  .travis.yml  vendor\n\n\n\nHelp\n\n\nThe help text for a command in a RoboFile may be provided in Doc-Block comments. An example help Doc-Block comment is shown below:\n\n\n<?php\n/**\n * Calculate the fibonacci sequence between two numbers.\n *\n * Graphic output will look like\n *     +----+---+-------------+\n *     |    |   |             |\n *     |    |-+-|             |\n *     |----+-+-+             |\n *     |        |             |\n *     |        |             |\n *     |        |             |\n *     +--------+-------------+\n *\n * @param int $start Number to start from\n * @param int $steps Number of steps to perform\n * @param array $opts\n * @option $graphic Display the sequence graphically using cube\n *                  representation\n */\npublic function fibonacci(ConsoleIO $io, $start, $steps, $opts = ['graphic' => false])\n{\n}\n?>\n\n\n\nThe corresponding help text produced is:\n\n\nrobo fibonacci --help\nUsage:\n fibonacci [--graphic] start steps\n\nArguments:\n start                 Number to start from\n steps                 Number of steps to perform\n\nOptions:\n --graphic             Display the sequence graphically using cube representation\n\nHelp:\n Graphic output will look like\n     +----+---+-------------+\n     |    |   |             |\n     |    |-+-|             |\n     |----+-+-+             |\n     |        |             |\n     |        |             |\n     |        |             |\n     +--------+-------------+\n\n\n\nArguments and options are populated from annotations.\n\n\nInitially added with \nPR by @jonsa\n; now provided by the \nconsolidation/annotated-command\n project, which was factored out from Robo.\n\n\nIgnored methods\n\n\nRobo ignores any method of your RoboFile that begins with \nget\n or \nset\n. These methods are presumed to be data accessors, not commands.  To implement a command whose name contains \nget\n or \nset\n, use the \n@command\n annotation.\n\n\n<?php\n    /**\n     * @command set-alignment\n     */\n    function setAlignment(ConsoleIO $io, $value)\n    {\n        ...\n    }\n?>\n\n\n\nTasks\n\n\nRobo commands typically divide the work they need to accomplish into \ntasks\n. The command first determines what needs to be done, inspecting current state if necessary, and then sets up and executes one or more tasks that make the actual changes needed by the command.  (See also the documentation on \nCollections\n, which allow you to combine groups of tasks which can provide rollback functions to recover from failure situations.)\n\n\nFor details on how to add custom tasks to Robo, see the \nextending\n document.\n\n\nShortcuts\n\n\nSome tasks may have shortcuts. If a task does not require multi-step configuration, it can be executed with a single line:\n\n\n<?php\n$this->_exec('ps aux');\n$this->_copy('config/env.example.yml','config/env.yml');\n?>\n\n\n\nResult\n\n\nEach task must return an instance of \nRobo\\Result\n. A Robo Result contains the task instance, exit code, message, and any variable data that the task may wish to return.\n\n\nNote\n: A task may also return \nNULL\n or an array as a shortcut for a successful result. In this instance, Robo will convert the value into a \nRobo\\Result\n, and will apply the provided array values, if any, to the result's variable data. This practice is supported, but not recommended.\n\n\nThe \nrun\n method of \nCompileAssets\n class may look like this:\n\n\nreturn new Robo\\Result($this, $exitCode, \"Assets compiled\");\n\n\n\nor\n\n\nreturn Robo\\Result::success($this, \"Assets compiled\");\nreturn Robo\\Result::error($this, \"Failed to compile assets\");\n\n\n\nYou can use this results to check if execution was successful, either using the \nwasSuccessful()\n method, or via the \ninvoke\n shortcut. We will use the \nExec\n task in next example to illustrate this:\n\n\n<?php\nclass RoboFile\n{\n    use Robo\\Task\\Base\\loadShortcuts;\n\n    function test(ConsoleIO $io)\n    {\n        $res1 = $this->_exec('phpunit tests/integration');\n        $res2 = $this->_exec('phpunit tests/unit');\n\n        // print message when tests passed\n        if ($res1->wasSuccessful() and $res2->wasSuccessful()) $io->say(\"All tests passed\");\n    }\n}\n?>\n\n\n\nWhen making multi-step commands that call one task after another, it is best to use a collection to group the tasks together. The collection will handle error detection and rollback, and will return a single Result object when done. For more information, see the \nCollections\n documentation.\n\n\nSome tasks may also attach data to the Result object.  If this is done, the data may be accessed as an array; for example, \n$result['path'];\n. This is not common.\n\n\nCommands should return a Result object obtained from a task; this will ensure that the command exit code is set correctly.  If a command does not have a Result object available, then it may use a ResultData object.  ResultData objects are just like Result objects, except the do not contain a reference to a task.\n\n\nreturn new Robo\\ResultData($exitcode, 'Error message.');\n\n\n\nIf the command returns a TaskInterface instead of a result, then the task will be executed, and the result from that task will be used as the final result of the command. See also \nFormatters\n, below.\n\n\nStack\n\n\nSome tasks contain \nStack\n in their name. These are called \"stack\" tasks, and they execute similar tasks one after the other.  Each of the primary methods in a stack class executes an operation.\n\n\nStack tasks also contain a \nstopOnFail\n method which can be used to stop task execution if one of its commands was unsuccessful.\n\n\nGlobal StopOnFail\n\n\nThere is a global \nstopOnFail\n method as well, that can be used to stop a command on first failure of a task.\n\n\n$this->stopOnFail(true);\n\n\n\nNote, however, that using \nCollections\n is preferred.\n\n\nProgress\n\n\nRobo supports progress indicators via the Symfony ProgressBar class.  Long-running tasks that wish to display the progress indicator may do so via four simple steps:\n\n\n\n\nOverride the \nprogressIndicatorSteps()\n method and return the number of \"steps\" in the operation.\n\n\nCall \n$this->startProgressIndicator()\n to begin the progress indicator running.\n\n\nCall \n$this->advanceProgressIndicator()\n a number of times equal to the result returned by \nprogressIndicatorSteps()\n\n\nCall \n$this->stopProgressIndicator()\n when the operation is completed.\n\n\n\n\nAn example of this is shown below:\n\n\n<?php\nclass MyTask extends BaseTask\n{\n    protected $steps = 10;\n\n    public function progressIndicatorSteps()\n    {\n        return $this->steps;\n    }\n\n    public function run()\n    {\n        $exitCode = 0;\n        $errorMessage = \"\";\n\n        $this->startProgressIndicator();\n        for ($i = 0; $i < $this->steps; ++$i) {\n            $this->advanceProgressIndicator();\n        }\n        $this->stopProgressIndicator();\n\n        return new Result($this, $exitCode, $errorMessage, ['time' => $this->getExecutionTime()]);\n    }\n}\n?>\n\n\n\nTasks should not attempt to use a specific progress indicator (e.g. the Symfony ProgressBar class) directly, as the ProgressIndicatorAwareTrait allows for an appropriate progress indicator to be used (or omitted) as best suits the application.\n\n\nNote that when using \nCollections\n, the progress bar will automatically be shown if the collection takes longer than two seconds to run.  Each task in the collection will count for one \"step\"; if the task supports progress indicators as shown above, then it will add an additional number of steps as indicated by its \nprogressIndicatorSteps()\n method.\n\n\nConfiguration\n\n\nOn startup, Robo will load a configuration file, \nrobo.yml\n, if it exists in the current working directory, or in the directory $HOME/.robo/robo.yml, or at the path set by the \nROBO_CONFIG\n environment variable. If both the user's \nrobo.yml\n file and a \nrobo.yml\n in the current working directory exist, then both will be loaded, with values from the configuration file in the current working directory taking precedence over the values in the user's configuration file.\n\n\nEnvironment variables can also be used to set individual configuration values. The environment variable key should start with the string \nROBO_\n, and should be followed by an all-uppercase version of the configuration key, with spaces, dashes and dots converted to underscores. For example, to set the progress bar delay to 999999 seconds:\n\n\nexport ROBO_OPTIONS_PROGRESS_DELAY=999999\n\n\n\nConfiguration values may also be set via the \n-D\n commandline switch. The above effect can also be achieved by adding \n-Doptions.progress-delay=999999\n to any Robo command.\n\n\nConfiguration for Command Options\n\n\nThe preferred method for commands to use to read configuration is to simply define commandline options for each configuration value. Configuration may be provided for any command option in the \nrobo.yml\n configuration file.\n\n\nFor example, given the following Robo command:\n\n\n<?php\n    function hello(ConsoleIO $io, $opts = ['who' => 'unknown'])\n    {\n        $io->say(\"Hello, \" . $opts['who']);\n    }\n?>\n\n\n\nThe \nwho\n option can be defined as follows:\n\n\ncommand:\n  hello:\n    options:\n      who: world\n\n\n\nIf you run this command, then it will print \nHello, world\n. If the \n--who\n option is provided on the command line, that value will take precidence over the value stored in configuration. Thus, \nhello --who=everyone\n will print \nHello, everyone\n.\n\n\nCommand groups may also share configuration options. For example, if you have commands \nfoo:bar\n, \nfoo:baz\n and \nfoo:boz\n, all of which share a common option \ncolor\n, then the following configuration will provide the value \nblue\n to \nfoo:bar\n and \nfoo:baz\n, and the value \ngreen\n to \nfoo:boz\n:\n\n\ncommand:\n  foo:\n    options:\n      color: blue\n    boz:\n      options:\n        color: green\n\n\n\nConfiguration for Task Settings\n\n\nRobo will automatically configure tasks with values from configuration. For example, given the following task definition:\n\n\n$this->taskMyOperation()\n  ->dir($buildDir)\n  ->extrapolated(false)\n  ->run();\n\n\n\nYou could instead remove the setter methods and move the parameter values to a configruation file:\n\n\n$this->taskComposerInstall()\n  ->run();\n\n\n\nThen, presuming that \ntaskMyOperation\n was implemented in a class \n\\MyOrg\\Task\\TaskGroup\\MyOperation\n, then the corresponding configuration file would appear as follows:\n\n\ntask:\n  TaskGroup:\n    MyOperation:\n      settings:\n        dir: /my/path\n        extrapolated: false\n\n\n\nThe key for configuration-injected settings is \ntask.PARTIAL_NAMESPACE.CLASSNAME.settings.key\n. PARTIAL_NAMESPACE is the namespace for the class, with each \n\\\n replaced with a \n.\n, and with each component of the namespace up to and including \nTask\n removed.\n\n\nTasks in the same namespace may also share configuration-injected settings. For example, the configuration below will set the \ndir\n option of any task implemented by a class in the \n*\\TaskGroup\\MyOperation\n namespace, unless the task has a more specific configuration value stored with its classname:\n\n\ntask:\n  TaskGroup:\n    settings:\n      dir: /my/path\n      extrapolated: false\n\n\n\nAccessing Configuration Directly\n\n\nIn a RoboFile, use \n\\Robo\\Robo::Config()->get('task.TaskGroup.MyOperation.settings.dir');\n to fetch the \ndir\n configuration option from the previous example.\n\n\nIn the implementation of \ntaskMyOperation()\n itself, it is in general not necessary to access configuration values directly, as it is preferable to allow Robo to inject configuration as described above. However, if desired, configuration may be accessed from within the method of any task that extends \n\\Robo\\Task\\BaseTask\n (or otherwise uses \nConfigAwareTrait\n) may do so via \nstatic::getConfigValue('key', 'default');\n.\n\n\nProviding Default Configuration in Code\n\n\nRoboFiles that wish to provide default configuration values that can be overridden via robo.yml values or commandline options may do so in the class' constructor method.  The example below demonstrates how to set up a default value for the \ntask.Ssh.remoteDir\n configuration property in code:\n\n\nclass RoboFile\n{\n    public function __construct()\n    {    \n        Robo\\Task\\Remote\\Ssh::configure('remoteDir', '/srv/www');\n    }\n}\n\n\n\nIf \ntask.Remote.Ssh.remoteDir\n is set to some other value in the robo.yml configuration file in the current directory, then the value from the configuration file will take precedence.\n\n\nLoading Configuration From Another Source\n\n\nSometimes, a RoboFile might want to define its own private configuration file to use in addition to the standard \nrobo.yml\n file. This can also be done in the constructor.\n\n\nclass RoboFile\n{\n    public function __construct()\n    {    \n        Robo::loadConfiguration([__DIR__ . '/myconf.yml']);\n    }\n}\n\n\n\nNote that configuration loaded in this way will take precedence over the configuration loaded by default by Robo.\n\n\nIt is possible to have even more control than this if you \ncreate your own application using Robo as a Framework\n.\n\n\nIO\n\n\nAs you noticed, you can print text via the \nsay\n method, which is taken from the \nRobo\\Output\n trait.\n\n\n$this->say(\"Hello\");\n\n\n\nAlso, you can ask for input from console:\n\n\n$name = $this->ask(\"What is your name?\");\n\n\n\nThere are also \naskDefault\n, \naskHidden\n, and \nconfirm\n methods.\n\n\nIn addition, Robo makes all of the methods of Symfony Style available through the \nio()\n method:\n\n\n$this->io()->title(\"Build all site assets\");\n\n\n\nThis allows Robo scripts to follow the documentation on \nHow to Style a Console Command\n if desired.\n\n\nFormatters\n\n\nIt is preferable for commands that look up and display information should avoid doing IO directly, and should instead return the data they wish to display as an array. This data can then be converted into different data formats, such as \"table\" and \"json\". The user may select which formatter to use via the --format option. For details on formatters, see the \nconsolidation/output-formatters\n project.\n\n\nWorking with Composer\n\n\nAdding a RoboFile to your Project\n\n\nRobo is designed to work well with Composer. To use Robo scripts in your Composer-based project, simply add \nrobo\n to your composer.json file:\n\n\n$ cd myproject\n$ composer require consolidation/robo:^2\n$ ./vendor/bin/robo mycommand\n\n\n\nIf you do not want to type the whole path to Robo, you may add \n./vendor/bin\n to your \n$PATH\n (relative paths work), or use \ncomposer exec\n to find and run Robo:\n\n\n$ composer exec robo mycommand\n\n\n\nImplementing Composer Scripts with Robo\n\n\nWhen using Robo in your project, it is convenient to define Composer scripts that call your Robo commands.  Simply add the following to your composer.json file:\n\n\n{\n    \"name\": \"myorg/myproject\",\n    \"require\": {\n        \"consolidation/robo\": \"^2\"\n    },\n    \"scripts\": {\n        \"test\": \"composer robo test\",\n        \"phar\": \"composer robo phar:build\",\n        \"robo\": \"robo --ansi --load-from $(pwd)/scripts/BuildCommands.php\"\n    }\n}\n\n\n\nNote\n: When you include Robo as a library like this, some external projects used by certain core Robo tasks are not automatically included in your project.  See the \n\"suggest\":\n section of Robo's composer.json for a list of external projects you might also want to require in your project.\n\n\nOnce you have set up your composer.json file (and ran \ncomposer update\n if you manually changed the \nrequire\n or \nrequire-dev\n sections), Composer will ensure that your project-local copy of Robo in the \nvendor/bin\n dir is in your \n$PATH\n when you run the additional Composer scripts that you declared:\n\n\n$ cd myproject\n$ composer test\n$ composer phar\n\n\n\nThis will call the public methods \ntest()\n and \nphar()\n in your RoboFile.php when using \ncomposer test\n and \ncomposer phar\n, respectively.\n\n\nAdvertising your build commands as Composer scripts is a useful way to provide the key commands used for testing, building or packaging your application. Also, if your application should happen to provide a commandline tool to perform the operations of the application itself, then defining your build commands in their own RoboFile provides desirable separation, keeping your build commands out of the help and list commands of your primary script.\n\n\nIf you would like to simplify the output of your script (e.g. when running on a CI service), replace the \n--ansi\n option in the example above with \n--no-ansi\n, and  colored terminal output and progress bars will be disabled. \n\n\nRobo as a Framework\n\n\nFor an overview on how to turn your Robo scripts into standalone tools, see the example \nrobo.script\n, and the section \nRobo as a Framework\n.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "To begin you need to create a RoboFile. Just run  robo init  in your project directory:  cd myproject\nrobo init  Your project directory may start out empty; Robo will create a new  RoboFile.php  for you. There will be RoboFile class which extends  \\Robo\\Tasks , which includes all bundled tasks of Robo.  <?php\nclass RoboFile extends \\Robo\\Tasks\n{\n}\n?>",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#commands",
            "text": "All public methods of the RoboFile class will be treated as  commands . You can run them from the CLI and pass arguments.  <?php\n\nuse Robo\\Symfony\\ConsoleIO;\n\nclass RoboFile extends \\Robo\\Tasks\n{\n    function hello(ConsoleIO $io, $world)\n    {\n        $io->say(\"Hello, $world\");\n    }\n}\n?>  Note:  The class ConsoleIO  isa  SymfonyStyle, and therefore has access to all of the Symfony styling methods. It also adds a few Robo extensions such as the  say()  and  yell()  output styles. This parameter may be omitted for commands that do not perofrom any output.  When we run:  robo hello davert\n\u279c Hello, davert  Note:  This assumes you have installed Robo by downloading the  robo.phar  file and copied it to a directory in your  $PATH . For example,  cp robo.phar ~/bin/robo .  Method names in a RoboFile should be camelCased. When called from the CLI,  camelCased  methods will be available as commands formatted as  camel:cased . longCamelCased  methods will be transformed to commands formatted as  long:camel-cased .",
            "title": "Commands"
        },
        {
            "location": "/getting-started/#arguments",
            "text": "All method parameters without default values are treated as required arguments. In our example command  hello  requires one argument.  If you pass a default value to parameter the argument becomes optional:  <?php\n    function hello(ConsoleIO $io, $world = 'world')\n    {\n        $io->say(\"Hello, $world\");\n    }\n?>  robo hello\n\u279c Hello, world  To accept multiple, variable arguments, typehint a parameter as an  array ; Robo will then pass all CLI arguments in this variable:  <?php\n    function hello(ConsoleIO $io, array $world)\n    {\n        $io->say(\"Hello, \" . implode(', ', $world));\n    }\n?>  robo hello davert jon bill bob\n\u279c Hello, davert, jon, bill, bob",
            "title": "Arguments"
        },
        {
            "location": "/getting-started/#options",
            "text": "To define command options you should define the last method parameter as an associative array where the keys define the option names and the values provide each option's default value:  <?php\n    function hello(ConsoleIO $io, $opts = ['silent' => false])\n    {\n        if (!$opts['silent']) $io->say(\"Hello, world\");\n    }\n?>  robo hello\n\u279c Hello, world\n\nrobo hello --silent  A one-character shortcut can be specified for option:  <?php\n    function hello(ConsoleIO $io, $opts = ['silent|s' => false])\n    {\n        if (!$opts['silent']) $io->say(\"Hello, world\");\n    }\n?>  Now command can be executed with '-s' to run in silent mode:   robo hello -s  The default value for options must be one of:   The boolean value  false , which indicates that the option takes no value; the variable will be  true  if the option appears on the commandline, and will be false otherwise.  The boolean value  true , which indicates that the variable should be true unless the option is disabled on the commandline via the flag  --no-foo  or  --foo=0  (for  $opts = ['foo' => true] ).  A  string  containing the default value for options that may be provided a value, but are not required to.  NULL for options that may be provided an optional value, but that have no default when a value is not provided.  The special value InputOption::VALUE_REQUIRED, which indicates that the user must provide a value for the option whenever it is used.  An empty array, which indicates that the option may appear multiple times on the command line.   No other values should be used for the default value. For example,  $options = ['a' => 1]  is  incorrect ; instead, use  $options = ['a' => '1'] .",
            "title": "Options"
        },
        {
            "location": "/getting-started/#load-from-other-robofile",
            "text": "Robo can execute commands from a different RoboFile, eg. located in different directory or with a different filename. \nYou can specify the path to another RoboFile by including the  --load-from  option:  robo run --load-from /path/to/my/other/robofile  Additional notes:   The filename can be anything; it is not limited to  RoboFile.php .  The class name inside the file has to be the same name as the file has.  The class has to be in the root namespace. Eg.  Foo.php => \\Foo  The internal current directory (cwd) of the PHP process will be switched to the directory where the provided RoboFile came from.",
            "title": "Load From Other Robofile"
        },
        {
            "location": "/getting-started/#pass-through-arguments",
            "text": "Sometimes you need to pass arguments from your command into a task. A command line after the  --  delimiter is passed as a single parameter containing all of the following arguments.\nAny special characters such as  -  will be passed into without change.  <?php\n    function ls(ConsoleIO $io, array $args)\n    {\n        $this->taskExec('ls')->args($args)->run();\n    }\n?>  Note:  Creating tasks without a builder, e.g.  $this->taskExec()  as shown above, is deprecated. See the  Collections  documentation for the preferred way to declare tasks.  robo ls -- Robo -c --all\n [ExecTask] running ls Robo -c --all\n .  ..  CHANGELOG.md  codeception.yml  composer.json  composer.lock  docs  .git  .gitignore  .idea  LICENSE  README.md  robo  RoboFile.php  robo.phar  src  tests  .travis.yml  vendor",
            "title": "Pass-Through Arguments"
        },
        {
            "location": "/getting-started/#help",
            "text": "The help text for a command in a RoboFile may be provided in Doc-Block comments. An example help Doc-Block comment is shown below:  <?php\n/**\n * Calculate the fibonacci sequence between two numbers.\n *\n * Graphic output will look like\n *     +----+---+-------------+\n *     |    |   |             |\n *     |    |-+-|             |\n *     |----+-+-+             |\n *     |        |             |\n *     |        |             |\n *     |        |             |\n *     +--------+-------------+\n *\n * @param int $start Number to start from\n * @param int $steps Number of steps to perform\n * @param array $opts\n * @option $graphic Display the sequence graphically using cube\n *                  representation\n */\npublic function fibonacci(ConsoleIO $io, $start, $steps, $opts = ['graphic' => false])\n{\n}\n?>  The corresponding help text produced is:  robo fibonacci --help\nUsage:\n fibonacci [--graphic] start steps\n\nArguments:\n start                 Number to start from\n steps                 Number of steps to perform\n\nOptions:\n --graphic             Display the sequence graphically using cube representation\n\nHelp:\n Graphic output will look like\n     +----+---+-------------+\n     |    |   |             |\n     |    |-+-|             |\n     |----+-+-+             |\n     |        |             |\n     |        |             |\n     |        |             |\n     +--------+-------------+  Arguments and options are populated from annotations.  Initially added with  PR by @jonsa ; now provided by the  consolidation/annotated-command  project, which was factored out from Robo.",
            "title": "Help"
        },
        {
            "location": "/getting-started/#ignored-methods",
            "text": "Robo ignores any method of your RoboFile that begins with  get  or  set . These methods are presumed to be data accessors, not commands.  To implement a command whose name contains  get  or  set , use the  @command  annotation.  <?php\n    /**\n     * @command set-alignment\n     */\n    function setAlignment(ConsoleIO $io, $value)\n    {\n        ...\n    }\n?>",
            "title": "Ignored methods"
        },
        {
            "location": "/getting-started/#tasks",
            "text": "Robo commands typically divide the work they need to accomplish into  tasks . The command first determines what needs to be done, inspecting current state if necessary, and then sets up and executes one or more tasks that make the actual changes needed by the command.  (See also the documentation on  Collections , which allow you to combine groups of tasks which can provide rollback functions to recover from failure situations.)  For details on how to add custom tasks to Robo, see the  extending  document.",
            "title": "Tasks"
        },
        {
            "location": "/getting-started/#shortcuts",
            "text": "Some tasks may have shortcuts. If a task does not require multi-step configuration, it can be executed with a single line:  <?php\n$this->_exec('ps aux');\n$this->_copy('config/env.example.yml','config/env.yml');\n?>",
            "title": "Shortcuts"
        },
        {
            "location": "/getting-started/#result",
            "text": "Each task must return an instance of  Robo\\Result . A Robo Result contains the task instance, exit code, message, and any variable data that the task may wish to return.  Note : A task may also return  NULL  or an array as a shortcut for a successful result. In this instance, Robo will convert the value into a  Robo\\Result , and will apply the provided array values, if any, to the result's variable data. This practice is supported, but not recommended.  The  run  method of  CompileAssets  class may look like this:  return new Robo\\Result($this, $exitCode, \"Assets compiled\");  or  return Robo\\Result::success($this, \"Assets compiled\");\nreturn Robo\\Result::error($this, \"Failed to compile assets\");  You can use this results to check if execution was successful, either using the  wasSuccessful()  method, or via the  invoke  shortcut. We will use the  Exec  task in next example to illustrate this:  <?php\nclass RoboFile\n{\n    use Robo\\Task\\Base\\loadShortcuts;\n\n    function test(ConsoleIO $io)\n    {\n        $res1 = $this->_exec('phpunit tests/integration');\n        $res2 = $this->_exec('phpunit tests/unit');\n\n        // print message when tests passed\n        if ($res1->wasSuccessful() and $res2->wasSuccessful()) $io->say(\"All tests passed\");\n    }\n}\n?>  When making multi-step commands that call one task after another, it is best to use a collection to group the tasks together. The collection will handle error detection and rollback, and will return a single Result object when done. For more information, see the  Collections  documentation.  Some tasks may also attach data to the Result object.  If this is done, the data may be accessed as an array; for example,  $result['path']; . This is not common.  Commands should return a Result object obtained from a task; this will ensure that the command exit code is set correctly.  If a command does not have a Result object available, then it may use a ResultData object.  ResultData objects are just like Result objects, except the do not contain a reference to a task.  return new Robo\\ResultData($exitcode, 'Error message.');  If the command returns a TaskInterface instead of a result, then the task will be executed, and the result from that task will be used as the final result of the command. See also  Formatters , below.",
            "title": "Result"
        },
        {
            "location": "/getting-started/#stack",
            "text": "Some tasks contain  Stack  in their name. These are called \"stack\" tasks, and they execute similar tasks one after the other.  Each of the primary methods in a stack class executes an operation.  Stack tasks also contain a  stopOnFail  method which can be used to stop task execution if one of its commands was unsuccessful.",
            "title": "Stack"
        },
        {
            "location": "/getting-started/#global-stoponfail",
            "text": "There is a global  stopOnFail  method as well, that can be used to stop a command on first failure of a task.  $this->stopOnFail(true);  Note, however, that using  Collections  is preferred.",
            "title": "Global StopOnFail"
        },
        {
            "location": "/getting-started/#progress",
            "text": "Robo supports progress indicators via the Symfony ProgressBar class.  Long-running tasks that wish to display the progress indicator may do so via four simple steps:   Override the  progressIndicatorSteps()  method and return the number of \"steps\" in the operation.  Call  $this->startProgressIndicator()  to begin the progress indicator running.  Call  $this->advanceProgressIndicator()  a number of times equal to the result returned by  progressIndicatorSteps()  Call  $this->stopProgressIndicator()  when the operation is completed.   An example of this is shown below:  <?php\nclass MyTask extends BaseTask\n{\n    protected $steps = 10;\n\n    public function progressIndicatorSteps()\n    {\n        return $this->steps;\n    }\n\n    public function run()\n    {\n        $exitCode = 0;\n        $errorMessage = \"\";\n\n        $this->startProgressIndicator();\n        for ($i = 0; $i < $this->steps; ++$i) {\n            $this->advanceProgressIndicator();\n        }\n        $this->stopProgressIndicator();\n\n        return new Result($this, $exitCode, $errorMessage, ['time' => $this->getExecutionTime()]);\n    }\n}\n?>  Tasks should not attempt to use a specific progress indicator (e.g. the Symfony ProgressBar class) directly, as the ProgressIndicatorAwareTrait allows for an appropriate progress indicator to be used (or omitted) as best suits the application.  Note that when using  Collections , the progress bar will automatically be shown if the collection takes longer than two seconds to run.  Each task in the collection will count for one \"step\"; if the task supports progress indicators as shown above, then it will add an additional number of steps as indicated by its  progressIndicatorSteps()  method.",
            "title": "Progress"
        },
        {
            "location": "/getting-started/#configuration",
            "text": "On startup, Robo will load a configuration file,  robo.yml , if it exists in the current working directory, or in the directory $HOME/.robo/robo.yml, or at the path set by the  ROBO_CONFIG  environment variable. If both the user's  robo.yml  file and a  robo.yml  in the current working directory exist, then both will be loaded, with values from the configuration file in the current working directory taking precedence over the values in the user's configuration file.  Environment variables can also be used to set individual configuration values. The environment variable key should start with the string  ROBO_ , and should be followed by an all-uppercase version of the configuration key, with spaces, dashes and dots converted to underscores. For example, to set the progress bar delay to 999999 seconds:  export ROBO_OPTIONS_PROGRESS_DELAY=999999  Configuration values may also be set via the  -D  commandline switch. The above effect can also be achieved by adding  -Doptions.progress-delay=999999  to any Robo command.",
            "title": "Configuration"
        },
        {
            "location": "/getting-started/#configuration-for-command-options",
            "text": "The preferred method for commands to use to read configuration is to simply define commandline options for each configuration value. Configuration may be provided for any command option in the  robo.yml  configuration file.  For example, given the following Robo command:  <?php\n    function hello(ConsoleIO $io, $opts = ['who' => 'unknown'])\n    {\n        $io->say(\"Hello, \" . $opts['who']);\n    }\n?>  The  who  option can be defined as follows:  command:\n  hello:\n    options:\n      who: world  If you run this command, then it will print  Hello, world . If the  --who  option is provided on the command line, that value will take precidence over the value stored in configuration. Thus,  hello --who=everyone  will print  Hello, everyone .  Command groups may also share configuration options. For example, if you have commands  foo:bar ,  foo:baz  and  foo:boz , all of which share a common option  color , then the following configuration will provide the value  blue  to  foo:bar  and  foo:baz , and the value  green  to  foo:boz :  command:\n  foo:\n    options:\n      color: blue\n    boz:\n      options:\n        color: green",
            "title": "Configuration for Command Options"
        },
        {
            "location": "/getting-started/#configuration-for-task-settings",
            "text": "Robo will automatically configure tasks with values from configuration. For example, given the following task definition:  $this->taskMyOperation()\n  ->dir($buildDir)\n  ->extrapolated(false)\n  ->run();  You could instead remove the setter methods and move the parameter values to a configruation file:  $this->taskComposerInstall()\n  ->run();  Then, presuming that  taskMyOperation  was implemented in a class  \\MyOrg\\Task\\TaskGroup\\MyOperation , then the corresponding configuration file would appear as follows:  task:\n  TaskGroup:\n    MyOperation:\n      settings:\n        dir: /my/path\n        extrapolated: false  The key for configuration-injected settings is  task.PARTIAL_NAMESPACE.CLASSNAME.settings.key . PARTIAL_NAMESPACE is the namespace for the class, with each  \\  replaced with a  . , and with each component of the namespace up to and including  Task  removed.  Tasks in the same namespace may also share configuration-injected settings. For example, the configuration below will set the  dir  option of any task implemented by a class in the  *\\TaskGroup\\MyOperation  namespace, unless the task has a more specific configuration value stored with its classname:  task:\n  TaskGroup:\n    settings:\n      dir: /my/path\n      extrapolated: false",
            "title": "Configuration for Task Settings"
        },
        {
            "location": "/getting-started/#accessing-configuration-directly",
            "text": "In a RoboFile, use  \\Robo\\Robo::Config()->get('task.TaskGroup.MyOperation.settings.dir');  to fetch the  dir  configuration option from the previous example.  In the implementation of  taskMyOperation()  itself, it is in general not necessary to access configuration values directly, as it is preferable to allow Robo to inject configuration as described above. However, if desired, configuration may be accessed from within the method of any task that extends  \\Robo\\Task\\BaseTask  (or otherwise uses  ConfigAwareTrait ) may do so via  static::getConfigValue('key', 'default'); .",
            "title": "Accessing Configuration Directly"
        },
        {
            "location": "/getting-started/#providing-default-configuration-in-code",
            "text": "RoboFiles that wish to provide default configuration values that can be overridden via robo.yml values or commandline options may do so in the class' constructor method.  The example below demonstrates how to set up a default value for the  task.Ssh.remoteDir  configuration property in code:  class RoboFile\n{\n    public function __construct()\n    {    \n        Robo\\Task\\Remote\\Ssh::configure('remoteDir', '/srv/www');\n    }\n}  If  task.Remote.Ssh.remoteDir  is set to some other value in the robo.yml configuration file in the current directory, then the value from the configuration file will take precedence.",
            "title": "Providing Default Configuration in Code"
        },
        {
            "location": "/getting-started/#loading-configuration-from-another-source",
            "text": "Sometimes, a RoboFile might want to define its own private configuration file to use in addition to the standard  robo.yml  file. This can also be done in the constructor.  class RoboFile\n{\n    public function __construct()\n    {    \n        Robo::loadConfiguration([__DIR__ . '/myconf.yml']);\n    }\n}  Note that configuration loaded in this way will take precedence over the configuration loaded by default by Robo.  It is possible to have even more control than this if you  create your own application using Robo as a Framework .",
            "title": "Loading Configuration From Another Source"
        },
        {
            "location": "/getting-started/#io",
            "text": "As you noticed, you can print text via the  say  method, which is taken from the  Robo\\Output  trait.  $this->say(\"Hello\");  Also, you can ask for input from console:  $name = $this->ask(\"What is your name?\");  There are also  askDefault ,  askHidden , and  confirm  methods.  In addition, Robo makes all of the methods of Symfony Style available through the  io()  method:  $this->io()->title(\"Build all site assets\");  This allows Robo scripts to follow the documentation on  How to Style a Console Command  if desired.",
            "title": "IO"
        },
        {
            "location": "/getting-started/#formatters",
            "text": "It is preferable for commands that look up and display information should avoid doing IO directly, and should instead return the data they wish to display as an array. This data can then be converted into different data formats, such as \"table\" and \"json\". The user may select which formatter to use via the --format option. For details on formatters, see the  consolidation/output-formatters  project.",
            "title": "Formatters"
        },
        {
            "location": "/getting-started/#working-with-composer",
            "text": "",
            "title": "Working with Composer"
        },
        {
            "location": "/getting-started/#adding-a-robofile-to-your-project",
            "text": "Robo is designed to work well with Composer. To use Robo scripts in your Composer-based project, simply add  robo  to your composer.json file:  $ cd myproject\n$ composer require consolidation/robo:^2\n$ ./vendor/bin/robo mycommand  If you do not want to type the whole path to Robo, you may add  ./vendor/bin  to your  $PATH  (relative paths work), or use  composer exec  to find and run Robo:  $ composer exec robo mycommand",
            "title": "Adding a RoboFile to your Project"
        },
        {
            "location": "/getting-started/#implementing-composer-scripts-with-robo",
            "text": "When using Robo in your project, it is convenient to define Composer scripts that call your Robo commands.  Simply add the following to your composer.json file:  {\n    \"name\": \"myorg/myproject\",\n    \"require\": {\n        \"consolidation/robo\": \"^2\"\n    },\n    \"scripts\": {\n        \"test\": \"composer robo test\",\n        \"phar\": \"composer robo phar:build\",\n        \"robo\": \"robo --ansi --load-from $(pwd)/scripts/BuildCommands.php\"\n    }\n}  Note : When you include Robo as a library like this, some external projects used by certain core Robo tasks are not automatically included in your project.  See the  \"suggest\":  section of Robo's composer.json for a list of external projects you might also want to require in your project.  Once you have set up your composer.json file (and ran  composer update  if you manually changed the  require  or  require-dev  sections), Composer will ensure that your project-local copy of Robo in the  vendor/bin  dir is in your  $PATH  when you run the additional Composer scripts that you declared:  $ cd myproject\n$ composer test\n$ composer phar  This will call the public methods  test()  and  phar()  in your RoboFile.php when using  composer test  and  composer phar , respectively.  Advertising your build commands as Composer scripts is a useful way to provide the key commands used for testing, building or packaging your application. Also, if your application should happen to provide a commandline tool to perform the operations of the application itself, then defining your build commands in their own RoboFile provides desirable separation, keeping your build commands out of the help and list commands of your primary script.  If you would like to simplify the output of your script (e.g. when running on a CI service), replace the  --ansi  option in the example above with  --no-ansi , and  colored terminal output and progress bars will be disabled.",
            "title": "Implementing Composer Scripts with Robo"
        },
        {
            "location": "/getting-started/#robo-as-a-framework",
            "text": "For an overview on how to turn your Robo scripts into standalone tools, see the example  robo.script , and the section  Robo as a Framework .",
            "title": "Robo as a Framework"
        },
        {
            "location": "/collections/",
            "text": "Collection Builders\n\n\nRobo provides task collections as a means of making error detection and recovery easier. When Robo tasks are added to a collection, their execution is deferred until the \n$collection->run()\n method is called.  If one of the tasks fail, then the operation will be aborted; rollback tasks may also be defined to restore the system to its original condition.\n\n\nWhen using collections, a Robo script will go through three phases:\n\n\n\n\nDetermine which tasks will need to be run, and create a task builder.\n\n\nAssign values to variables.\n\n\nDo not alter the state of the system.\n\n\nCreate the necessary tasks via the task builder.\n\n\nUse variables calculated in the first phase in task parameters.\n\n\nRun the tasks via the \nrun()\n method.\n\n\nCheck and report errors once after \nrun()\n returns.\n\n\n\n\nFollowing this pattern will keep your code linear and easy to understand.\n\n\nCollections API\n\n\nCollections are made up of a combination of tasks and/or \ncallable\n functions / method pointers, such as:\n\n\n\n\nA task (implements TaskInterface)\n\n\nA function name (string)\n\n\nA closure (inline function)\n\n\nA method reference (array with object and method name)\n\n\n\n\nExamples of adding different kinds of tasks to a collection are provided below.\n\n\nTaskInterface Objects\n\n\n<?php\n  $collection->add(\n    $this->taskExec('ls')\n  );\n?>\n\n\n\nFunctions\n\n\n<?php\n  $collection->addCode('mytaskfunction');\n?>\n\n\n\nClosures\n\n\n<?php\n  $collection->addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    });\n?>\n\n\n\nMethods\n\n\n<?php\n  $collection->addCode([$myobject, 'mymethod']);\n?>\n\n\n\nUsing a Collection Builder\n\n\nTo manage a collection of tasks, use a collection builder. Collection builders allow tasks to be created via chained methods.  All of the tasks created by the same builder are added to a collection; when the \nrun()\n method is called, all of the tasks in the collection run. \n\n\nThe 'publish' command from Robo's own RoboFile is shown below.  It uses a collection builder to run some git and filesystem operations. The \"completion\" tasks are run after all other tasks complete, or during rollback processing when an operation fails.\n\n\n<?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    public function publish(ConsoleIO $io)\n    {\n        $current_branch = exec('git rev-parse --abbrev-ref HEAD');\n\n        $collection = $this->collectionBuilder($io);\n        $collection->taskGitStack()\n            ->checkout('site')\n            ->merge('master')\n        ->completion($this->taskGitStack()->checkout($current_branch))\n        ->taskFilesystemStack()\n            ->copy('CHANGELOG.md', 'docs/changelog.md')\n        ->completion($this->taskFilesystemStack()->remove('docs/changelog.md'))\n        ->taskExec('mkdocs gh-deploy');\n\n        return $collection;\n    }\n}\n?>\n\n\n\nThe example above also adds a couple of tasks as \"completions\"; these are run when the collection completes execution, as explained below.\n\n\nRollbacks and Completions\n\n\nRobo also provides rollbacks and completions, special tasks that are eligible to run only if all of the tasks added to the collection before them succeed. The section below explains the circumstances under which these tasks will run.\n\n\nCompletion Tasks\n\n\nCompletions run whenever their collection completes or fails, but only if all of the tasks that come before it succeed. An example of this is shown in the first example above. A filesystem stack task copies CHANDELOG.md to docs/changelog.md; after this task is added to the collection, another filesystem stack task is added as a completion to delete docs/changelog.md. This is done because docs/changelog.md is only intended to exist long enough to be used by the \nmkdocs\n task, which is added later. \n\n\nRollback Tasks\n\n\nIn addition to completions, Robo also supports rollbacks. Rollback tasks can be used to clean up after failures, so the state of the system does not change when execution is interrupted by an error. A rollback task is executed if all of the tasks that come before it succeed, and at least one of the tasks that come after it fails.  If all tasks succeed, then no rollback tasks are executed.\n\n\nRollback and Completion Methods\n\n\nAny task may also implement \\Robo\\Contract\\RollbackInterface; if this is done, then its \nrollback()\n method will be called if the task is \nrun()\n on a collection that later fails.\n\n\nUse \naddAsCompletion($collection)\n in place of \naddAsRollback($collection)\n, or implement \\Robo\\Contract\\CompletionInterface. Completions otherwise work exactly like rollbacks.\n\n\nBy default, rollbacks and completions tasks or callbacks continue even if errors occur. If you would like to explicitly cancel or abort the rollback or completion, you may throw the \n\\Robo\\Exception\\AbortTasksException\n exception.\n\n\nRollback and Completion Callbacks\n\n\nYou may also provide arbitrary methods as \ncallable\ns to serve as rollback or completion functions, as shown below:\n\n\n<?php\n  $collection->rollbackCode([$myobject, 'myrollback']);\n  $collection->completionCode([$myobject, 'mycompletion']);\n?>\n\n\n\nTemporary Objects\n\n\nSince the concept of temporary objects that are cleaned up  on failure is a common pattern, Robo provides built-in support for them. Temporary directories and files are provided out of the box; other kinds of temporary objects can be easily created using the Temporary global collection.\n\n\nTemporary Directories\n\n\nIt is recommended that operations that perform multiple filesystem operations should, whenever possible, do most of their work in a temporary directory. Temporary directories are created by \n$this->taskTmpDir()\n, and are automatically removed when the collection completes or rolls back. As an added convenience, the CollectionBuilder class has a \ntmpDir()\n method that creates a temporary directory via \ntaskTmpDir()\n, and then returns the path to the temporary directory.\n\n\n<?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation(ConsoleIO $io)\n    {\n        $collection = $this->collectionBuilder($io);\n\n        // Create a temporary directory, and fetch its path.\n        $work = $collection->tmpDir();\n\n        $collection\n          ->taskWriteToFile(\"$work/README.md\")\n            ->line('-----')\n            ->line(date('Y-m-d').' Generated file: do not edit.')\n            ->line('----');\n\n        // If all of the preceding tasks succeed, then rename the temporary \n        // directory to its final name.\n        $collection->taskFilesystemStack()\n          ->rename($work, 'destination');\n\n        return $collection->run();\n    }\n}\n?>\n\n\n\nIn the previous example, the path to the temporary directory is stored in the variable \n$work\n, and is passed as needed to the parameters of the other tasks as they are added to the collection. After the task collection is run, the temporary directory will be automatically deleted. In the example above, the temporary directory is renamed by the last task in the collection. This allows the working directory to persist; the collection will still attempt to remove the working directory, but no errors will be thrown if it no longer exists in its original location. Following this pattern allows Robo scripts to easily and safely do work that cleans up after itself on failure, without introducing a lot of branching or additional error recovery code.  This paradigm is common enough to warrant a shortcut method of accomplishing the same thing.  The example below is identical to the one above, save for the fact that it uses the \nworkDir()\n method instead of \ntmpDir()\n.  \nworkDir()\n renames the temporary directory to its final name if the collection completes; any directory that exists in the same location will be overwritten at that time, but will persist if the collection roles back.\n\n\n<?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation(ConsoleIO $io)\n    {\n        $collection = $this->collectionBuilder($io);\n\n        // Create a temporary directory, and fetch its path.\n        // If all of the tasks succeed, then rename the temporary directory\n        // to its final name.\n        $work = $collection->workDir('destination');\n\n        $collection\n          ->taskWriteToFile(\"$work/README.md\")\n            ->line('-----')\n            ->line(date('Y-m-d').' Generated file: do not edit.')\n            ->line('----');\n\n        return $collection->run();\n    }\n}\n?>\n\n\n\nTemporary directories may also be created via the shortcut \n$this->_tmpDir();\n. Temporary directories created in this way are deleted when the script terminates.\n\n\nTemporary Files\n\n\nRobo also provides an API for creating temporary files. They may be created via \n$this->taskTmpFile()\n; they are used exactly like \n$this->taskWrite()\n, except they are given a random name on creation, and are deleted when their collection completes.  If they are not added to a collection, then they are deleted when the script terminates.\n\n\nThe Temporary Global Collection\n\n\nRobo maintains a special collection called the Temporary global collection. This collection is used to keep track of temporary objects that are not part of any collection. For example, Robo temporary directories and temporary files are managed by the Temporary global collection. These temporary objects are cleaned up automatically when the script terminates.\n\n\nIt is easy to create your own temporary tasks that behave in the same way as the provided temporary directory and temporary file tasks. There are two steps required:\n\n\n\n\nImplement \\Robo\\Contract\\CompletionInterface\n\n\nWrap the task via Temporary::wrap()\n\n\n\n\nFor example, the implementation of taskTmpFile() looks like this:\n\n\n<?php\n    protected function taskTmpFile($filename = 'tmp', $extension = '', $baseDir = '', $includeRandomPart = true)\n    {\n        return Temporary::wrap(new TmpFile($filename, $extension, $baseDir, $includeRandomPart));\n    }\n?>\n\n\n\nThe \ncomplete()\n method of the task will be called once the Collection the temporary object is attached to finishes running. If the temporary is not added to a collection, then its \ncomplete()\n method will be called when the script terminates.\n\n\nChained State\n\n\nWhen using a collection builder, it is possible to pass state from one task to another. State is generated during the \nrun()\n method of each task, and returned in a \nRobo\\Result\n object. Each result has a \"message\" and a key/value data store that contains the task's state. This state can be made available to later tasks in the builder.\n\n\nImplicitly Passing State\n\n\nSometimes it may be desirable to process the files produced by one task using a following task that alters the result.\n\n\nFor example, if you have one task that takes a set of source files and generates destination files, and another task that encrypts a set of files, you could encrypt the results from the first task by running both of the tasks independently:\n\n\n<?php\n    $result = $this->taskGenerate()\n        ->files($sources)\n        ->run();\n\n    $result = $this->taskEncrypt()\n        ->files($result['files'])\n        ->run();\n?>\n\n\n\nIf the Encrypt task implements \n\\Robo\\State\\Consumer\n and accepts 'files' from the current state, then these tasks may be chained together as follows:\n\n\n<?php\n    $collection = $this->collectionBuilder($io);\n    $collection\n        ->taskGenerate()\n            ->files($sources)\n        ->taskEncrypt()\n        ->run();\n?>\n\n\n\nTasks that do not implement the \nConsumer\n interface may still be chained together by explicitly connecting the state from one task with the task configuration methods, as explained in the following section:\n\n\nExplicitly Passing State\n\n\nState from the key/value data store, if set, is automatically stored in the collection's state. The \nstoreState()\n method can be used to store the result \"message\".\n\n\nTo pass state from one task to another, the \ndeferTaskConfiguration()\n method may be used. This method defers initialization until immediately before the task's \nrun()\n method is called. It then calls a single named setter method, passing it the value of some state variable. \n\n\nFor example, the builder below will create a new directory named after the output of the \nuname -n\n command returned by taskExec. Note that it is necessary to call \nprintOutput(false)\n in order to make the output of taskExec available to the state system.\n\n\n<?php\n    $this->collectionBuilder($io)\n        ->taskExec('uname -n')\n            ->printOutput(false)\n            ->storeState('system-name')\n        ->taskFilesystemStack()\n            ->deferTaskConfiguration('mkdir', 'system-name')\n        ->run();\n?>\n\n\n\nMore complex task configuration may be done via the \ndefer()\n method. \ndefer()\n works like \ndeferTaskConfiguration()\n, except that it will run an arbitrary \ncallable\n immediately prior to the execution of the task. The example below works exactly the same as the previous example, but is implemented using \ndefer()\n instead of \ndeferTaskConfiguration()\n.\n\n\n<?php\n    $this->collectionBuilder($io)\n        ->taskExec('uname -n')\n            ->printOutput(false)\n            ->storeState('system-name')\n        ->taskFilesystemStack()\n            ->defer(\n                function ($task, $state) {\n                    $task->mkdir($state['system-name']);\n                }\n            )\n        ->run();\n?>\n\n\n\nIn general, it is preferable to collect all of the information needed first, and then use that data to configure the necessary tasks. For example, the previous example could be implemented more simply by calling \n$system_name = exec('uname -n');\n and \ntaskFilesystemStack->mkdir($system_name);\n. Chained state can be helpful in instances where there is a more complex relationship between the tasks.\n\n\nNamed Tasks\n\n\nIt is also possible to provide names for the tasks added to a collection. This has two primary benefits:\n\n\n\n\nAny result data returned from a named task is stored in the Result object under the task name.\n\n\nIt is possible for other code to add more tasks before or after any named task.\n\n\n\n\nThis feature is useful if you have functions that create task collections, and return them as a function results. The original caller can then use the \n$collection->before()\n or \n$collection->after()\n to insert sequenced tasks into the set of operations to be performed. One reason this might be done would be to define a base set of operations to perform (e.g. in a deploy), and then apply modifications for other environments (e.g. dev or stage).\n\n\n<?php\n  $collection->addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    },\n    \"taskname\");\n?>\n\n\n\nGiven a collection with named tasks, it is possible to insert more tasks before or after a task of a given name.\n\n\n<?php\n  $collection->after(\"taskname\",\n    function() use ($work)\n    {\n      // do something with $work after \"taskname\" executes, if it succeeds.    \n    });\n?>\n\n\n\n<?php\n  $collection->before(\"taskname\",\n    function() use ($work)\n    {\n      // do something with $work before \"taskname\" executes.    \n    });\n?>\n\n\n\nIt is recommended that named tasks be avoided unless specifically needed.",
            "title": "Collections"
        },
        {
            "location": "/collections/#collection-builders",
            "text": "Robo provides task collections as a means of making error detection and recovery easier. When Robo tasks are added to a collection, their execution is deferred until the  $collection->run()  method is called.  If one of the tasks fail, then the operation will be aborted; rollback tasks may also be defined to restore the system to its original condition.  When using collections, a Robo script will go through three phases:   Determine which tasks will need to be run, and create a task builder.  Assign values to variables.  Do not alter the state of the system.  Create the necessary tasks via the task builder.  Use variables calculated in the first phase in task parameters.  Run the tasks via the  run()  method.  Check and report errors once after  run()  returns.   Following this pattern will keep your code linear and easy to understand.",
            "title": "Collection Builders"
        },
        {
            "location": "/collections/#collections-api",
            "text": "Collections are made up of a combination of tasks and/or  callable  functions / method pointers, such as:   A task (implements TaskInterface)  A function name (string)  A closure (inline function)  A method reference (array with object and method name)   Examples of adding different kinds of tasks to a collection are provided below.",
            "title": "Collections API"
        },
        {
            "location": "/collections/#taskinterface-objects",
            "text": "<?php\n  $collection->add(\n    $this->taskExec('ls')\n  );\n?>",
            "title": "TaskInterface Objects"
        },
        {
            "location": "/collections/#functions",
            "text": "<?php\n  $collection->addCode('mytaskfunction');\n?>",
            "title": "Functions"
        },
        {
            "location": "/collections/#closures",
            "text": "<?php\n  $collection->addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    });\n?>",
            "title": "Closures"
        },
        {
            "location": "/collections/#methods",
            "text": "<?php\n  $collection->addCode([$myobject, 'mymethod']);\n?>",
            "title": "Methods"
        },
        {
            "location": "/collections/#using-a-collection-builder",
            "text": "To manage a collection of tasks, use a collection builder. Collection builders allow tasks to be created via chained methods.  All of the tasks created by the same builder are added to a collection; when the  run()  method is called, all of the tasks in the collection run.   The 'publish' command from Robo's own RoboFile is shown below.  It uses a collection builder to run some git and filesystem operations. The \"completion\" tasks are run after all other tasks complete, or during rollback processing when an operation fails.  <?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    public function publish(ConsoleIO $io)\n    {\n        $current_branch = exec('git rev-parse --abbrev-ref HEAD');\n\n        $collection = $this->collectionBuilder($io);\n        $collection->taskGitStack()\n            ->checkout('site')\n            ->merge('master')\n        ->completion($this->taskGitStack()->checkout($current_branch))\n        ->taskFilesystemStack()\n            ->copy('CHANGELOG.md', 'docs/changelog.md')\n        ->completion($this->taskFilesystemStack()->remove('docs/changelog.md'))\n        ->taskExec('mkdocs gh-deploy');\n\n        return $collection;\n    }\n}\n?>  The example above also adds a couple of tasks as \"completions\"; these are run when the collection completes execution, as explained below.",
            "title": "Using a Collection Builder"
        },
        {
            "location": "/collections/#rollbacks-and-completions",
            "text": "Robo also provides rollbacks and completions, special tasks that are eligible to run only if all of the tasks added to the collection before them succeed. The section below explains the circumstances under which these tasks will run.",
            "title": "Rollbacks and Completions"
        },
        {
            "location": "/collections/#completion-tasks",
            "text": "Completions run whenever their collection completes or fails, but only if all of the tasks that come before it succeed. An example of this is shown in the first example above. A filesystem stack task copies CHANDELOG.md to docs/changelog.md; after this task is added to the collection, another filesystem stack task is added as a completion to delete docs/changelog.md. This is done because docs/changelog.md is only intended to exist long enough to be used by the  mkdocs  task, which is added later.",
            "title": "Completion Tasks"
        },
        {
            "location": "/collections/#rollback-tasks",
            "text": "In addition to completions, Robo also supports rollbacks. Rollback tasks can be used to clean up after failures, so the state of the system does not change when execution is interrupted by an error. A rollback task is executed if all of the tasks that come before it succeed, and at least one of the tasks that come after it fails.  If all tasks succeed, then no rollback tasks are executed.",
            "title": "Rollback Tasks"
        },
        {
            "location": "/collections/#rollback-and-completion-methods",
            "text": "Any task may also implement \\Robo\\Contract\\RollbackInterface; if this is done, then its  rollback()  method will be called if the task is  run()  on a collection that later fails.  Use  addAsCompletion($collection)  in place of  addAsRollback($collection) , or implement \\Robo\\Contract\\CompletionInterface. Completions otherwise work exactly like rollbacks.  By default, rollbacks and completions tasks or callbacks continue even if errors occur. If you would like to explicitly cancel or abort the rollback or completion, you may throw the  \\Robo\\Exception\\AbortTasksException  exception.",
            "title": "Rollback and Completion Methods"
        },
        {
            "location": "/collections/#rollback-and-completion-callbacks",
            "text": "You may also provide arbitrary methods as  callable s to serve as rollback or completion functions, as shown below:  <?php\n  $collection->rollbackCode([$myobject, 'myrollback']);\n  $collection->completionCode([$myobject, 'mycompletion']);\n?>",
            "title": "Rollback and Completion Callbacks"
        },
        {
            "location": "/collections/#temporary-objects",
            "text": "Since the concept of temporary objects that are cleaned up  on failure is a common pattern, Robo provides built-in support for them. Temporary directories and files are provided out of the box; other kinds of temporary objects can be easily created using the Temporary global collection.",
            "title": "Temporary Objects"
        },
        {
            "location": "/collections/#temporary-directories",
            "text": "It is recommended that operations that perform multiple filesystem operations should, whenever possible, do most of their work in a temporary directory. Temporary directories are created by  $this->taskTmpDir() , and are automatically removed when the collection completes or rolls back. As an added convenience, the CollectionBuilder class has a  tmpDir()  method that creates a temporary directory via  taskTmpDir() , and then returns the path to the temporary directory.  <?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation(ConsoleIO $io)\n    {\n        $collection = $this->collectionBuilder($io);\n\n        // Create a temporary directory, and fetch its path.\n        $work = $collection->tmpDir();\n\n        $collection\n          ->taskWriteToFile(\"$work/README.md\")\n            ->line('-----')\n            ->line(date('Y-m-d').' Generated file: do not edit.')\n            ->line('----');\n\n        // If all of the preceding tasks succeed, then rename the temporary \n        // directory to its final name.\n        $collection->taskFilesystemStack()\n          ->rename($work, 'destination');\n\n        return $collection->run();\n    }\n}\n?>  In the previous example, the path to the temporary directory is stored in the variable  $work , and is passed as needed to the parameters of the other tasks as they are added to the collection. After the task collection is run, the temporary directory will be automatically deleted. In the example above, the temporary directory is renamed by the last task in the collection. This allows the working directory to persist; the collection will still attempt to remove the working directory, but no errors will be thrown if it no longer exists in its original location. Following this pattern allows Robo scripts to easily and safely do work that cleans up after itself on failure, without introducing a lot of branching or additional error recovery code.  This paradigm is common enough to warrant a shortcut method of accomplishing the same thing.  The example below is identical to the one above, save for the fact that it uses the  workDir()  method instead of  tmpDir() .   workDir()  renames the temporary directory to its final name if the collection completes; any directory that exists in the same location will be overwritten at that time, but will persist if the collection roles back.  <?php\nclass RoboFile extends \\Robo\\Tasks\n{\n    function myOperation(ConsoleIO $io)\n    {\n        $collection = $this->collectionBuilder($io);\n\n        // Create a temporary directory, and fetch its path.\n        // If all of the tasks succeed, then rename the temporary directory\n        // to its final name.\n        $work = $collection->workDir('destination');\n\n        $collection\n          ->taskWriteToFile(\"$work/README.md\")\n            ->line('-----')\n            ->line(date('Y-m-d').' Generated file: do not edit.')\n            ->line('----');\n\n        return $collection->run();\n    }\n}\n?>  Temporary directories may also be created via the shortcut  $this->_tmpDir(); . Temporary directories created in this way are deleted when the script terminates.",
            "title": "Temporary Directories"
        },
        {
            "location": "/collections/#temporary-files",
            "text": "Robo also provides an API for creating temporary files. They may be created via  $this->taskTmpFile() ; they are used exactly like  $this->taskWrite() , except they are given a random name on creation, and are deleted when their collection completes.  If they are not added to a collection, then they are deleted when the script terminates.",
            "title": "Temporary Files"
        },
        {
            "location": "/collections/#the-temporary-global-collection",
            "text": "Robo maintains a special collection called the Temporary global collection. This collection is used to keep track of temporary objects that are not part of any collection. For example, Robo temporary directories and temporary files are managed by the Temporary global collection. These temporary objects are cleaned up automatically when the script terminates.  It is easy to create your own temporary tasks that behave in the same way as the provided temporary directory and temporary file tasks. There are two steps required:   Implement \\Robo\\Contract\\CompletionInterface  Wrap the task via Temporary::wrap()   For example, the implementation of taskTmpFile() looks like this:  <?php\n    protected function taskTmpFile($filename = 'tmp', $extension = '', $baseDir = '', $includeRandomPart = true)\n    {\n        return Temporary::wrap(new TmpFile($filename, $extension, $baseDir, $includeRandomPart));\n    }\n?>  The  complete()  method of the task will be called once the Collection the temporary object is attached to finishes running. If the temporary is not added to a collection, then its  complete()  method will be called when the script terminates.",
            "title": "The Temporary Global Collection"
        },
        {
            "location": "/collections/#chained-state",
            "text": "When using a collection builder, it is possible to pass state from one task to another. State is generated during the  run()  method of each task, and returned in a  Robo\\Result  object. Each result has a \"message\" and a key/value data store that contains the task's state. This state can be made available to later tasks in the builder.",
            "title": "Chained State"
        },
        {
            "location": "/collections/#implicitly-passing-state",
            "text": "Sometimes it may be desirable to process the files produced by one task using a following task that alters the result.  For example, if you have one task that takes a set of source files and generates destination files, and another task that encrypts a set of files, you could encrypt the results from the first task by running both of the tasks independently:  <?php\n    $result = $this->taskGenerate()\n        ->files($sources)\n        ->run();\n\n    $result = $this->taskEncrypt()\n        ->files($result['files'])\n        ->run();\n?>  If the Encrypt task implements  \\Robo\\State\\Consumer  and accepts 'files' from the current state, then these tasks may be chained together as follows:  <?php\n    $collection = $this->collectionBuilder($io);\n    $collection\n        ->taskGenerate()\n            ->files($sources)\n        ->taskEncrypt()\n        ->run();\n?>  Tasks that do not implement the  Consumer  interface may still be chained together by explicitly connecting the state from one task with the task configuration methods, as explained in the following section:",
            "title": "Implicitly Passing State"
        },
        {
            "location": "/collections/#explicitly-passing-state",
            "text": "State from the key/value data store, if set, is automatically stored in the collection's state. The  storeState()  method can be used to store the result \"message\".  To pass state from one task to another, the  deferTaskConfiguration()  method may be used. This method defers initialization until immediately before the task's  run()  method is called. It then calls a single named setter method, passing it the value of some state variable.   For example, the builder below will create a new directory named after the output of the  uname -n  command returned by taskExec. Note that it is necessary to call  printOutput(false)  in order to make the output of taskExec available to the state system.  <?php\n    $this->collectionBuilder($io)\n        ->taskExec('uname -n')\n            ->printOutput(false)\n            ->storeState('system-name')\n        ->taskFilesystemStack()\n            ->deferTaskConfiguration('mkdir', 'system-name')\n        ->run();\n?>  More complex task configuration may be done via the  defer()  method.  defer()  works like  deferTaskConfiguration() , except that it will run an arbitrary  callable  immediately prior to the execution of the task. The example below works exactly the same as the previous example, but is implemented using  defer()  instead of  deferTaskConfiguration() .  <?php\n    $this->collectionBuilder($io)\n        ->taskExec('uname -n')\n            ->printOutput(false)\n            ->storeState('system-name')\n        ->taskFilesystemStack()\n            ->defer(\n                function ($task, $state) {\n                    $task->mkdir($state['system-name']);\n                }\n            )\n        ->run();\n?>  In general, it is preferable to collect all of the information needed first, and then use that data to configure the necessary tasks. For example, the previous example could be implemented more simply by calling  $system_name = exec('uname -n');  and  taskFilesystemStack->mkdir($system_name); . Chained state can be helpful in instances where there is a more complex relationship between the tasks.",
            "title": "Explicitly Passing State"
        },
        {
            "location": "/collections/#named-tasks",
            "text": "It is also possible to provide names for the tasks added to a collection. This has two primary benefits:   Any result data returned from a named task is stored in the Result object under the task name.  It is possible for other code to add more tasks before or after any named task.   This feature is useful if you have functions that create task collections, and return them as a function results. The original caller can then use the  $collection->before()  or  $collection->after()  to insert sequenced tasks into the set of operations to be performed. One reason this might be done would be to define a base set of operations to perform (e.g. in a deploy), and then apply modifications for other environments (e.g. dev or stage).  <?php\n  $collection->addCode(\n    function() use ($work)\n    {\n      // do something with $work      \n    },\n    \"taskname\");\n?>  Given a collection with named tasks, it is possible to insert more tasks before or after a task of a given name.  <?php\n  $collection->after(\"taskname\",\n    function() use ($work)\n    {\n      // do something with $work after \"taskname\" executes, if it succeeds.    \n    });\n?>  <?php\n  $collection->before(\"taskname\",\n    function() use ($work)\n    {\n      // do something with $work before \"taskname\" executes.    \n    });\n?>  It is recommended that named tasks be avoided unless specifically needed.",
            "title": "Named Tasks"
        },
        {
            "location": "/extending/",
            "text": "Extending\n\n\nRobo tasks can be added to your Robo application by using Composer to suppliment the set of built-in tasks that Robo provides by default. To find existing Robo task extensions, search in Packagist for projects of type \nrobo-tasks\n.\n\n\nThe convention used to add new tasks for use in your RoboFiles is to create a wrapper trait named \nTasks\n in your namespace that instantiates the implementation class for each task. Each task method in the trait should start with the prefix \ntask\n, and should use \nchained method calls\n for configuration. Task execution should be triggered by the method \nrun\n.\n\n\nTo include additional tasks in your RoboFile, you must \nuse\n the appropriate \nTasks\n in your RoboFile. See the section \nIncluding Additional Tasks\n below. To create your own Robo extension that provides tasks for use in RoboFiles, then you must write your own class that implements TaskInterface, and create a \nTasks\n trait for it as described in the section \nCreating a Robo Extension\n.\n\n\nNote: The \nTasks\n traits are called \nloadTasks\n in Robo core. This is a legacy name, preserved for backwards compatibility purposes. These traits will all be renamed to \nTasks\n in Robo 2.0.\n\n\nIncluding Additional Tasks\n\n\nAdditional tasks may be installed into projects that have included Robo via Composer. For example:\n\n\n$ cd myproject\n$ composer require boedah/robo-drush\n\n\n\nIf any of the tasks you include require external Composer projects themselves, then you must \ncomposer require\n these as well.  See the \nsuggests\n section of Robo's composer.json file for a list of some projects you might need to require.\n\n\nOnce the extension you wish to use has been added to your vendor directory, you may then include it from your RoboFile:\n\n\nclass RoboFile extends \\Robo\\Tasks\n{\n  use Boedah\\Robo\\Task\\Drush\\Tasks;\n\n  public function test(ConsoleIO $io)\n  {\n    // ...\n  }\n}\n\n\n\nOnce you have done this, all of the tasks defined in the extension you selected will be available for use in your commands.\n\n\nNote that at the moment, it is not possible to extend Robo when using the robo.phar. This capability may be added in the future via \nembedded composer\n.\n\n\nRegister command files via PSR-4 autoloading\n\n\nYou can have your project expose extra Robo command files by providing them within your project's PSR-4 namespace.\n\n\nFor example, given the following PSR-4 namespace in your \ncomposer.json\n:\n\n\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyProject\\\\\": \"./src/\"\n        }\n    }\n}\n\n\n\nExtra command files can be exposed by creating one or more classes under \n./src/Robo/Plugin/Commands\n, as shown in the\nexample below:\n\n\n<?php\n\nnamespace MyProject\\Robo\\Plugin\\Commands;\n\nuse Robo\\Symfony\\ConsoleIO;\n\nclass MyCustomCommands extends \\Robo\\Tasks\n{\n    /**\n     * @command my-project:command-one\n     */\n    public function commandOne(ConsoleIO $io) { }\n\n    /**\n     * @command my-project:command-two\n     */\n    public function commandTwo(ConsoleIO $io) { }\n}\n\n\n\nPlease note: command files classes must be placed under \nRobo/Plugin/Commands\n relative namespace and their name\nmust end in \nCommand.php\n or \nCommands.php\n.\n\n\nYou can now access your new commands via Robo:\n\n\n$ ./vendor/bin/robo\n$ ./robo\nRobo 1.2.2-dev\n\nUsage:\n  command [options] [arguments]\n...\n\nAvailable commands:\n  help                  Displays help for a command\n  list                  Lists commands\n my-project\n  my-project:command-one\n  my-project:command-two\n\n\n\nCreating a Robo Extension\n\n\nA Robo tasks extension is created by advertising a Composer package of type \nrobo-tasks\n on \nPackagist\n.  For an overview on how this is done, see the article \nCreating your very own Composer Package\n.  Specific instructions for creating Robo task extensions are provided below.\n\n\nCreate your composer.json File\n\n\nYour composer.json file should look something like the example below:\n\n\n{\n    \"name\": \"boedah/robo-drush\",\n    \"description\": \"Drush CommandStack for Robo Task Runner\",\n    \"type\": \"robo-tasks\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"Boedah\\\\Robo\\\\Task\\\\Drush\\\\\": \"src\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=5.5.0\",\n        \"consolidation/robo\": \"~1\"\n    }\n}\n\n\n\nCustomize the name and autoload paths as necessary, and add any additional required projects needed by the tasks that your extensions will provide.  The type of your project should always be \nrobo-tasks\n.  Robo only supports php >= 5.5.0; you may require a higher version of php if necessary.\n\n\nCreate the Tasks.php Trait\n\n\nIt is recommended to place your trait-loading task in a \nTasks\n file in the same namespace as the task implementation.\n\n\nnamespace Boedah\\Robo\\Task\\Drush;\n\ntrait Tasks\n{\n    /**\n     * @param string $pathToDrush\n     * @return DrushStack\n     */\n    protected function taskDrushStack($pathToDrush = 'drush')\n    {\n        return $this->task(__FUNCTION__, $pathToDrush);\n    }\n}\n\n\n\nNote that the name of the service for a given task must start with the word \"task\", and must have the same name as the function used to call the task.  \n$this->task()\n looks up the service by name; using the PHP built-in constant \nFUNCTION\n for this parameter ensures that the names of these items remain in alignment.\n\n\nTask implementation\n\n\nThe implementation of each task class should extend \\Robo\\Task\\BaseTask, or some class that extends the same, and should used chained initializer methods and defer all operations that alter the state of the system until its \nrun()\n method.  If you follow these patterns, then your task extensions will be usable via Robo collection builders, as explained in the \ncollections\n documentation.\n\n\nThere are many examples of task implementations in the Robo\\Task namespace.  A very basic task example is provided below.  The namespace is \nMyAssetTasks\n, and the example task is \nCompileAssets\n. To customize to your purposes, choose an appropriate namespace, and then define as many tasks as you need.\n\n\n<?php\nnamespace MyAssetTasks;\n\ntrait Tasks\n{\n    /**\n     * Example task to compile assets\n     *\n     * @param string $pathToCompileAssets\n     * @return \\MyAssetTasks\\CompileAssets\n     */\n    protected function taskCompileAssets($path = null)\n    {\n        // Always construct your tasks with the `task()` task builder.\n        return $this->task(CompileAssets::class, $path);\n    }\n}\n\nclass CompileAssets implements \\Robo\\Contract\\TaskInterface\n{\n    // configuration params\n    protected $path;\n    protected $to;\n    function __construct($path)\n    {\n        $this->path = $path;\n    }\n\n    function to($filename)\n    {\n        $this->to = $filename;\n        // must return $this\n        return $this;\n    }\n\n    // must implement Run\n    function run()\n    {\n        //....\n    }\n}\n?>\n\n\n\nTo use the tasks you define in a RoboFile, use its \nTasks\n trait as explained in the section \nIncluding Additional Tasks\n, above.\n\n\nTaskIO\n\n\nTo allow tasks access IO, use the \nRobo\\Common\\TaskIO\n trait, or inherit your task class from \nRobo\\Task\\BaseTask\n (recommended).\n\n\nInside tasks you should print process details with \nprintTaskInfo\n, \nprintTaskSuccess\n, and \nprintTaskError\n.\n\n\n$this->printTaskInfo('Processing...');\n\n\n\nThe Task IO methods send all output through a PSR-3 logger. Tasks should use task IO exclusively; methods such as 'say' and 'ask' should reside in the command method. This allows tasks to be usable in any context that has a PSR-3 logger, including background or server processes where it is not possible to directly query the user.\n\n\nTasks That Use Tasks\n\n\nIf one task implementation needs to use other tasks while it is running, it should do so via a \nCollectionBuilder\n object, as explained in the \nCollections\n documentation.\n\n\nTo obtain access to a \nCollectionBuilder\n, a task should implement \nBuilderAwareInterface\n and use \nBuilderAwareTrait\n.  It will then have access to a collection builder via the \n$this->collectionBuilder()\n method.\n\n\nTesting Extensions\n\n\nIf you wish to use the \ntask()\n methods from your \nTasks\n trait in your unit tests, it is necessary to also use the Robo \nTaskAccessor\n trait, and define a \ncollectionBuilder()\n method to provide a builder.  Collection builders are used to initialize all Robo tasks.  The easiest way to get a usable collection builder in your tests is to initialize Robo's default dependency injection container, and use it to request a new builder.\n\n\nAn example of how to do this in a PHPUnit test is shown below.\n\n\nuse League\\Container\\ContainerAwareInterface;\nuse League\\Container\\ContainerAwareTrait;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\nuse Robo\\TaskAccessor;\nuse Robo\\Robo;\nuse Robo\\Collection\\CollectionBuilder;\n\nclass DrushStackTest extends \\PHPUnit_Framework_TestCase implements ContainerAwareInterface\n{\n    use \\Boedah\\Robo\\Task\\Drush\\Tasks;\n    use TaskAccessor;\n    use ContainerAwareTrait;\n\n    // Set up the Robo container so that we can create tasks in our tests.\n    function setup()\n    {\n        $container = Robo::createDefaultContainer(null, new NullOutput());\n        $this->setContainer($container);\n    }\n\n    // Scaffold the collection builder\n    public function collectionBuilder()\n    {\n        $emptyRobofile = new \\Robo\\Tasks;\n        return CollectionBuilder::create($this->getContainer(), $emptyRobofile);\n    }\n\n    public function testYesIsAssumed()\n    {\n        $command = $this->taskDrushStack()\n            ->drush('command')\n            ->getCommand();\n        $this->assertEquals('drush command -y', $command);\n    }\n}\n\n\n\nTo assert that the output of a command contains some value, use a \nSymfony\\Component\\Console\\Output\\BufferedOutput\n in place of null output when calling Robo::createDefaultContainer().",
            "title": "Extending"
        },
        {
            "location": "/extending/#extending",
            "text": "Robo tasks can be added to your Robo application by using Composer to suppliment the set of built-in tasks that Robo provides by default. To find existing Robo task extensions, search in Packagist for projects of type  robo-tasks .  The convention used to add new tasks for use in your RoboFiles is to create a wrapper trait named  Tasks  in your namespace that instantiates the implementation class for each task. Each task method in the trait should start with the prefix  task , and should use  chained method calls  for configuration. Task execution should be triggered by the method  run .  To include additional tasks in your RoboFile, you must  use  the appropriate  Tasks  in your RoboFile. See the section  Including Additional Tasks  below. To create your own Robo extension that provides tasks for use in RoboFiles, then you must write your own class that implements TaskInterface, and create a  Tasks  trait for it as described in the section  Creating a Robo Extension .  Note: The  Tasks  traits are called  loadTasks  in Robo core. This is a legacy name, preserved for backwards compatibility purposes. These traits will all be renamed to  Tasks  in Robo 2.0.",
            "title": "Extending"
        },
        {
            "location": "/extending/#including-additional-tasks",
            "text": "Additional tasks may be installed into projects that have included Robo via Composer. For example:  $ cd myproject\n$ composer require boedah/robo-drush  If any of the tasks you include require external Composer projects themselves, then you must  composer require  these as well.  See the  suggests  section of Robo's composer.json file for a list of some projects you might need to require.  Once the extension you wish to use has been added to your vendor directory, you may then include it from your RoboFile:  class RoboFile extends \\Robo\\Tasks\n{\n  use Boedah\\Robo\\Task\\Drush\\Tasks;\n\n  public function test(ConsoleIO $io)\n  {\n    // ...\n  }\n}  Once you have done this, all of the tasks defined in the extension you selected will be available for use in your commands.  Note that at the moment, it is not possible to extend Robo when using the robo.phar. This capability may be added in the future via  embedded composer .",
            "title": "Including Additional Tasks"
        },
        {
            "location": "/extending/#register-command-files-via-psr-4-autoloading",
            "text": "You can have your project expose extra Robo command files by providing them within your project's PSR-4 namespace.  For example, given the following PSR-4 namespace in your  composer.json :  {\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyProject\\\\\": \"./src/\"\n        }\n    }\n}  Extra command files can be exposed by creating one or more classes under  ./src/Robo/Plugin/Commands , as shown in the\nexample below:  <?php\n\nnamespace MyProject\\Robo\\Plugin\\Commands;\n\nuse Robo\\Symfony\\ConsoleIO;\n\nclass MyCustomCommands extends \\Robo\\Tasks\n{\n    /**\n     * @command my-project:command-one\n     */\n    public function commandOne(ConsoleIO $io) { }\n\n    /**\n     * @command my-project:command-two\n     */\n    public function commandTwo(ConsoleIO $io) { }\n}  Please note: command files classes must be placed under  Robo/Plugin/Commands  relative namespace and their name\nmust end in  Command.php  or  Commands.php .  You can now access your new commands via Robo:  $ ./vendor/bin/robo\n$ ./robo\nRobo 1.2.2-dev\n\nUsage:\n  command [options] [arguments]\n...\n\nAvailable commands:\n  help                  Displays help for a command\n  list                  Lists commands\n my-project\n  my-project:command-one\n  my-project:command-two",
            "title": "Register command files via PSR-4 autoloading"
        },
        {
            "location": "/extending/#creating-a-robo-extension",
            "text": "A Robo tasks extension is created by advertising a Composer package of type  robo-tasks  on  Packagist .  For an overview on how this is done, see the article  Creating your very own Composer Package .  Specific instructions for creating Robo task extensions are provided below.",
            "title": "Creating a Robo Extension"
        },
        {
            "location": "/extending/#create-your-composerjson-file",
            "text": "Your composer.json file should look something like the example below:  {\n    \"name\": \"boedah/robo-drush\",\n    \"description\": \"Drush CommandStack for Robo Task Runner\",\n    \"type\": \"robo-tasks\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"Boedah\\\\Robo\\\\Task\\\\Drush\\\\\": \"src\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=5.5.0\",\n        \"consolidation/robo\": \"~1\"\n    }\n}  Customize the name and autoload paths as necessary, and add any additional required projects needed by the tasks that your extensions will provide.  The type of your project should always be  robo-tasks .  Robo only supports php >= 5.5.0; you may require a higher version of php if necessary.",
            "title": "Create your composer.json File"
        },
        {
            "location": "/extending/#create-the-tasksphp-trait",
            "text": "It is recommended to place your trait-loading task in a  Tasks  file in the same namespace as the task implementation.  namespace Boedah\\Robo\\Task\\Drush;\n\ntrait Tasks\n{\n    /**\n     * @param string $pathToDrush\n     * @return DrushStack\n     */\n    protected function taskDrushStack($pathToDrush = 'drush')\n    {\n        return $this->task(__FUNCTION__, $pathToDrush);\n    }\n}  Note that the name of the service for a given task must start with the word \"task\", and must have the same name as the function used to call the task.   $this->task()  looks up the service by name; using the PHP built-in constant  FUNCTION  for this parameter ensures that the names of these items remain in alignment.",
            "title": "Create the Tasks.php Trait"
        },
        {
            "location": "/extending/#task-implementation",
            "text": "The implementation of each task class should extend \\Robo\\Task\\BaseTask, or some class that extends the same, and should used chained initializer methods and defer all operations that alter the state of the system until its  run()  method.  If you follow these patterns, then your task extensions will be usable via Robo collection builders, as explained in the  collections  documentation.  There are many examples of task implementations in the Robo\\Task namespace.  A very basic task example is provided below.  The namespace is  MyAssetTasks , and the example task is  CompileAssets . To customize to your purposes, choose an appropriate namespace, and then define as many tasks as you need.  <?php\nnamespace MyAssetTasks;\n\ntrait Tasks\n{\n    /**\n     * Example task to compile assets\n     *\n     * @param string $pathToCompileAssets\n     * @return \\MyAssetTasks\\CompileAssets\n     */\n    protected function taskCompileAssets($path = null)\n    {\n        // Always construct your tasks with the `task()` task builder.\n        return $this->task(CompileAssets::class, $path);\n    }\n}\n\nclass CompileAssets implements \\Robo\\Contract\\TaskInterface\n{\n    // configuration params\n    protected $path;\n    protected $to;\n    function __construct($path)\n    {\n        $this->path = $path;\n    }\n\n    function to($filename)\n    {\n        $this->to = $filename;\n        // must return $this\n        return $this;\n    }\n\n    // must implement Run\n    function run()\n    {\n        //....\n    }\n}\n?>  To use the tasks you define in a RoboFile, use its  Tasks  trait as explained in the section  Including Additional Tasks , above.",
            "title": "Task implementation"
        },
        {
            "location": "/extending/#taskio",
            "text": "To allow tasks access IO, use the  Robo\\Common\\TaskIO  trait, or inherit your task class from  Robo\\Task\\BaseTask  (recommended).  Inside tasks you should print process details with  printTaskInfo ,  printTaskSuccess , and  printTaskError .  $this->printTaskInfo('Processing...');  The Task IO methods send all output through a PSR-3 logger. Tasks should use task IO exclusively; methods such as 'say' and 'ask' should reside in the command method. This allows tasks to be usable in any context that has a PSR-3 logger, including background or server processes where it is not possible to directly query the user.",
            "title": "TaskIO"
        },
        {
            "location": "/extending/#tasks-that-use-tasks",
            "text": "If one task implementation needs to use other tasks while it is running, it should do so via a  CollectionBuilder  object, as explained in the  Collections  documentation.  To obtain access to a  CollectionBuilder , a task should implement  BuilderAwareInterface  and use  BuilderAwareTrait .  It will then have access to a collection builder via the  $this->collectionBuilder()  method.",
            "title": "Tasks That Use Tasks"
        },
        {
            "location": "/extending/#testing-extensions",
            "text": "If you wish to use the  task()  methods from your  Tasks  trait in your unit tests, it is necessary to also use the Robo  TaskAccessor  trait, and define a  collectionBuilder()  method to provide a builder.  Collection builders are used to initialize all Robo tasks.  The easiest way to get a usable collection builder in your tests is to initialize Robo's default dependency injection container, and use it to request a new builder.  An example of how to do this in a PHPUnit test is shown below.  use League\\Container\\ContainerAwareInterface;\nuse League\\Container\\ContainerAwareTrait;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\nuse Robo\\TaskAccessor;\nuse Robo\\Robo;\nuse Robo\\Collection\\CollectionBuilder;\n\nclass DrushStackTest extends \\PHPUnit_Framework_TestCase implements ContainerAwareInterface\n{\n    use \\Boedah\\Robo\\Task\\Drush\\Tasks;\n    use TaskAccessor;\n    use ContainerAwareTrait;\n\n    // Set up the Robo container so that we can create tasks in our tests.\n    function setup()\n    {\n        $container = Robo::createDefaultContainer(null, new NullOutput());\n        $this->setContainer($container);\n    }\n\n    // Scaffold the collection builder\n    public function collectionBuilder()\n    {\n        $emptyRobofile = new \\Robo\\Tasks;\n        return CollectionBuilder::create($this->getContainer(), $emptyRobofile);\n    }\n\n    public function testYesIsAssumed()\n    {\n        $command = $this->taskDrushStack()\n            ->drush('command')\n            ->getCommand();\n        $this->assertEquals('drush command -y', $command);\n    }\n}  To assert that the output of a command contains some value, use a  Symfony\\Component\\Console\\Output\\BufferedOutput  in place of null output when calling Robo::createDefaultContainer().",
            "title": "Testing Extensions"
        },
        {
            "location": "/framework/",
            "text": "Robo as a Framework\n\n\nFor a faster and better start to creating your own commandline application, please see the documentation in the \ng1a/starter\n project.\n\n\nThere are multiple ways to use and package Robo scripts; a few of the alternatives are presented below.\n\n\nCreating a Standalone Phar with Robo\n\n\nIt is possible to create a standalone phar that is implemented with Robo; doing this does not require the RoboFile to be located in the current working directory, or any particular location within your project. To achieve this, first set up your project as shown in the section \nImplementing Composer Scripts with Robo\n. Use of the \"scripts\" section is optional.\n\n\nNext, add an \"autoload\" section to your composer.json to provide a namespace for your Robo commands:\n\n\n{\n    \"name\": \"myorg/myproject\",\n    \"require\": {\n        \"consolidation/Robo\": \"^2\"\n    },\n    \"autoload\":{\n        \"psr-4\":{\n            \"MyProject\\\\\":\"src\"\n        }\n    }\n}\n\n\n\nCreate a new file for your Robo commands, e.g. \nclass RoboFile\n in \nnamespace MyProject\\Commands;\n in the file \nsrc\\Commands\\RoboFile.php\n.  Optionally, add more task libraries as described in the \nextending\n document.\n\n\nCreate a startup script similar to the one below, and add it to the root of your project, or some other location of your choosing:\n\n\n#!/usr/bin/env php\n<?php\n\n// If we're running from phar load the phar autoload file.\n$pharPath = \\Phar::running(true);\nif ($pharPath) {\n    $autoloaderPath = \"$pharPath/vendor/autoload.php\";\n} else {\n    if (file_exists(__DIR__.'/vendor/autoload.php')) {\n        $autoloaderPath = __DIR__.'/vendor/autoload.php';\n    } elseif (file_exists(__DIR__.'/../../autoload.php')) {\n        $autoloaderPath = __DIR__ . '/../../autoload.php';\n    } else {\n        die(\"Could not find autoloader. Run 'composer install'.\");\n    }\n}\n$classLoader = require $autoloaderPath;\n\n// Customization variables\n$appName = \"MyAppName\";\n$appVersion = trim(file_get_contents(__DIR__ . '/VERSION'));\n$commandClasses = [ \\MyProject\\Commands\\RoboFile::class ];\n$selfUpdateRepository = 'myorg/myproject';\n$configurationFilename = 'myconfig.yml';\n\n// Define our Runner, and pass it the command classes we provide.\n$runner = new \\Robo\\Runner($commandClasses);\n$runner\n  ->setSelfUpdateRepository($selfUpdateRepository)\n  ->setConfigurationFilename($configurationFilename)\n  ->setClassLoader($classLoader);\n\n// Execute the command and return the result.\n$output = new \\Symfony\\Component\\Console\\Output\\ConsoleOutput();\n$statusCode = $runner->execute($argv, $appName, $appVersion, $output);\nexit($statusCode);\n\n\n\nWhen using Robo as a framework, the Robo file should be included in the autoloader, as Robo does not include a \nRoboFile.php\n file when used in this mode. Instead, specify the class or classes to load as a parameter to the Robo\\Runner constructor.\n\n\nUse \nbox-project/box2\n or Robo's taskPackPhar to create a phar for your application. If your application's repository is hosted on GitHub, then passing the appropriate GitHub \norg/project\n to the \n\\Robo\\Robo::run()\n method, as shown above, will enable the \nself:update\n command to automatically update to the latest available version. Note that \nself:update\n only works with phar distributions.\n\n\nUsing Multiple RoboFiles in a Standalone Application\n\n\nIt is possible to provide as many command classes as you wish to the Robo \nRunner()\n constructor. You might wish to separate your Robo command implementations into separate Robo files if you have a lot of commands, or if you wish to group similar commands together in the same source file. If you do this, you can simply add more class references to the \n$commandClasses\n variable shown above.\n\n\n$commandClasses = [ \n    \\MyProject\\Commands\\BuildCommands::class, \n    \\MyProject\\Commands\\DeployCommands::class \n];\n\n\n\nIf your application has a large number of command files, or if it supports command extensions, then you might wish to use the Command Discovery class to locate your files. The \nCommandFileDiscovery\n class will use the Symfony Finder class to search for all filenames matching the provided search pattern. It will return a list of class names using the provided base namespace.\n\n\n$discovery = new \\Consolidation\\AnnotatedCommand\\CommandFileDiscovery();\n$discovery->setSearchPattern('*Command.php');\n$commandClasses = $discovery->discover('php/MyProject/Commands', '\\MyProject\\Commands');\n\n\n\nPass the resulting \n$commandClasses\n to the \nRunner()\n constructor as shown above.  See the annotated-commands project for more information about the different options that the discovery command takes.\n\n\nUsing Your Own Dependency Injection Container with Robo (Advanced)\n\n\nIt is also possible to completely replace the Robo application with your own.  To do this, set up your project as described in the sections above, but replace the Robo runner with your own main event loop.\n\n\nAdd the following to your startup file:\n\n\n<?php\nuse League\\Container\\Container;\nuse Robo\\Robo;\n\n$input = new \\Symfony\\Component\\Console\\Input\\ArgvInput($argv);\n$output = new \\Symfony\\Component\\Console\\Output\\ConsoleOutput();\n$config = Robo::createConfiguration(['myconf.yml']);\n$app = new \\MyApplication($config, $input, $output);\n$status_code = $app->run($input, $output);\nexit($status_code);\n\n\n\n\nThen, create your own custom application:\n\n\n<?php\n\nuse Robo\\Common\\ConfigAwareTrait;\nuse Robo\\Config;\nuse Robo\\Robo;\nuse Robo\\Runner as RoboRunner;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass MyApplication {\n\n  const APPLICATION_NAME = 'My Application';\n  const REPOSITORY = 'org/project';\n\n  use ConfigAwareTrait;\n\n  private $runner;\n\n  public function __construct(\n    Config $config,\n    InputInterface $input = NULL,\n    OutputInterface $output = NULL\n  ) {\n\n    // Create applicaton.\n    $this->setConfig($config);\n    $application = new Application(self::APPLICATION_NAME, $config->get('version'));\n\n    // Create and configure container.\n    $container = Robo::createContainer($application, $config);\n    $container->add(MyCustomService::class); // optional\n    Robo::finalizeContainer($container);\n\n    // Instantiate Robo Runner.\n    $this->runner = new RoboRunner([\n      My\\Custom\\Command::class\n    ]);\n    $this->runner->setContainer($container);\n    $this->runner->setSelfUpdateRepository(self::REPOSITORY);\n  }\n\n  public function run(InputInterface $input, OutputInterface $output) {\n    $status_code = $this->runner->run($input, $output);\n\n    return $status_code;\n  }\n\n}\n\n\n\nIf you are using League\\Container (recommended), then you may simply add and share your own classes to the same container.  If you are using some other DI container, then you should use \ndelegate lookup\n to combine them.\n\n\nUsing a Custom Configuration Loader\n\n\nRobo provides a very simple configuration loader. If you wish to use more capable loader, you may opt to do so. Replace the call to \nRobo::createConfiguration()\n with code similar to the following:\n\n\nuse Robo\\Config\\Config;\nuse Consolidation\\Config\\Loader\\YamlConfigLoader;\nuse Consolidation\\Config\\Loader\\ConfigProcessor;\n\n$config = new Config();\n$loader = new YamlConfigLoader();\n$processor = new ConfigProcessor();\n$processor->extend($loader->load('defaults.yml'));\n$processor->extend($loader->load('myconf.yml'));\n$config->import($processor->export());\n\n\n\nYou may also wish to subclass the provided \nConfig\n and \nConfigProcessor\n classes to customize their behavior.\n\n\nThe example above presumes that the configuration object starts off empty. If you need to repeat this process to extend the configuration in a later stage, you should call \n$processor->add($config->export());\n to ensure that the configuration processor is seeded with the previous configuration values.\n\n\nAny configuraiton loader that produces a nested array may be used in place of the config loaders and config processor shown in the example above. For example, if you wish to find configuration files in a certain set of directories, allow .yml or .xml configuration files, and validate the schema of your configuration files (to alert users of any syntax errors or unrecognized configuration values), you might want to consider \nSymfony/Config\n. Symfony/Config produces a clean array of configuration values; the result of \n$processor->processConfiguration()\n may be provided directly to Robo's \n$config->import()\n method.",
            "title": "Robo as Framework"
        },
        {
            "location": "/framework/#robo-as-a-framework",
            "text": "For a faster and better start to creating your own commandline application, please see the documentation in the  g1a/starter  project.  There are multiple ways to use and package Robo scripts; a few of the alternatives are presented below.",
            "title": "Robo as a Framework"
        },
        {
            "location": "/framework/#creating-a-standalone-phar-with-robo",
            "text": "It is possible to create a standalone phar that is implemented with Robo; doing this does not require the RoboFile to be located in the current working directory, or any particular location within your project. To achieve this, first set up your project as shown in the section  Implementing Composer Scripts with Robo . Use of the \"scripts\" section is optional.  Next, add an \"autoload\" section to your composer.json to provide a namespace for your Robo commands:  {\n    \"name\": \"myorg/myproject\",\n    \"require\": {\n        \"consolidation/Robo\": \"^2\"\n    },\n    \"autoload\":{\n        \"psr-4\":{\n            \"MyProject\\\\\":\"src\"\n        }\n    }\n}  Create a new file for your Robo commands, e.g.  class RoboFile  in  namespace MyProject\\Commands;  in the file  src\\Commands\\RoboFile.php .  Optionally, add more task libraries as described in the  extending  document.  Create a startup script similar to the one below, and add it to the root of your project, or some other location of your choosing:  #!/usr/bin/env php\n<?php\n\n// If we're running from phar load the phar autoload file.\n$pharPath = \\Phar::running(true);\nif ($pharPath) {\n    $autoloaderPath = \"$pharPath/vendor/autoload.php\";\n} else {\n    if (file_exists(__DIR__.'/vendor/autoload.php')) {\n        $autoloaderPath = __DIR__.'/vendor/autoload.php';\n    } elseif (file_exists(__DIR__.'/../../autoload.php')) {\n        $autoloaderPath = __DIR__ . '/../../autoload.php';\n    } else {\n        die(\"Could not find autoloader. Run 'composer install'.\");\n    }\n}\n$classLoader = require $autoloaderPath;\n\n// Customization variables\n$appName = \"MyAppName\";\n$appVersion = trim(file_get_contents(__DIR__ . '/VERSION'));\n$commandClasses = [ \\MyProject\\Commands\\RoboFile::class ];\n$selfUpdateRepository = 'myorg/myproject';\n$configurationFilename = 'myconfig.yml';\n\n// Define our Runner, and pass it the command classes we provide.\n$runner = new \\Robo\\Runner($commandClasses);\n$runner\n  ->setSelfUpdateRepository($selfUpdateRepository)\n  ->setConfigurationFilename($configurationFilename)\n  ->setClassLoader($classLoader);\n\n// Execute the command and return the result.\n$output = new \\Symfony\\Component\\Console\\Output\\ConsoleOutput();\n$statusCode = $runner->execute($argv, $appName, $appVersion, $output);\nexit($statusCode);  When using Robo as a framework, the Robo file should be included in the autoloader, as Robo does not include a  RoboFile.php  file when used in this mode. Instead, specify the class or classes to load as a parameter to the Robo\\Runner constructor.  Use  box-project/box2  or Robo's taskPackPhar to create a phar for your application. If your application's repository is hosted on GitHub, then passing the appropriate GitHub  org/project  to the  \\Robo\\Robo::run()  method, as shown above, will enable the  self:update  command to automatically update to the latest available version. Note that  self:update  only works with phar distributions.",
            "title": "Creating a Standalone Phar with Robo"
        },
        {
            "location": "/framework/#using-multiple-robofiles-in-a-standalone-application",
            "text": "It is possible to provide as many command classes as you wish to the Robo  Runner()  constructor. You might wish to separate your Robo command implementations into separate Robo files if you have a lot of commands, or if you wish to group similar commands together in the same source file. If you do this, you can simply add more class references to the  $commandClasses  variable shown above.  $commandClasses = [ \n    \\MyProject\\Commands\\BuildCommands::class, \n    \\MyProject\\Commands\\DeployCommands::class \n];  If your application has a large number of command files, or if it supports command extensions, then you might wish to use the Command Discovery class to locate your files. The  CommandFileDiscovery  class will use the Symfony Finder class to search for all filenames matching the provided search pattern. It will return a list of class names using the provided base namespace.  $discovery = new \\Consolidation\\AnnotatedCommand\\CommandFileDiscovery();\n$discovery->setSearchPattern('*Command.php');\n$commandClasses = $discovery->discover('php/MyProject/Commands', '\\MyProject\\Commands');  Pass the resulting  $commandClasses  to the  Runner()  constructor as shown above.  See the annotated-commands project for more information about the different options that the discovery command takes.",
            "title": "Using Multiple RoboFiles in a Standalone Application"
        },
        {
            "location": "/framework/#using-your-own-dependency-injection-container-with-robo-advanced",
            "text": "It is also possible to completely replace the Robo application with your own.  To do this, set up your project as described in the sections above, but replace the Robo runner with your own main event loop.  Add the following to your startup file:  <?php\nuse League\\Container\\Container;\nuse Robo\\Robo;\n\n$input = new \\Symfony\\Component\\Console\\Input\\ArgvInput($argv);\n$output = new \\Symfony\\Component\\Console\\Output\\ConsoleOutput();\n$config = Robo::createConfiguration(['myconf.yml']);\n$app = new \\MyApplication($config, $input, $output);\n$status_code = $app->run($input, $output);\nexit($status_code);  Then, create your own custom application:  <?php\n\nuse Robo\\Common\\ConfigAwareTrait;\nuse Robo\\Config;\nuse Robo\\Robo;\nuse Robo\\Runner as RoboRunner;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass MyApplication {\n\n  const APPLICATION_NAME = 'My Application';\n  const REPOSITORY = 'org/project';\n\n  use ConfigAwareTrait;\n\n  private $runner;\n\n  public function __construct(\n    Config $config,\n    InputInterface $input = NULL,\n    OutputInterface $output = NULL\n  ) {\n\n    // Create applicaton.\n    $this->setConfig($config);\n    $application = new Application(self::APPLICATION_NAME, $config->get('version'));\n\n    // Create and configure container.\n    $container = Robo::createContainer($application, $config);\n    $container->add(MyCustomService::class); // optional\n    Robo::finalizeContainer($container);\n\n    // Instantiate Robo Runner.\n    $this->runner = new RoboRunner([\n      My\\Custom\\Command::class\n    ]);\n    $this->runner->setContainer($container);\n    $this->runner->setSelfUpdateRepository(self::REPOSITORY);\n  }\n\n  public function run(InputInterface $input, OutputInterface $output) {\n    $status_code = $this->runner->run($input, $output);\n\n    return $status_code;\n  }\n\n}  If you are using League\\Container (recommended), then you may simply add and share your own classes to the same container.  If you are using some other DI container, then you should use  delegate lookup  to combine them.",
            "title": "Using Your Own Dependency Injection Container with Robo (Advanced)"
        },
        {
            "location": "/framework/#using-a-custom-configuration-loader",
            "text": "Robo provides a very simple configuration loader. If you wish to use more capable loader, you may opt to do so. Replace the call to  Robo::createConfiguration()  with code similar to the following:  use Robo\\Config\\Config;\nuse Consolidation\\Config\\Loader\\YamlConfigLoader;\nuse Consolidation\\Config\\Loader\\ConfigProcessor;\n\n$config = new Config();\n$loader = new YamlConfigLoader();\n$processor = new ConfigProcessor();\n$processor->extend($loader->load('defaults.yml'));\n$processor->extend($loader->load('myconf.yml'));\n$config->import($processor->export());  You may also wish to subclass the provided  Config  and  ConfigProcessor  classes to customize their behavior.  The example above presumes that the configuration object starts off empty. If you need to repeat this process to extend the configuration in a later stage, you should call  $processor->add($config->export());  to ensure that the configuration processor is seeded with the previous configuration values.  Any configuraiton loader that produces a nested array may be used in place of the config loaders and config processor shown in the example above. For example, if you wish to find configuration files in a certain set of directories, allow .yml or .xml configuration files, and validate the schema of your configuration files (to alert users of any syntax errors or unrecognized configuration values), you might want to consider  Symfony/Config . Symfony/Config produces a clean array of configuration values; the result of  $processor->processConfiguration()  may be provided directly to Robo's  $config->import()  method.",
            "title": "Using a Custom Configuration Loader"
        },
        {
            "location": "/tasks/Base/",
            "text": "Base Tasks\n\n\nExec\n\n\nExecutes shell script. Closes it when running in background mode.\n\n\n<?php\n$this->taskExec('compass')->arg('watch')->run();\n// or use shortcut\n$this->_exec('compass watch');\n\n$this->taskExec('compass watch')->background()->run();\n\nif ($this->taskExec('phpunit .')->run()->wasSuccessful()) {\n $this->say('tests passed');\n}\n\n?>\n\n\n\n\n\nsimulate($context)\n  {@inheritdoc}\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nExecStack\n\n\nExecute commands one by one in stack.\nStack can be stopped on first fail if you call \nstopOnFail()\n.\n\n\n<?php\n$this->taskExecStack()\n ->stopOnFail()\n ->exec('mkdir site')\n ->exec('cd site')\n ->run();\n\n?>\n\n\n\n\n\nexecutable($executable)\n   * \nparam string\n $executable\n\n\nexec($command)\n   * \nparam string|string[]|CommandInterface\n $command\n\n\nstopOnFail($stopOnFail = null)\n   * \nparam bool\n $stopOnFail\n\n\nresult($result)\n \n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\n\n\nParallelExec\n\n\nClass ParallelExecTask\n\n\n<?php\n$this->taskParallelExec()\n  ->process('php ~/demos/script.php hey')\n  ->process('php ~/demos/script.php hoy')\n  ->process('php ~/demos/script.php gou')\n  ->run();\n?>\n\n\n\n\n\nprocess($command)\n   * \nparam string|\\Robo\\Contract\\CommandInterface\n $command\n\n\nwaitInterval($waitInterval)\n  Parallel processing will wait \n$waitInterval\n seconds after launching each process and before\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nSymfonyCommand\n\n\nExecutes Symfony Command\n\n\n<?php\n// Symfony Command\n$this->taskSymfonyCommand(new \\Codeception\\Command\\Run('run'))\n     ->arg('suite','acceptance')\n     ->opt('debug')\n     ->run();\n\n// Artisan Command\n$this->taskSymfonyCommand(new ModelGeneratorCommand())\n     ->arg('name', 'User')\n     ->run();\n?>\n\n\n\n\n\narg($arg, $value)\n   * \nparam string\n $arg\n\n\nopt($option, $value = null)\n \n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nWatch\n\n\nRuns task when specified file or dir was changed.\nUses Lurker library.\nMonitor third parameter takes Lurker filesystem events types to watch.\nBy default its set to MODIFY event.\n\n\n<?php\n$this->taskWatch()\n     ->monitor(\n         'composer.json',\n         function() {\n             $this->taskComposerUpdate()->run();\n         }\n     )->monitor(\n         'src',\n         function() {\n             $this->taskExec('phpunit')->run();\n         },\n         \\Lurker\\Event\\FilesystemEvent::ALL\n     )->monitor(\n         'migrations',\n         function() {\n             //do something\n         },\n         [\n             \\Lurker\\Event\\FilesystemEvent::CREATE,\n             \\Lurker\\Event\\FilesystemEvent::DELETE\n         ]\n     )->run();\n?>\n\n\n\nPass through the changed file to the callable function\n\n\n$this\n ->taskWatch()\n ->monitor(\n     'filename',\n     function ($event) {\n         $resource = $event->getResource();\n         ... do something with (string)$resource ...\n     },\n     FilesystemEvent::ALL\n )\n ->run();\n\n\n\nThe $event parameter is a \nstandard Symfony file resource object\n\n\n\n\nmonitor($paths, $callable, $events = null)\n   * \nparam string|string[]\n $paths\n\n\nsetOutput($output)\n  Sets the Console Output.",
            "title": "Base Tasks"
        },
        {
            "location": "/tasks/Base/#base-tasks",
            "text": "",
            "title": "Base Tasks"
        },
        {
            "location": "/tasks/Base/#exec",
            "text": "Executes shell script. Closes it when running in background mode.  <?php\n$this->taskExec('compass')->arg('watch')->run();\n// or use shortcut\n$this->_exec('compass watch');\n\n$this->taskExec('compass watch')->background()->run();\n\nif ($this->taskExec('phpunit .')->run()->wasSuccessful()) {\n $this->say('tests passed');\n}\n\n?>   simulate($context)   {@inheritdoc}  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Exec"
        },
        {
            "location": "/tasks/Base/#execstack",
            "text": "Execute commands one by one in stack.\nStack can be stopped on first fail if you call  stopOnFail() .  <?php\n$this->taskExecStack()\n ->stopOnFail()\n ->exec('mkdir site')\n ->exec('cd site')\n ->run();\n\n?>   executable($executable)    *  param string  $executable  exec($command)    *  param string|string[]|CommandInterface  $command  stopOnFail($stopOnFail = null)    *  param bool  $stopOnFail  result($result)    setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command",
            "title": "ExecStack"
        },
        {
            "location": "/tasks/Base/#parallelexec",
            "text": "Class ParallelExecTask  <?php\n$this->taskParallelExec()\n  ->process('php ~/demos/script.php hey')\n  ->process('php ~/demos/script.php hoy')\n  ->process('php ~/demos/script.php gou')\n  ->run();\n?>   process($command)    *  param string|\\Robo\\Contract\\CommandInterface  $command  waitInterval($waitInterval)   Parallel processing will wait  $waitInterval  seconds after launching each process and before  setOutput($output)   Sets the Console Output.",
            "title": "ParallelExec"
        },
        {
            "location": "/tasks/Base/#symfonycommand",
            "text": "Executes Symfony Command  <?php\n// Symfony Command\n$this->taskSymfonyCommand(new \\Codeception\\Command\\Run('run'))\n     ->arg('suite','acceptance')\n     ->opt('debug')\n     ->run();\n\n// Artisan Command\n$this->taskSymfonyCommand(new ModelGeneratorCommand())\n     ->arg('name', 'User')\n     ->run();\n?>   arg($arg, $value)    *  param string  $arg  opt($option, $value = null)    setOutput($output)   Sets the Console Output.",
            "title": "SymfonyCommand"
        },
        {
            "location": "/tasks/Base/#watch",
            "text": "Runs task when specified file or dir was changed.\nUses Lurker library.\nMonitor third parameter takes Lurker filesystem events types to watch.\nBy default its set to MODIFY event.  <?php\n$this->taskWatch()\n     ->monitor(\n         'composer.json',\n         function() {\n             $this->taskComposerUpdate()->run();\n         }\n     )->monitor(\n         'src',\n         function() {\n             $this->taskExec('phpunit')->run();\n         },\n         \\Lurker\\Event\\FilesystemEvent::ALL\n     )->monitor(\n         'migrations',\n         function() {\n             //do something\n         },\n         [\n             \\Lurker\\Event\\FilesystemEvent::CREATE,\n             \\Lurker\\Event\\FilesystemEvent::DELETE\n         ]\n     )->run();\n?>  Pass through the changed file to the callable function  $this\n ->taskWatch()\n ->monitor(\n     'filename',\n     function ($event) {\n         $resource = $event->getResource();\n         ... do something with (string)$resource ...\n     },\n     FilesystemEvent::ALL\n )\n ->run();  The $event parameter is a  standard Symfony file resource object   monitor($paths, $callable, $events = null)    *  param string|string[]  $paths  setOutput($output)   Sets the Console Output.",
            "title": "Watch"
        },
        {
            "location": "/tasks/Filesystem/",
            "text": "Filesystem Tasks\n\n\nCleanDir\n\n\nDeletes all files from specified dir, ignoring git files.\n\n\n<?php\n$this->taskCleanDir(['tmp','logs'])->run();\n// as shortcut\n$this->_cleanDir('app/cache');\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nCopyDir\n\n\nCopies one dir into another\n\n\n<?php\n$this->taskCopyDir(['dist/config' => 'config'])->run();\n// as shortcut\n$this->_copyDir('dist/config', 'config');\n?>\n\n\n\n\n\ndirPermissions($value)\n  Sets the default folder permissions for the destination if it doesn't exist\n\n\nexclude($exclude = null)\n  List files to exclude.\n\n\noverwrite($overwrite)\n  Destination files newer than source files are overwritten.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nDeleteDir\n\n\nDeletes dir\n\n\n<?php\n$this->taskDeleteDir('tmp')->run();\n// as shortcut\n$this->_deleteDir(['tmp', 'log']);\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nFilesystemStack\n\n\nWrapper for \nSymfony Filesystem\n Component.\nComands are executed in stack and can be stopped on first fail with \nstopOnFail\n option.\n\n\n<?php\n$this->taskFilesystemStack()\n     ->mkdir('logs')\n     ->touch('logs/.gitignore')\n     ->chgrp('www', 'www-data')\n     ->symlink('/var/log/nginx/error.log', 'logs/error.log')\n     ->run();\n\n// one line\n$this->_touch('.gitignore');\n$this->_mkdir('logs');\n\n?>\n\n\n\n\n\n$this mkdir(string|array|\\Traversable $dir, int $mode = 0777)\n \n\n\n$this touch(string|array|\\Traversable $file, int $time = null, int $atime = null)\n \n\n\n$this copy(string $from, string $to, bool $force = false)\n \n\n\n$this chmod(string|array|\\Traversable $file, int $permissions, int $umask = 0000, bool $recursive = false)\n \n\n\n$this chgrp(string|array|\\Traversable $file, string $group, bool $recursive = false)\n \n\n\n$this chown(string|array|\\Traversable $file, string $user, bool $recursive = false)\n \n\n\n$this remove(string|array|\\Traversable $file)\n \n\n\n$this rename(string $from, string $to, bool $force = false)\n \n\n\n$this symlink(string $from, string $to, bool $copyOnWindows = false)\n \n\n\n\n\n$this mirror(string $from, string $to, \\Traversable $iterator = null, array $options = [])\n \n\n\n\n\n\n\nstopOnFail($stop = null)\n   * \nparam bool\n $stop\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nFlattenDir\n\n\nSearches for files in a nested directory structure and copies them to\na target directory with or without the parent directories. The task was\ninspired by \ngulp-flatten\n.\n\n\nExample directory structure:\n\n\n\u2514\u2500\u2500 assets\n    \u251c\u2500\u2500 asset-library1\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 asset-library1.min.js\n    \u2514\u2500\u2500 asset-library2\n        \u251c\u2500\u2500 README.md\n        \u2514\u2500\u2500 asset-library2.min.js\n\n\n\nThe following code will search the \n*.min.js\n files and copy them\ninside a new \ndist\n folder:\n\n\n<?php\n$this->taskFlattenDir(['assets/*.min.js' => 'dist'])->run();\n// or use shortcut\n$this->_flattenDir('assets/*.min.js', 'dist');\n?>\n\n\n\nYou can also define the target directory with an additional method, instead of\nkey/value pairs. More similar to the gulp-flatten syntax:\n\n\n<?php\n$this->taskFlattenDir(['assets/*.min.js'])\n  ->to('dist')\n  ->run();\n?>\n\n\n\nYou can also append parts of the parent directories to the target path. If you give\nthe value \n1\n to the \nincludeParents()\n method, then the top parent will be appended\nto the target directory resulting in a path such as \ndist/assets/asset-library1.min.js\n.\n\n\nIf you give a negative number, such as \n-1\n (the same as specifying \narray(0, 1)\n then\nthe bottom parent will be appended, resulting in a path such as\n\ndist/asset-library1/asset-library1.min.js\n.\n\n\nThe top parent directory will always be starting from the relative path to the current\ndirectory. You can override that with the \nparentDir()\n method. If in the above example\nyou would specify \nassets\n, then the top parent directory would be \nasset-library1\n.\n\n\n<?php\n$this->taskFlattenDir(['assets/*.min.js' => 'dist'])\n  ->parentDir('assets')\n  ->includeParents(1)\n  ->run();\n?>\n\n\n\n\n\ndirPermissions($permission)\n  Sets the default folder permissions for the destination if it does not exist.\n\n\nincludeParents($parents)\n  Sets the value from which direction and how much parent dirs should be included.\n\n\nparentDir($dir)\n  Sets the parent directory from which the relative parent directories will be calculated.\n\n\nto($target)\n  Sets the target directory where the files will be copied to.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nMirrorDir\n\n\nMirrors a directory to another\n\n\n<?php\n$this->taskMirrorDir(['dist/config/' => 'config/'])->run();\n// or use shortcut\n$this->_mirrorDir('dist/config/', 'config/');\n\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nTmpDir\n\n\nCreate a temporary directory that is automatically cleaned up\nonce the task collection is is part of completes.\n\n\nUse WorkDir if you do not want the directory to be deleted.\n\n\n<?php\n// Delete on rollback or on successful completion.\n// Note that in this example, everything is deleted at\n// the end of $collection->run().\n$collection = $this->collectionBuilder();\n$tmpPath = $collection->tmpDir()->getPath();\n$collection->taskFilesystemStack()\n          ->mkdir(\"$tmpPath/log\")\n          ->touch(\"$tmpPath/log/error.txt\");\n$collection->run();\n// as shortcut (deleted when program exits)\n$tmpPath = $this->_tmpDir();\n?>\n\n\n\n\n\ncwd($shouldChangeWorkingDirectory = null)\n  Flag that we should cwd to the temporary directory when it is\n\n\ncomplete()\n  Delete this directory when our collection completes.\n\n\ngetPath()\n  Get a reference to the path to the temporary directory, so that\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nWorkDir\n\n\nCreate a temporary working directory that is automatically renamed to its\nfinal desired location if all of the tasks in the collection succeed.  If\nthere is a rollback, then the working directory is deleted.\n\n\n<?php\n$collection = $this->collectionBuilder();\n$workingPath = $collection->workDir(\"build\")->getPath();\n$collection->taskFilesystemStack()\n          ->mkdir(\"$workingPath/log\")\n          ->touch(\"$workingPath/log/error.txt\");\n$collection->run();\n?>\n\n\n\n\n\ncomplete()\n  Move our working directory into its final destination once the\n\n\nrollback()\n  Delete our working directory\n\n\ngetPath()\n  Get a reference to the path to the temporary directory, so that\n\n\ncwd($shouldChangeWorkingDirectory = null)\n  Flag that we should cwd to the temporary directory when it is\n\n\nsetOutput($output)\n  Sets the Console Output.",
            "title": "FileSystem Tasks"
        },
        {
            "location": "/tasks/Filesystem/#filesystem-tasks",
            "text": "",
            "title": "Filesystem Tasks"
        },
        {
            "location": "/tasks/Filesystem/#cleandir",
            "text": "Deletes all files from specified dir, ignoring git files.  <?php\n$this->taskCleanDir(['tmp','logs'])->run();\n// as shortcut\n$this->_cleanDir('app/cache');\n?>   setOutput($output)   Sets the Console Output.",
            "title": "CleanDir"
        },
        {
            "location": "/tasks/Filesystem/#copydir",
            "text": "Copies one dir into another  <?php\n$this->taskCopyDir(['dist/config' => 'config'])->run();\n// as shortcut\n$this->_copyDir('dist/config', 'config');\n?>   dirPermissions($value)   Sets the default folder permissions for the destination if it doesn't exist  exclude($exclude = null)   List files to exclude.  overwrite($overwrite)   Destination files newer than source files are overwritten.  setOutput($output)   Sets the Console Output.",
            "title": "CopyDir"
        },
        {
            "location": "/tasks/Filesystem/#deletedir",
            "text": "Deletes dir  <?php\n$this->taskDeleteDir('tmp')->run();\n// as shortcut\n$this->_deleteDir(['tmp', 'log']);\n?>   setOutput($output)   Sets the Console Output.",
            "title": "DeleteDir"
        },
        {
            "location": "/tasks/Filesystem/#filesystemstack",
            "text": "Wrapper for  Symfony Filesystem  Component.\nComands are executed in stack and can be stopped on first fail with  stopOnFail  option.  <?php\n$this->taskFilesystemStack()\n     ->mkdir('logs')\n     ->touch('logs/.gitignore')\n     ->chgrp('www', 'www-data')\n     ->symlink('/var/log/nginx/error.log', 'logs/error.log')\n     ->run();\n\n// one line\n$this->_touch('.gitignore');\n$this->_mkdir('logs');\n\n?>   $this mkdir(string|array|\\Traversable $dir, int $mode = 0777)    $this touch(string|array|\\Traversable $file, int $time = null, int $atime = null)    $this copy(string $from, string $to, bool $force = false)    $this chmod(string|array|\\Traversable $file, int $permissions, int $umask = 0000, bool $recursive = false)    $this chgrp(string|array|\\Traversable $file, string $group, bool $recursive = false)    $this chown(string|array|\\Traversable $file, string $user, bool $recursive = false)    $this remove(string|array|\\Traversable $file)    $this rename(string $from, string $to, bool $force = false)    $this symlink(string $from, string $to, bool $copyOnWindows = false)     $this mirror(string $from, string $to, \\Traversable $iterator = null, array $options = [])      stopOnFail($stop = null)    *  param bool  $stop   setOutput($output)   Sets the Console Output.",
            "title": "FilesystemStack"
        },
        {
            "location": "/tasks/Filesystem/#flattendir",
            "text": "Searches for files in a nested directory structure and copies them to\na target directory with or without the parent directories. The task was\ninspired by  gulp-flatten .  Example directory structure:  \u2514\u2500\u2500 assets\n    \u251c\u2500\u2500 asset-library1\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 asset-library1.min.js\n    \u2514\u2500\u2500 asset-library2\n        \u251c\u2500\u2500 README.md\n        \u2514\u2500\u2500 asset-library2.min.js  The following code will search the  *.min.js  files and copy them\ninside a new  dist  folder:  <?php\n$this->taskFlattenDir(['assets/*.min.js' => 'dist'])->run();\n// or use shortcut\n$this->_flattenDir('assets/*.min.js', 'dist');\n?>  You can also define the target directory with an additional method, instead of\nkey/value pairs. More similar to the gulp-flatten syntax:  <?php\n$this->taskFlattenDir(['assets/*.min.js'])\n  ->to('dist')\n  ->run();\n?>  You can also append parts of the parent directories to the target path. If you give\nthe value  1  to the  includeParents()  method, then the top parent will be appended\nto the target directory resulting in a path such as  dist/assets/asset-library1.min.js .  If you give a negative number, such as  -1  (the same as specifying  array(0, 1)  then\nthe bottom parent will be appended, resulting in a path such as dist/asset-library1/asset-library1.min.js .  The top parent directory will always be starting from the relative path to the current\ndirectory. You can override that with the  parentDir()  method. If in the above example\nyou would specify  assets , then the top parent directory would be  asset-library1 .  <?php\n$this->taskFlattenDir(['assets/*.min.js' => 'dist'])\n  ->parentDir('assets')\n  ->includeParents(1)\n  ->run();\n?>   dirPermissions($permission)   Sets the default folder permissions for the destination if it does not exist.  includeParents($parents)   Sets the value from which direction and how much parent dirs should be included.  parentDir($dir)   Sets the parent directory from which the relative parent directories will be calculated.  to($target)   Sets the target directory where the files will be copied to.  setOutput($output)   Sets the Console Output.",
            "title": "FlattenDir"
        },
        {
            "location": "/tasks/Filesystem/#mirrordir",
            "text": "Mirrors a directory to another  <?php\n$this->taskMirrorDir(['dist/config/' => 'config/'])->run();\n// or use shortcut\n$this->_mirrorDir('dist/config/', 'config/');\n\n?>   setOutput($output)   Sets the Console Output.",
            "title": "MirrorDir"
        },
        {
            "location": "/tasks/Filesystem/#tmpdir",
            "text": "Create a temporary directory that is automatically cleaned up\nonce the task collection is is part of completes.  Use WorkDir if you do not want the directory to be deleted.  <?php\n// Delete on rollback or on successful completion.\n// Note that in this example, everything is deleted at\n// the end of $collection->run().\n$collection = $this->collectionBuilder();\n$tmpPath = $collection->tmpDir()->getPath();\n$collection->taskFilesystemStack()\n          ->mkdir(\"$tmpPath/log\")\n          ->touch(\"$tmpPath/log/error.txt\");\n$collection->run();\n// as shortcut (deleted when program exits)\n$tmpPath = $this->_tmpDir();\n?>   cwd($shouldChangeWorkingDirectory = null)   Flag that we should cwd to the temporary directory when it is  complete()   Delete this directory when our collection completes.  getPath()   Get a reference to the path to the temporary directory, so that  setOutput($output)   Sets the Console Output.",
            "title": "TmpDir"
        },
        {
            "location": "/tasks/Filesystem/#workdir",
            "text": "Create a temporary working directory that is automatically renamed to its\nfinal desired location if all of the tasks in the collection succeed.  If\nthere is a rollback, then the working directory is deleted.  <?php\n$collection = $this->collectionBuilder();\n$workingPath = $collection->workDir(\"build\")->getPath();\n$collection->taskFilesystemStack()\n          ->mkdir(\"$workingPath/log\")\n          ->touch(\"$workingPath/log/error.txt\");\n$collection->run();\n?>   complete()   Move our working directory into its final destination once the  rollback()   Delete our working directory  getPath()   Get a reference to the path to the temporary directory, so that  cwd($shouldChangeWorkingDirectory = null)   Flag that we should cwd to the temporary directory when it is  setOutput($output)   Sets the Console Output.",
            "title": "WorkDir"
        },
        {
            "location": "/tasks/File/",
            "text": "File Tasks\n\n\nConcat\n\n\nMerges files into one. Used for preparing assets.\n\n\n<?php\n$this->taskConcat([\n     'web/assets/screen.css',\n     'web/assets/print.css',\n     'web/assets/theme.css'\n ])\n ->to('web/assets/style.css')\n ->run()\n?>\n\n\n\n\n\nto($dst)\n  set the destination file\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nReplace\n\n\nPerforms search and replace inside a files.\n\n\n<?php\n$this->taskReplaceInFile('VERSION')\n ->from('0.2.0')\n ->to('0.3.0')\n ->run();\n\n$this->taskReplaceInFile('README.md')\n ->from(date('Y')-1)\n ->to(date('Y'))\n ->run();\n\n$this->taskReplaceInFile('config.yml')\n ->regex('~^service:~')\n ->to('services:')\n ->run();\n\n$this->taskReplaceInFile('box/robo.txt')\n ->from(array('##dbname##', '##dbhost##'))\n ->to(array('robo', 'localhost'))\n ->run();\n?>\n\n\n\n\n\nfilename($filename)\n   * \nparam string\n $filename\n\n\nfrom($from)\n  String(s) to be replaced.\n\n\nto($to)\n  Value(s) to be set as a replacement.\n\n\nregex($regex)\n  Regex to match string to be replaced.\n\n\nlimit($limit)\n  If used with $this->regexp() how many counts will be replaced\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nTmpFile\n\n\nCreate a temporary file that is automatically cleaned up\nonce the task collection is is part of completes. When created,\nit is given a random filename.\n\n\nThis temporary file may be manipulated exacatly like taskWrite().\nIt is deleted as soon as the collection it is a part of completes\nor rolls back.\n\n\n<?php\n$collection = $this->collectionBuilder();\n$tmpFilePath = $collection->taskTmpFile()\n     ->line('-----')\n     ->line(date('Y-m-d').' '.$title)\n     ->line('----')\n     ->getPath();\n$collection->run();\n?>\n\n\n\n\n\ncomplete()\n  Delete this file when our collection completes.\n\n\nfilename($filename)\n   * \nparam string\n $filename\n\n\nappend($append = null)\n   * \nparam bool\n $append\n\n\nline($line)\n  add a line.\n\n\nlines(array $lines)\n  add more lines.\n\n\ntext($text)\n  add a text.\n\n\ntextFromFile($filename)\n  add a text from a file.\n\n\nplace($name, $val)\n  substitute a placeholder with value, placeholder must be enclosed by \n{}\n.\n\n\nreplace($string, $replacement)\n  replace any string with value.\n\n\nregexReplace($pattern, $replacement)\n  replace any string with value using regular expression.\n\n\nappendIfMatches($pattern, $text)\n  Append the provided text to the end of the buffer if the provided\n\n\nappendUnlessMatches($pattern, $text)\n  Append the provided text to the end of the buffer unless the provided\n\n\noriginalContents()\n  @return string\n\n\nwouldChange()\n  @return bool\n\n\ngetPath()\n  @return string\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nWrite\n\n\nWrites to file.\n\n\n<?php\n$this->taskWriteToFile('blogpost.md')\n     ->line('-----')\n     ->line(date('Y-m-d').' '.$title)\n     ->line('----')\n     ->run();\n?>\n\n\n\n\n\nfilename($filename)\n   * \nparam string\n $filename\n\n\nappend($append = null)\n   * \nparam bool\n $append\n\n\nline($line)\n  add a line.\n\n\nlines(array $lines)\n  add more lines.\n\n\ntext($text)\n  add a text.\n\n\ntextFromFile($filename)\n  add a text from a file.\n\n\nplace($name, $val)\n  substitute a placeholder with value, placeholder must be enclosed by \n{}\n.\n\n\nreplace($string, $replacement)\n  replace any string with value.\n\n\nregexReplace($pattern, $replacement)\n  replace any string with value using regular expression.\n\n\nappendIfMatches($pattern, $text)\n  Append the provided text to the end of the buffer if the provided\n\n\nappendUnlessMatches($pattern, $text)\n  Append the provided text to the end of the buffer unless the provided\n\n\noriginalContents()\n  @return string\n\n\nwouldChange()\n  @return bool\n\n\ngetPath()\n  @return string\n\n\nsetOutput($output)\n  Sets the Console Output.",
            "title": "File Tasks"
        },
        {
            "location": "/tasks/File/#file-tasks",
            "text": "",
            "title": "File Tasks"
        },
        {
            "location": "/tasks/File/#concat",
            "text": "Merges files into one. Used for preparing assets.  <?php\n$this->taskConcat([\n     'web/assets/screen.css',\n     'web/assets/print.css',\n     'web/assets/theme.css'\n ])\n ->to('web/assets/style.css')\n ->run()\n?>   to($dst)   set the destination file  setOutput($output)   Sets the Console Output.",
            "title": "Concat"
        },
        {
            "location": "/tasks/File/#replace",
            "text": "Performs search and replace inside a files.  <?php\n$this->taskReplaceInFile('VERSION')\n ->from('0.2.0')\n ->to('0.3.0')\n ->run();\n\n$this->taskReplaceInFile('README.md')\n ->from(date('Y')-1)\n ->to(date('Y'))\n ->run();\n\n$this->taskReplaceInFile('config.yml')\n ->regex('~^service:~')\n ->to('services:')\n ->run();\n\n$this->taskReplaceInFile('box/robo.txt')\n ->from(array('##dbname##', '##dbhost##'))\n ->to(array('robo', 'localhost'))\n ->run();\n?>   filename($filename)    *  param string  $filename  from($from)   String(s) to be replaced.  to($to)   Value(s) to be set as a replacement.  regex($regex)   Regex to match string to be replaced.  limit($limit)   If used with $this->regexp() how many counts will be replaced  setOutput($output)   Sets the Console Output.",
            "title": "Replace"
        },
        {
            "location": "/tasks/File/#tmpfile",
            "text": "Create a temporary file that is automatically cleaned up\nonce the task collection is is part of completes. When created,\nit is given a random filename.  This temporary file may be manipulated exacatly like taskWrite().\nIt is deleted as soon as the collection it is a part of completes\nor rolls back.  <?php\n$collection = $this->collectionBuilder();\n$tmpFilePath = $collection->taskTmpFile()\n     ->line('-----')\n     ->line(date('Y-m-d').' '.$title)\n     ->line('----')\n     ->getPath();\n$collection->run();\n?>   complete()   Delete this file when our collection completes.  filename($filename)    *  param string  $filename  append($append = null)    *  param bool  $append  line($line)   add a line.  lines(array $lines)   add more lines.  text($text)   add a text.  textFromFile($filename)   add a text from a file.  place($name, $val)   substitute a placeholder with value, placeholder must be enclosed by  {} .  replace($string, $replacement)   replace any string with value.  regexReplace($pattern, $replacement)   replace any string with value using regular expression.  appendIfMatches($pattern, $text)   Append the provided text to the end of the buffer if the provided  appendUnlessMatches($pattern, $text)   Append the provided text to the end of the buffer unless the provided  originalContents()   @return string  wouldChange()   @return bool  getPath()   @return string  setOutput($output)   Sets the Console Output.",
            "title": "TmpFile"
        },
        {
            "location": "/tasks/File/#write",
            "text": "Writes to file.  <?php\n$this->taskWriteToFile('blogpost.md')\n     ->line('-----')\n     ->line(date('Y-m-d').' '.$title)\n     ->line('----')\n     ->run();\n?>   filename($filename)    *  param string  $filename  append($append = null)    *  param bool  $append  line($line)   add a line.  lines(array $lines)   add more lines.  text($text)   add a text.  textFromFile($filename)   add a text from a file.  place($name, $val)   substitute a placeholder with value, placeholder must be enclosed by  {} .  replace($string, $replacement)   replace any string with value.  regexReplace($pattern, $replacement)   replace any string with value using regular expression.  appendIfMatches($pattern, $text)   Append the provided text to the end of the buffer if the provided  appendUnlessMatches($pattern, $text)   Append the provided text to the end of the buffer unless the provided  originalContents()   @return string  wouldChange()   @return bool  getPath()   @return string  setOutput($output)   Sets the Console Output.",
            "title": "Write"
        },
        {
            "location": "/tasks/Composer/",
            "text": "Composer Tasks\n\n\nCheckPlatformReqs\n\n\nComposer Check Platform Requirements\n\n\n<?php\n// simple execution\n$this->taskComposerValidate()->run();\n?>\n\n\n\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nConfig\n\n\nComposer Config\n\n\n<?php\n// simple execution\n$this->taskComposerConfig()->set('bin-dir', 'bin/')->run();\n?>\n\n\n\n\n\nset($key, $value)\n  Set a configuration value.\n\n\nuseGlobal($useGlobal = null)\n  Operate on the global repository\n\n\nrepository($id, $uri, $repoType = null)\n   * \nparam string\n $id\n\n\nremoveRepository($id)\n   * \nparam string\n $id\n\n\ndisableRepository($id)\n   * \nparam string\n $id\n\n\nenableRepository($id)\n   * \nparam string\n $id\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nCreateProject\n\n\nComposer CreateProject\n\n\n<?php\n// simple execution\n$this->taskComposerCreateProject()->source('foo/bar')->target('myBar')->run();\n?>\n\n\n\n\n\nsource($source)\n   * \nparam string\n $source\n\n\ntarget($target)\n   * \nparam string\n $target\n\n\nversion($version)\n   * \nparam string\n $version\n\n\nkeepVcs($keep = null)\n   * \nparam bool\n $keep\n\n\nnoInstall($noInstall = null)\n   * \nparam bool\n $noInstall\n\n\nrepository($repository)\n   * \nparam string\n $repository\n\n\nstability($stability)\n   * \nparam string\n $stability\n\n\nbuildCommand()\n  {@inheritdoc}\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nDumpAutoload\n\n\nComposer Dump Autoload\n\n\n<?php\n// simple execution\n$this->taskComposerDumpAutoload()->run();\n\n// dump auto loader with custom path\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader dump with custom path\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->optimize()\n     ->run();\n\n// optimize autoloader dump with custom path and no dev\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->optimize()\n     ->noDev()\n     ->run();\n?>\n\n\n\n\n\noptimize($optimize = null)\n   * \nparam bool\n $optimize\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nInit\n\n\nComposer Init\n\n\n<?php\n// simple execution\n$this->taskComposerInit()->run();\n?>\n\n\n\n\n\nprojectName($projectName)\n   * \nparam string\n $projectName\n\n\ndescription($description)\n   * \nparam string\n $description\n\n\nauthor($author)\n   * \nparam string\n $author\n\n\nprojectType($type)\n   * \nparam string\n $type\n\n\nhomepage($homepage)\n   * \nparam string\n $homepage\n\n\ndependency($project, $version = null)\n  'require' is a keyword, so it cannot be a method name.\n\n\nstability($stability)\n   * \nparam string\n $stability\n\n\nlicense($license)\n   * \nparam string\n $license\n\n\nrepository($repository)\n   * \nparam string\n $repository\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nInstall\n\n\nComposer Install\n\n\n<?php\n// simple execution\n$this->taskComposerInstall()->run();\n\n// prefer dist with custom path\n$this->taskComposerInstall('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader with custom path\n$this->taskComposerInstall('path/to/my/composer.phar')\n     ->optimizeAutoloader()\n     ->run();\n?>\n\n\n\n\n\nnoSuggest($noSuggest = null)\n  adds \nno-suggest\n option to composer\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nRemove\n\n\nComposer Remove\n\n\n<?php\n// simple execution\n$this->taskComposerRemove()->run();\n?>\n\n\n\n\n\ndev($dev = null)\n   * \nparam bool\n $dev\n\n\nnoProgress($noProgress = null)\n   * \nparam bool\n $noProgress\n\n\nnoUpdate($noUpdate = null)\n   * \nparam bool\n $noUpdate\n\n\nupdateNoDev($updateNoDev = null)\n   * \nparam bool\n $updateNoDev\n\n\nnoUpdateWithDependencies($updateWithDependencies = null)\n   * \nparam bool\n $updateWithDependencies\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nRequireDependency\n\n\nComposer Require\n\n\n<?php\n// simple execution\n$this->taskComposerRequire()->dependency('foo/bar', '^.2.4.8')->run();\n?>\n\n\n\n\n\ndependency($project, $version = null)\n  'require' is a keyword, so it cannot be a method name.\n\n\nnoSuggest($noSuggest = null)\n  adds \nno-suggest\n option to composer\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nComposer Update\n\n\n<?php\n// simple execution\n$this->taskComposerUpdate()->run();\n\n// prefer dist with custom path\n$this->taskComposerUpdate('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader with custom path\n$this->taskComposerUpdate('path/to/my/composer.phar')\n     ->optimizeAutoloader()\n     ->run();\n?>\n\n\n\n\n\nnoSuggest($noSuggest = null)\n  adds \nno-suggest\n option to composer\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nValidate\n\n\nComposer Validate\n\n\n<?php\n// simple execution\n$this->taskComposerValidate()->run();\n?>\n\n\n\n\n\nnoCheckAll($noCheckAll = null)\n   * \nparam bool\n $noCheckAll\n\n\nnoCheckLock($noCheckLock = null)\n   * \nparam bool\n $noCheckLock\n\n\nnoCheckPublish($noCheckPublish = null)\n   * \nparam bool\n $noCheckPublish\n\n\nwithDependencies($withDependencies = null)\n   * \nparam bool\n $withDependencies\n\n\nstrict($strict = null)\n   * \nparam bool\n $strict\n\n\npreferDist($preferDist = null)\n  adds \nprefer-dist\n option to composer\n\n\npreferSource()\n  adds \nprefer-source\n option to composer\n\n\ndev($dev = null)\n  adds \ndev\n option to composer\n\n\nnoDev()\n  adds \nno-dev\n option to composer\n\n\nansi($ansi = null)\n  adds \nansi\n option to composer\n\n\nnoAnsi()\n  adds \nno-ansi\n option to composer\n\n\ninteraction($interaction = null)\n   * \nparam bool\n $interaction\n\n\nnoInteraction()\n  adds \nno-interaction\n option to composer\n\n\noptimizeAutoloader($optimize = null)\n  adds \noptimize-autoloader\n option to composer\n\n\nignorePlatformRequirements($ignore = null)\n  adds \nignore-platform-reqs\n option to composer\n\n\ndisablePlugins($disable = null)\n  disable plugins\n\n\nnoScripts($disable = null)\n  skip scripts\n\n\nworkingDir($dir)\n  adds \n--working-dir $dir\n option to composer\n\n\nbuildCommand()\n  Copy class fields into command options as directed.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Composer Tasks"
        },
        {
            "location": "/tasks/Composer/#composer-tasks",
            "text": "",
            "title": "Composer Tasks"
        },
        {
            "location": "/tasks/Composer/#checkplatformreqs",
            "text": "Composer Check Platform Requirements  <?php\n// simple execution\n$this->taskComposerValidate()->run();\n?>   preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "CheckPlatformReqs"
        },
        {
            "location": "/tasks/Composer/#config",
            "text": "Composer Config  <?php\n// simple execution\n$this->taskComposerConfig()->set('bin-dir', 'bin/')->run();\n?>   set($key, $value)   Set a configuration value.  useGlobal($useGlobal = null)   Operate on the global repository  repository($id, $uri, $repoType = null)    *  param string  $id  removeRepository($id)    *  param string  $id  disableRepository($id)    *  param string  $id  enableRepository($id)    *  param string  $id  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Config"
        },
        {
            "location": "/tasks/Composer/#createproject",
            "text": "Composer CreateProject  <?php\n// simple execution\n$this->taskComposerCreateProject()->source('foo/bar')->target('myBar')->run();\n?>   source($source)    *  param string  $source  target($target)    *  param string  $target  version($version)    *  param string  $version  keepVcs($keep = null)    *  param bool  $keep  noInstall($noInstall = null)    *  param bool  $noInstall  repository($repository)    *  param string  $repository  stability($stability)    *  param string  $stability  buildCommand()   {@inheritdoc}  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "CreateProject"
        },
        {
            "location": "/tasks/Composer/#dumpautoload",
            "text": "Composer Dump Autoload  <?php\n// simple execution\n$this->taskComposerDumpAutoload()->run();\n\n// dump auto loader with custom path\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader dump with custom path\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->optimize()\n     ->run();\n\n// optimize autoloader dump with custom path and no dev\n$this->taskComposerDumpAutoload('path/to/my/composer.phar')\n     ->optimize()\n     ->noDev()\n     ->run();\n?>   optimize($optimize = null)    *  param bool  $optimize  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "DumpAutoload"
        },
        {
            "location": "/tasks/Composer/#init",
            "text": "Composer Init  <?php\n// simple execution\n$this->taskComposerInit()->run();\n?>   projectName($projectName)    *  param string  $projectName  description($description)    *  param string  $description  author($author)    *  param string  $author  projectType($type)    *  param string  $type  homepage($homepage)    *  param string  $homepage  dependency($project, $version = null)   'require' is a keyword, so it cannot be a method name.  stability($stability)    *  param string  $stability  license($license)    *  param string  $license  repository($repository)    *  param string  $repository  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Init"
        },
        {
            "location": "/tasks/Composer/#install",
            "text": "Composer Install  <?php\n// simple execution\n$this->taskComposerInstall()->run();\n\n// prefer dist with custom path\n$this->taskComposerInstall('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader with custom path\n$this->taskComposerInstall('path/to/my/composer.phar')\n     ->optimizeAutoloader()\n     ->run();\n?>   noSuggest($noSuggest = null)   adds  no-suggest  option to composer  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Install"
        },
        {
            "location": "/tasks/Composer/#remove",
            "text": "Composer Remove  <?php\n// simple execution\n$this->taskComposerRemove()->run();\n?>   dev($dev = null)    *  param bool  $dev  noProgress($noProgress = null)    *  param bool  $noProgress  noUpdate($noUpdate = null)    *  param bool  $noUpdate  updateNoDev($updateNoDev = null)    *  param bool  $updateNoDev  noUpdateWithDependencies($updateWithDependencies = null)    *  param bool  $updateWithDependencies  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Remove"
        },
        {
            "location": "/tasks/Composer/#requiredependency",
            "text": "Composer Require  <?php\n// simple execution\n$this->taskComposerRequire()->dependency('foo/bar', '^.2.4.8')->run();\n?>   dependency($project, $version = null)   'require' is a keyword, so it cannot be a method name.  noSuggest($noSuggest = null)   adds  no-suggest  option to composer  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "RequireDependency"
        },
        {
            "location": "/tasks/Composer/#update",
            "text": "Composer Update  <?php\n// simple execution\n$this->taskComposerUpdate()->run();\n\n// prefer dist with custom path\n$this->taskComposerUpdate('path/to/my/composer.phar')\n     ->preferDist()\n     ->run();\n\n// optimize autoloader with custom path\n$this->taskComposerUpdate('path/to/my/composer.phar')\n     ->optimizeAutoloader()\n     ->run();\n?>   noSuggest($noSuggest = null)   adds  no-suggest  option to composer  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Update"
        },
        {
            "location": "/tasks/Composer/#validate",
            "text": "Composer Validate  <?php\n// simple execution\n$this->taskComposerValidate()->run();\n?>   noCheckAll($noCheckAll = null)    *  param bool  $noCheckAll  noCheckLock($noCheckLock = null)    *  param bool  $noCheckLock  noCheckPublish($noCheckPublish = null)    *  param bool  $noCheckPublish  withDependencies($withDependencies = null)    *  param bool  $withDependencies  strict($strict = null)    *  param bool  $strict  preferDist($preferDist = null)   adds  prefer-dist  option to composer  preferSource()   adds  prefer-source  option to composer  dev($dev = null)   adds  dev  option to composer  noDev()   adds  no-dev  option to composer  ansi($ansi = null)   adds  ansi  option to composer  noAnsi()   adds  no-ansi  option to composer  interaction($interaction = null)    *  param bool  $interaction  noInteraction()   adds  no-interaction  option to composer  optimizeAutoloader($optimize = null)   adds  optimize-autoloader  option to composer  ignorePlatformRequirements($ignore = null)   adds  ignore-platform-reqs  option to composer  disablePlugins($disable = null)   disable plugins  noScripts($disable = null)   skip scripts  workingDir($dir)   adds  --working-dir $dir  option to composer  buildCommand()   Copy class fields into command options as directed.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Validate"
        },
        {
            "location": "/tasks/Vcs/",
            "text": "Vcs Tasks\n\n\nGitStack\n\n\nRuns Git commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n<?php\n$this->taskGitStack()\n ->stopOnFail()\n ->add('-A')\n ->commit('adding everything')\n ->push('origin','master')\n ->tag('0.6.0')\n ->push('origin','0.6.0')\n ->run()\n\n$this->taskGitStack()\n ->stopOnFail()\n ->add('doc/*')\n ->commit('doc updated')\n ->push()\n ->run();\n?>\n\n\n\n\n\ncloneRepo($repo, $to = null, $branch = null)\n  Executes \ngit clone\n\n\ncloneShallow($repo, $to = null, $branch = null, $depth = null)\n  Executes \ngit clone\n with depth 1 as default\n\n\nadd($pattern)\n  Executes \ngit add\n command with files to add pattern\n\n\ncommit($message, $options = null)\n  Executes \ngit commit\n command with a message\n\n\npull($origin = null, $branch = null)\n  Executes \ngit pull\n command.\n\n\npush($origin = null, $branch = null)\n  Executes \ngit push\n command\n\n\nmerge($branch)\n  Performs git merge\n\n\ncheckout($branch)\n  Executes \ngit checkout\n command\n\n\ntag($tag_name, $message = null)\n  Executes \ngit tag\n command\n\n\nexecutable($executable)\n   * \nparam string\n $executable\n\n\nexec($command)\n   * \nparam string|string[]|CommandInterface\n $command\n\n\nstopOnFail($stopOnFail = null)\n   * \nparam bool\n $stopOnFail\n\n\nresult($result)\n \n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\n\n\nHgStack\n\n\nRuns hg commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n<?php\n$this->hgStack\n ->cloneRepo('https://bitbucket.org/durin42/hgsubversion')\n ->pull()\n ->add()\n ->commit('changed')\n ->push()\n ->tag('0.6.0')\n ->push('0.6.0')\n ->run();\n?>\n\n\n\n\n\ncloneRepo($repo, $to = null)\n  Executes \nhg clone\n\n\nadd($include = null, $exclude = null)\n  Executes \nhg add\n command with files to add by pattern\n\n\ncommit($message, $options = null)\n  Executes \nhg commit\n command with a message\n\n\npull($branch = null)\n  Executes \nhg pull\n command.\n\n\npush($branch = null)\n  Executes \nhg push\n command\n\n\nmerge($revision = null)\n  Performs hg merge\n\n\ntag($tag_name, $message = null)\n  Executes \nhg tag\n command\n\n\nexecutable($executable)\n   * \nparam string\n $executable\n\n\nexec($command)\n   * \nparam string|string[]|CommandInterface\n $command\n\n\nstopOnFail($stopOnFail = null)\n   * \nparam bool\n $stopOnFail\n\n\nresult($result)\n \n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\n\n\nSvnStack\n\n\nRuns Svn commands in stack. You can use \nstopOnFail()\n to point that stack should be terminated on first fail.\n\n\n<?php\n$this->taskSvnStack()\n ->checkout('http://svn.collab.net/repos/svn/trunk')\n ->run()\n\n// alternatively\n$this->_svnCheckout('http://svn.collab.net/repos/svn/trunk');\n\n$this->taskSvnStack('username', 'password')\n ->stopOnFail()\n ->update()\n ->add('doc/*')\n ->commit('doc updated')\n ->run();\n?>\n\n\n\n\n\nupdate($path = null)\n  Updates \nsvn update\n command\n\n\nadd($pattern = null)\n  Executes \nsvn add\n command with files to add pattern\n\n\ncommit($message, $options = null)\n  Executes \nsvn commit\n command with a message\n\n\ncheckout($branch)\n  Executes \nsvn checkout\n command\n\n\nexecutable($executable)\n   * \nparam string\n $executable\n\n\nexec($command)\n   * \nparam string|string[]|CommandInterface\n $command\n\n\nstopOnFail($stopOnFail = null)\n   * \nparam bool\n $stopOnFail\n\n\nresult($result)\n \n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command",
            "title": "VCS Tasks"
        },
        {
            "location": "/tasks/Vcs/#vcs-tasks",
            "text": "",
            "title": "Vcs Tasks"
        },
        {
            "location": "/tasks/Vcs/#gitstack",
            "text": "Runs Git commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  <?php\n$this->taskGitStack()\n ->stopOnFail()\n ->add('-A')\n ->commit('adding everything')\n ->push('origin','master')\n ->tag('0.6.0')\n ->push('origin','0.6.0')\n ->run()\n\n$this->taskGitStack()\n ->stopOnFail()\n ->add('doc/*')\n ->commit('doc updated')\n ->push()\n ->run();\n?>   cloneRepo($repo, $to = null, $branch = null)   Executes  git clone  cloneShallow($repo, $to = null, $branch = null, $depth = null)   Executes  git clone  with depth 1 as default  add($pattern)   Executes  git add  command with files to add pattern  commit($message, $options = null)   Executes  git commit  command with a message  pull($origin = null, $branch = null)   Executes  git pull  command.  push($origin = null, $branch = null)   Executes  git push  command  merge($branch)   Performs git merge  checkout($branch)   Executes  git checkout  command  tag($tag_name, $message = null)   Executes  git tag  command  executable($executable)    *  param string  $executable  exec($command)    *  param string|string[]|CommandInterface  $command  stopOnFail($stopOnFail = null)    *  param bool  $stopOnFail  result($result)    setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command",
            "title": "GitStack"
        },
        {
            "location": "/tasks/Vcs/#hgstack",
            "text": "Runs hg commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  <?php\n$this->hgStack\n ->cloneRepo('https://bitbucket.org/durin42/hgsubversion')\n ->pull()\n ->add()\n ->commit('changed')\n ->push()\n ->tag('0.6.0')\n ->push('0.6.0')\n ->run();\n?>   cloneRepo($repo, $to = null)   Executes  hg clone  add($include = null, $exclude = null)   Executes  hg add  command with files to add by pattern  commit($message, $options = null)   Executes  hg commit  command with a message  pull($branch = null)   Executes  hg pull  command.  push($branch = null)   Executes  hg push  command  merge($revision = null)   Performs hg merge  tag($tag_name, $message = null)   Executes  hg tag  command  executable($executable)    *  param string  $executable  exec($command)    *  param string|string[]|CommandInterface  $command  stopOnFail($stopOnFail = null)    *  param bool  $stopOnFail  result($result)    setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command",
            "title": "HgStack"
        },
        {
            "location": "/tasks/Vcs/#svnstack",
            "text": "Runs Svn commands in stack. You can use  stopOnFail()  to point that stack should be terminated on first fail.  <?php\n$this->taskSvnStack()\n ->checkout('http://svn.collab.net/repos/svn/trunk')\n ->run()\n\n// alternatively\n$this->_svnCheckout('http://svn.collab.net/repos/svn/trunk');\n\n$this->taskSvnStack('username', 'password')\n ->stopOnFail()\n ->update()\n ->add('doc/*')\n ->commit('doc updated')\n ->run();\n?>   update($path = null)   Updates  svn update  command  add($pattern = null)   Executes  svn add  command with files to add pattern  commit($message, $options = null)   Executes  svn commit  command with a message  checkout($branch)   Executes  svn checkout  command  executable($executable)    *  param string  $executable  exec($command)    *  param string|string[]|CommandInterface  $command  stopOnFail($stopOnFail = null)    *  param bool  $stopOnFail  result($result)    setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command",
            "title": "SvnStack"
        },
        {
            "location": "/tasks/Development/",
            "text": "Development Tasks\n\n\nChangelog\n\n\nHelps to manage changelog file.\nCreates or updates \nchangelog.md\n file with recent changes in current version.\n\n\n<?php\n$version = \"0.1.0\";\n$this->taskChangelog()\n ->version($version)\n ->change(\"released to github\")\n ->run();\n?>\n\n\n\nChanges can be asked from Console\n\n\n<?php\n$this->taskChangelog()\n ->version($version)\n ->askForChanges()\n ->run();\n?>\n\n\n\n\n\nfilename($filename)\n   * \nparam string\n $filename\n\n\nsetBody($body)\n  Sets the changelog body text.\n\n\nsetHeader($header)\n   * \nparam string\n $header\n\n\nlog($item)\n   * \nparam string\n $item\n\n\nanchor($anchor)\n   * \nparam string\n $anchor\n\n\nversion($version)\n   * \nparam string\n $version\n\n\nchanges(array $data)\n   * \nparam array\n $data\n\n\nchange($change)\n   * \nparam string\n $change\n\n\ngetChanges()\n  @return array\n\n\nprocessLogRow($i)\n   * \nparam string\n $i\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nGenerateMarkdownDoc\n\n\nSimple documentation generator from source files.\nTakes classes, properties and methods with their docblocks and writes down a markdown file.\n\n\n<?php\n$this->taskGenDoc('models.md')\n     ->docClass('Model\\User') // take class Model\\User\n     ->docClass('Model\\Post') // take class Model\\Post\n     ->filterMethods(function(\\ReflectionMethod $r) {\n         return $r->isPublic() or $r->isProtected(); // process public and protected methods\n     })->processClass(function(\\ReflectionClass $r, $text) {\n         return \"Class \".$r->getName().\"\\n\\n$text\\n\\n###Methods\\n\";\n     })->run();\n\n\n\nBy default this task generates a documentation for each public method of a class, interface or trait.\nIt combines method signature with a docblock. Both can be post-processed.\n\n\n<?php\n$this->taskGenDoc('models.md')\n     ->docClass('Model\\User')\n     ->processClassSignature(false) // false can be passed to not include class signature\n     ->processClassDocBlock(function(\\ReflectionClass $r, $text) {\n         return \"[This is part of application model]\\n\" . $text;\n     })->processMethodSignature(function(\\ReflectionMethod $r, $text) {\n         return \"#### {$r->name}()\";\n     })->processMethodDocBlock(function(\\ReflectionMethod $r, $text) {\n         return strpos($r->name, 'save')===0 ? \"[Saves to the database]\\n\" . $text : $text;\n     })->run();\n\n\n\n\n\ndocClass($item)\n  Put a class you want to be documented.\n\n\nfilterMethods($filterMethods)\n  Using a callback function filter out methods that won't be documented.\n\n\nfilterClasses($filterClasses)\n  Using a callback function filter out classes that won't be documented.\n\n\nfilterProperties($filterProperties)\n  Using a callback function filter out properties that won't be documented.\n\n\nprocessClass($processClass)\n  Post-process class documentation.\n\n\nprocessClassSignature($processClassSignature)\n  Post-process class signature. Provide \nfalse\n to skip.\n\n\nprocessClassDocBlock($processClassDocBlock)\n  Post-process class docblock contents. Provide \nfalse\n to skip.\n\n\nprocessMethod($processMethod)\n  Post-process method documentation. Provide \nfalse\n to skip.\n\n\nprocessMethodSignature($processMethodSignature)\n  Post-process method signature. Provide \nfalse\n to skip.\n\n\nprocessMethodDocBlock($processMethodDocBlock)\n  Post-process method docblock contents. Provide \nfalse\n to skip.\n\n\nprocessProperty($processProperty)\n  Post-process property documentation. Provide \nfalse\n to skip.\n\n\nprocessPropertySignature($processPropertySignature)\n  Post-process property signature. Provide \nfalse\n to skip.\n\n\nprocessPropertyDocBlock($processPropertyDocBlock)\n  Post-process property docblock contents. Provide \nfalse\n to skip.\n\n\nreorder($reorder)\n  Use a function to reorder classes.\n\n\nreorderMethods($reorderMethods)\n  Use a function to reorder methods in class.\n\n\nreorderProperties($reorderProperties)\n   * \nparam callable\n $reorderProperties\n\n\nfilename($filename)\n   * \nparam string\n $filename\n\n\nprepend($prepend)\n  Inserts text at the beginning of markdown file.\n\n\nappend($append)\n  Inserts text at the end of markdown file.\n\n\ntext($text)\n   * \nparam string\n $text\n\n\ntextForClass($item)\n   * \nparam string\n $item\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nGenerate\n\n\nGenerate a Robo Task that is a wrapper around an existing class.\n\n\n<?php\n$this->taskGenerateTask('Symfony\\Component\\Filesystem\\Filesystem', 'FilesystemStack')\n  ->run();\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nGitHubRelease\n\n\nPublishes new GitHub release.\n\n\n<?php\n$this->taskGitHubRelease('0.1.0')\n  ->uri('consolidation-org/Robo')\n  ->description('Add stuff people need.')\n  ->change('Fix #123')\n  ->change('Add frobulation method to all widgets')\n  ->run();\n?>\n\n\n\n\n\ntag($tag)\n   * \nparam string\n $tag\n\n\ndraft($draft)\n   * \nparam bool\n $draft\n\n\nname($name)\n   * \nparam string\n $name\n\n\ndescription($description)\n   * \nparam string\n $description\n\n\nprerelease($prerelease)\n   * \nparam bool\n $prerelease\n\n\ncomittish($comittish)\n   * \nparam string\n $comittish\n\n\nappendDescription($description)\n   * \nparam string\n $description\n\n\nchanges(array $changes)\n \n\n\nchange($change)\n   * \nparam string\n $change\n\n\nrepo($repo)\n   * \nparam string\n $repo\n\n\nowner($owner)\n   * \nparam string\n $owner\n\n\nuri($uri)\n   * \nparam string\n $uri\n\n\nuser($user)\n   * \nparam string\n $user\n\n\npassword($password)\n   * \nparam string\n $password\n\n\naccessToken($token)\n   * \nparam string\n $token\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nOpenBrowser\n\n\nOpens the default's user browser\ncode inspired from openBrowser() function in https://github.com/composer/composer/blob/master/src/Composer/Command/HomeCommand.php\n\n\n<?php\n// open one browser window\n$this->taskOpenBrowser('http://localhost')\n ->run();\n\n// open two browser windows\n$this->taskOpenBrowser([\n    'http://localhost/mysite',\n    'http://localhost/mysite2'\n  ])\n  ->run();\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nPackPhar\n\n\nCreates Phar.\n\n\n<?php\n$pharTask = $this->taskPackPhar('package/codecept.phar')\n  ->compress()\n  ->stub('package/stub.php');\n\n $finder = Finder::create()\n     ->name('*.php')\n       ->in('src');\n\n   foreach ($finder as $file) {\n       $pharTask->addFile('src/'.$file->getRelativePathname(), $file->getRealPath());\n   }\n\n   $finder = Finder::create()->files()\n       ->name('*.php')\n       ->in('vendor');\n\n   foreach ($finder as $file) {\n       $pharTask->addStripped('vendor/'.$file->getRelativePathname(), $file->getRealPath());\n   }\n   $pharTask->run();\n\n   // verify Phar is packed correctly\n   $code = $this->_exec('php package/codecept.phar');\n?>\n\n\n\n\n\ncompress($compress = null)\n   * \nparam bool\n $compress\n\n\nstub($stub)\n   * \nparam string\n $stub\n\n\naddStripped($path, $file)\n   * \nparam string\n $path\n\n\naddFile($path, $file)\n   * \nparam string\n $path\n\n\naddFiles($files)\n   * \nparam \\Symfony\\Component\\Finder\\SplFileInfo[]\n $files\n\n\nexecutable($file)\n   * \nparam string\n $file\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nPhpServer\n\n\nRuns PHP server and stops it when task finishes.\n\n\n<?php\n// run server in /public directory\n$this->taskServer(8000)\n ->dir('public')\n ->run();\n\n// run with IP 0.0.0.0\n$this->taskServer(8000)\n ->host('0.0.0.0')\n ->run();\n\n// execute server in background\n$this->taskServer(8000)\n ->background()\n ->run();\n?>\n\n\n\n\n\nhost($host)\n   * \nparam string\n $host\n\n\ndir($path)\n   * \nparam string\n $path\n\n\nsimulate($context)\n  {@inheritdoc}\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nSemVer\n\n\nHelps to maintain \n.semver\n file.\n\n\n<?php\n$this->taskSemVer('.semver')\n     ->increment()\n     ->run();\n?>\n\n\n\n\n\n__toString()\n  @return string\n\n\nversion($version)\n   * \nparam string\n $version\n\n\nsetFormat($format)\n   * \nparam string\n $format\n\n\nsetMetadataSeparator($separator)\n   * \nparam string\n $separator\n\n\nsetPrereleaseSeparator($separator)\n   * \nparam string\n $separator\n\n\nincrement($what = null)\n   * \nparam string\n $what\n\n\nprerelease($tag = null)\n   * \nparam string\n $tag\n\n\nmetadata($data)\n   * \nparam array|string\n $data",
            "title": "Development Tasks"
        },
        {
            "location": "/tasks/Development/#development-tasks",
            "text": "",
            "title": "Development Tasks"
        },
        {
            "location": "/tasks/Development/#changelog",
            "text": "Helps to manage changelog file.\nCreates or updates  changelog.md  file with recent changes in current version.  <?php\n$version = \"0.1.0\";\n$this->taskChangelog()\n ->version($version)\n ->change(\"released to github\")\n ->run();\n?>  Changes can be asked from Console  <?php\n$this->taskChangelog()\n ->version($version)\n ->askForChanges()\n ->run();\n?>   filename($filename)    *  param string  $filename  setBody($body)   Sets the changelog body text.  setHeader($header)    *  param string  $header  log($item)    *  param string  $item  anchor($anchor)    *  param string  $anchor  version($version)    *  param string  $version  changes(array $data)    *  param array  $data  change($change)    *  param string  $change  getChanges()   @return array  processLogRow($i)    *  param string  $i  setOutput($output)   Sets the Console Output.",
            "title": "Changelog"
        },
        {
            "location": "/tasks/Development/#generatemarkdowndoc",
            "text": "Simple documentation generator from source files.\nTakes classes, properties and methods with their docblocks and writes down a markdown file.  <?php\n$this->taskGenDoc('models.md')\n     ->docClass('Model\\User') // take class Model\\User\n     ->docClass('Model\\Post') // take class Model\\Post\n     ->filterMethods(function(\\ReflectionMethod $r) {\n         return $r->isPublic() or $r->isProtected(); // process public and protected methods\n     })->processClass(function(\\ReflectionClass $r, $text) {\n         return \"Class \".$r->getName().\"\\n\\n$text\\n\\n###Methods\\n\";\n     })->run();  By default this task generates a documentation for each public method of a class, interface or trait.\nIt combines method signature with a docblock. Both can be post-processed.  <?php\n$this->taskGenDoc('models.md')\n     ->docClass('Model\\User')\n     ->processClassSignature(false) // false can be passed to not include class signature\n     ->processClassDocBlock(function(\\ReflectionClass $r, $text) {\n         return \"[This is part of application model]\\n\" . $text;\n     })->processMethodSignature(function(\\ReflectionMethod $r, $text) {\n         return \"#### {$r->name}()\";\n     })->processMethodDocBlock(function(\\ReflectionMethod $r, $text) {\n         return strpos($r->name, 'save')===0 ? \"[Saves to the database]\\n\" . $text : $text;\n     })->run();   docClass($item)   Put a class you want to be documented.  filterMethods($filterMethods)   Using a callback function filter out methods that won't be documented.  filterClasses($filterClasses)   Using a callback function filter out classes that won't be documented.  filterProperties($filterProperties)   Using a callback function filter out properties that won't be documented.  processClass($processClass)   Post-process class documentation.  processClassSignature($processClassSignature)   Post-process class signature. Provide  false  to skip.  processClassDocBlock($processClassDocBlock)   Post-process class docblock contents. Provide  false  to skip.  processMethod($processMethod)   Post-process method documentation. Provide  false  to skip.  processMethodSignature($processMethodSignature)   Post-process method signature. Provide  false  to skip.  processMethodDocBlock($processMethodDocBlock)   Post-process method docblock contents. Provide  false  to skip.  processProperty($processProperty)   Post-process property documentation. Provide  false  to skip.  processPropertySignature($processPropertySignature)   Post-process property signature. Provide  false  to skip.  processPropertyDocBlock($processPropertyDocBlock)   Post-process property docblock contents. Provide  false  to skip.  reorder($reorder)   Use a function to reorder classes.  reorderMethods($reorderMethods)   Use a function to reorder methods in class.  reorderProperties($reorderProperties)    *  param callable  $reorderProperties  filename($filename)    *  param string  $filename  prepend($prepend)   Inserts text at the beginning of markdown file.  append($append)   Inserts text at the end of markdown file.  text($text)    *  param string  $text  textForClass($item)    *  param string  $item  setOutput($output)   Sets the Console Output.",
            "title": "GenerateMarkdownDoc"
        },
        {
            "location": "/tasks/Development/#generate",
            "text": "Generate a Robo Task that is a wrapper around an existing class.  <?php\n$this->taskGenerateTask('Symfony\\Component\\Filesystem\\Filesystem', 'FilesystemStack')\n  ->run();   setOutput($output)   Sets the Console Output.",
            "title": "Generate"
        },
        {
            "location": "/tasks/Development/#githubrelease",
            "text": "Publishes new GitHub release.  <?php\n$this->taskGitHubRelease('0.1.0')\n  ->uri('consolidation-org/Robo')\n  ->description('Add stuff people need.')\n  ->change('Fix #123')\n  ->change('Add frobulation method to all widgets')\n  ->run();\n?>   tag($tag)    *  param string  $tag  draft($draft)    *  param bool  $draft  name($name)    *  param string  $name  description($description)    *  param string  $description  prerelease($prerelease)    *  param bool  $prerelease  comittish($comittish)    *  param string  $comittish  appendDescription($description)    *  param string  $description  changes(array $changes)    change($change)    *  param string  $change  repo($repo)    *  param string  $repo  owner($owner)    *  param string  $owner  uri($uri)    *  param string  $uri  user($user)    *  param string  $user  password($password)    *  param string  $password  accessToken($token)    *  param string  $token  setOutput($output)   Sets the Console Output.",
            "title": "GitHubRelease"
        },
        {
            "location": "/tasks/Development/#openbrowser",
            "text": "Opens the default's user browser\ncode inspired from openBrowser() function in https://github.com/composer/composer/blob/master/src/Composer/Command/HomeCommand.php  <?php\n// open one browser window\n$this->taskOpenBrowser('http://localhost')\n ->run();\n\n// open two browser windows\n$this->taskOpenBrowser([\n    'http://localhost/mysite',\n    'http://localhost/mysite2'\n  ])\n  ->run();   setOutput($output)   Sets the Console Output.",
            "title": "OpenBrowser"
        },
        {
            "location": "/tasks/Development/#packphar",
            "text": "Creates Phar.  <?php\n$pharTask = $this->taskPackPhar('package/codecept.phar')\n  ->compress()\n  ->stub('package/stub.php');\n\n $finder = Finder::create()\n     ->name('*.php')\n       ->in('src');\n\n   foreach ($finder as $file) {\n       $pharTask->addFile('src/'.$file->getRelativePathname(), $file->getRealPath());\n   }\n\n   $finder = Finder::create()->files()\n       ->name('*.php')\n       ->in('vendor');\n\n   foreach ($finder as $file) {\n       $pharTask->addStripped('vendor/'.$file->getRelativePathname(), $file->getRealPath());\n   }\n   $pharTask->run();\n\n   // verify Phar is packed correctly\n   $code = $this->_exec('php package/codecept.phar');\n?>   compress($compress = null)    *  param bool  $compress  stub($stub)    *  param string  $stub  addStripped($path, $file)    *  param string  $path  addFile($path, $file)    *  param string  $path  addFiles($files)    *  param \\Symfony\\Component\\Finder\\SplFileInfo[]  $files  executable($file)    *  param string  $file  setOutput($output)   Sets the Console Output.",
            "title": "PackPhar"
        },
        {
            "location": "/tasks/Development/#phpserver",
            "text": "Runs PHP server and stops it when task finishes.  <?php\n// run server in /public directory\n$this->taskServer(8000)\n ->dir('public')\n ->run();\n\n// run with IP 0.0.0.0\n$this->taskServer(8000)\n ->host('0.0.0.0')\n ->run();\n\n// execute server in background\n$this->taskServer(8000)\n ->background()\n ->run();\n?>   host($host)    *  param string  $host  dir($path)    *  param string  $path  simulate($context)   {@inheritdoc}  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "PhpServer"
        },
        {
            "location": "/tasks/Development/#semver",
            "text": "Helps to maintain  .semver  file.  <?php\n$this->taskSemVer('.semver')\n     ->increment()\n     ->run();\n?>   __toString()   @return string  version($version)    *  param string  $version  setFormat($format)    *  param string  $format  setMetadataSeparator($separator)    *  param string  $separator  setPrereleaseSeparator($separator)    *  param string  $separator  increment($what = null)    *  param string  $what  prerelease($tag = null)    *  param string  $tag  metadata($data)    *  param array|string  $data",
            "title": "SemVer"
        },
        {
            "location": "/tasks/Assets/",
            "text": "Assets Tasks\n\n\nImageMinify\n\n\nMinifies images. When the required minifier is not installed on the system\nthe task will try to download it from the \nimagemin\n repository.\n\n\nWhen the task is run without any specified minifier it will compress the images\nbased on the extension.\n\n\n$this->taskImageMinify('assets/images/*')\n    ->to('dist/images/')\n    ->run();\n\n\n\nThis will use the following minifiers:\n\n\n\n\nPNG: optipng\n\n\nGIF: gifsicle\n\n\nJPG, JPEG: jpegtran\n\n\nSVG: svgo\n\n\n\n\nWhen the minifier is specified the task will use that for all the input files. In that case\nit is useful to filter the files with the extension:\n\n\n$this->taskImageMinify('assets/images/*.png')\n    ->to('dist/images/')\n    ->minifier('pngcrush');\n    ->run();\n\n\n\nThe task supports the following minifiers:\n\n\n\n\noptipng\n\n\npngquant\n\n\nadvpng\n\n\npngout\n\n\nzopflipng\n\n\npngcrush\n\n\ngifsicle\n\n\njpegoptim\n\n\njpeg-recompress\n\n\njpegtran\n\n\nsvgo (only minification, no downloading)\n\n\n\n\nYou can also specifiy extra options for the minifiers:\n\n\n$this->taskImageMinify('assets/images/*.jpg')\n    ->to('dist/images/')\n    ->minifier('jpegtran', ['-progressive' => null, '-copy' => 'none'])\n    ->run();\n\n\n\nThis will execute as:\n\njpegtran -copy none -progressive -optimize -outfile \"dist/images/test.jpg\" \"/var/www/test/assets/images/test.jpg\"\n\n\n\n\nto($target)\n  Sets the target directory where the files will be copied to.\n\n\nminifier($minifier, array $options = Array ( ) )\n  Sets the minifier.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nLess\n\n\nCompiles less files.\n\n\n<?php\n$this->taskLess([\n    'less/default.less' => 'css/default.css'\n])\n->run();\n?>\n\n\n\nUse one of both less compilers in your project:\n\n\n\"leafo/lessphp\": \"~0.5\",\n\"oyejorge/less.php\": \"~1.5\"\n\n\n\nSpecify directory (string or array) for less imports lookup:\n\n\n<?php\n$this->taskLess([\n    'less/default.less' => 'css/default.css'\n])\n->importDir('less')\n->compiler('lessphp')\n->run();\n?>\n\n\n\nYou can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the lessCompilers() method to\ninject the name there.\n\n\n\n\nimportDir($dirs)\n  Sets import directories\n\n\naddImportPath($dir)\n  Adds import directory\n\n\nsetImportPaths($dirs)\n  Sets import directories\n\n\nsetFormatter($formatterName)\n   * \nparam string\n $formatterName\n\n\ncompiler($compiler, array $options = Array ( ) )\n  Sets the compiler.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nMinify\n\n\nMinifies an asset file (CSS or JS).\n\n\n<?php\n$this->taskMinify('web/assets/theme.css')\n     ->run()\n?>\n\n\n\nPlease install additional packages to use this task:\n\n\ncomposer require patchwork/jsqueeze:^2.0\ncomposer require natxet/cssmin:^3.0\n\n\n\n\n\nto($dst)\n  Sets destination. Tries to guess type from it.\n\n\ntype($type)\n  Sets type with validation.\n\n\nsingleLine($singleLine)\n  Single line option for the JS minimisation.\n\n\nkeepImportantComments($keepImportantComments)\n  keepImportantComments option for the JS minimisation.\n\n\nspecialVarRx($specialVarRx)\n  Set specialVarRx option for the JS minimisation.\n\n\n__toString()\n  @return string\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nScss\n\n\nCompiles scss files.\n\n\n<?php\n$this->taskScss([\n    'scss/default.scss' => 'css/default.css'\n])\n->importDir('assets/styles')\n->run();\n?>\n\n\n\nUse the following scss compiler in your project:\n\n\n\"scssphp/scssphp \": \"~1.0.0\",\n\n\n\nYou can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the scssCompilers() method to\ninject the name there.\n\n\n\n\nsetFormatter($formatterName)\n  Sets the formatter for scssphp\n\n\nimportDir($dirs)\n  Sets import directories\n\n\naddImportPath($dir)\n  Adds import directory\n\n\nsetImportPaths($dirs)\n  Sets import directories\n\n\ncompiler($compiler, array $options = Array ( ) )\n  Sets the compiler.\n\n\nsetOutput($output)\n  Sets the Console Output.",
            "title": "Assets Tasks"
        },
        {
            "location": "/tasks/Assets/#assets-tasks",
            "text": "",
            "title": "Assets Tasks"
        },
        {
            "location": "/tasks/Assets/#imageminify",
            "text": "Minifies images. When the required minifier is not installed on the system\nthe task will try to download it from the  imagemin  repository.  When the task is run without any specified minifier it will compress the images\nbased on the extension.  $this->taskImageMinify('assets/images/*')\n    ->to('dist/images/')\n    ->run();  This will use the following minifiers:   PNG: optipng  GIF: gifsicle  JPG, JPEG: jpegtran  SVG: svgo   When the minifier is specified the task will use that for all the input files. In that case\nit is useful to filter the files with the extension:  $this->taskImageMinify('assets/images/*.png')\n    ->to('dist/images/')\n    ->minifier('pngcrush');\n    ->run();  The task supports the following minifiers:   optipng  pngquant  advpng  pngout  zopflipng  pngcrush  gifsicle  jpegoptim  jpeg-recompress  jpegtran  svgo (only minification, no downloading)   You can also specifiy extra options for the minifiers:  $this->taskImageMinify('assets/images/*.jpg')\n    ->to('dist/images/')\n    ->minifier('jpegtran', ['-progressive' => null, '-copy' => 'none'])\n    ->run();  This will execute as: jpegtran -copy none -progressive -optimize -outfile \"dist/images/test.jpg\" \"/var/www/test/assets/images/test.jpg\"   to($target)   Sets the target directory where the files will be copied to.  minifier($minifier, array $options = Array ( ) )   Sets the minifier.  setOutput($output)   Sets the Console Output.",
            "title": "ImageMinify"
        },
        {
            "location": "/tasks/Assets/#less",
            "text": "Compiles less files.  <?php\n$this->taskLess([\n    'less/default.less' => 'css/default.css'\n])\n->run();\n?>  Use one of both less compilers in your project:  \"leafo/lessphp\": \"~0.5\",\n\"oyejorge/less.php\": \"~1.5\"  Specify directory (string or array) for less imports lookup:  <?php\n$this->taskLess([\n    'less/default.less' => 'css/default.css'\n])\n->importDir('less')\n->compiler('lessphp')\n->run();\n?>  You can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the lessCompilers() method to\ninject the name there.   importDir($dirs)   Sets import directories  addImportPath($dir)   Adds import directory  setImportPaths($dirs)   Sets import directories  setFormatter($formatterName)    *  param string  $formatterName  compiler($compiler, array $options = Array ( ) )   Sets the compiler.  setOutput($output)   Sets the Console Output.",
            "title": "Less"
        },
        {
            "location": "/tasks/Assets/#minify",
            "text": "Minifies an asset file (CSS or JS).  <?php\n$this->taskMinify('web/assets/theme.css')\n     ->run()\n?>  Please install additional packages to use this task:  composer require patchwork/jsqueeze:^2.0\ncomposer require natxet/cssmin:^3.0   to($dst)   Sets destination. Tries to guess type from it.  type($type)   Sets type with validation.  singleLine($singleLine)   Single line option for the JS minimisation.  keepImportantComments($keepImportantComments)   keepImportantComments option for the JS minimisation.  specialVarRx($specialVarRx)   Set specialVarRx option for the JS minimisation.  __toString()   @return string  setOutput($output)   Sets the Console Output.",
            "title": "Minify"
        },
        {
            "location": "/tasks/Assets/#scss",
            "text": "Compiles scss files.  <?php\n$this->taskScss([\n    'scss/default.scss' => 'css/default.css'\n])\n->importDir('assets/styles')\n->run();\n?>  Use the following scss compiler in your project:  \"scssphp/scssphp \": \"~1.0.0\",  You can implement additional compilers by extending this task and adding a\nmethod named after them and overloading the scssCompilers() method to\ninject the name there.   setFormatter($formatterName)   Sets the formatter for scssphp  importDir($dirs)   Sets import directories  addImportPath($dir)   Adds import directory  setImportPaths($dirs)   Sets import directories  compiler($compiler, array $options = Array ( ) )   Sets the compiler.  setOutput($output)   Sets the Console Output.",
            "title": "Scss"
        },
        {
            "location": "/tasks/Archive/",
            "text": "Archive Tasks\n\n\nExtract\n\n\nExtracts an archive.\n\n\nNote that often, distributions are packaged in tar or zip archives\nwhere the topmost folder may contain variable information, such as\nthe release date, or the version of the package.  This information\nis very useful when unpacking by hand, but arbitrarily-named directories\nare much less useful to scripts.  Therefore, by default, Extract will\nremove the top-level directory, and instead store all extracted files\ninto the directory specified by $archivePath.\n\n\nTo keep the top-level directory when extracting, use\n\npreserveTopDirectory(true)\n.\n\n\n<?php\n$this->taskExtract($archivePath)\n ->to($destination)\n ->preserveTopDirectory(false) // the default\n ->run();\n?>\n\n\n\n\n\nto($to)\n  Location to store extracted files.\n\n\npreserveTopDirectory($preserve = null)\n   * \nparam bool\n $preserve\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\n\n\nPack\n\n\nCreates a zip or tar archive.\n\n\n<?php\n$this->taskPack(\n<archiveFile>)\n->add('README')                         // Puts file 'README' in archive at the root\n->add('project')                        // Puts entire contents of directory 'project' in archinve inside 'project'\n->addFile('dir/file.txt', 'file.txt')   // Takes 'file.txt' from cwd and puts it in archive inside 'dir'.\n->exclude(['dir\\/.*.zip', '.*.md'])      // Add regex (or array of regex) to the excluded patterns list.\n->run();\n?>\n\n\n\n\n\narchiveFile($archiveFile)\n   * \nparam string\n $archiveFile\n\n\naddFile($placementLocation, $filesystemLocation)\n  Add an item to the archive. Like file_exists(), the parameter\n\n\naddDir($placementLocation, $filesystemLocation)\n  Alias for addFile, in case anyone has angst about using\n\n\nadd($item)\n  Add a file or directory, or list of same to the archive.\n\n\nexclude($ignoreList)\n  Allow files or folder to be excluded from the archive. Use regex, without enclosing slashes.\n\n\nsetOutput($output)\n  Sets the Console Output.",
            "title": "Archive Tasks"
        },
        {
            "location": "/tasks/Archive/#archive-tasks",
            "text": "",
            "title": "Archive Tasks"
        },
        {
            "location": "/tasks/Archive/#extract",
            "text": "Extracts an archive.  Note that often, distributions are packaged in tar or zip archives\nwhere the topmost folder may contain variable information, such as\nthe release date, or the version of the package.  This information\nis very useful when unpacking by hand, but arbitrarily-named directories\nare much less useful to scripts.  Therefore, by default, Extract will\nremove the top-level directory, and instead store all extracted files\ninto the directory specified by $archivePath.  To keep the top-level directory when extracting, use preserveTopDirectory(true) .  <?php\n$this->taskExtract($archivePath)\n ->to($destination)\n ->preserveTopDirectory(false) // the default\n ->run();\n?>   to($to)   Location to store extracted files.  preserveTopDirectory($preserve = null)    *  param bool  $preserve  setOutput($output)   Sets the Console Output.",
            "title": "Extract"
        },
        {
            "location": "/tasks/Archive/#pack",
            "text": "Creates a zip or tar archive.  <?php\n$this->taskPack(\n<archiveFile>)\n->add('README')                         // Puts file 'README' in archive at the root\n->add('project')                        // Puts entire contents of directory 'project' in archinve inside 'project'\n->addFile('dir/file.txt', 'file.txt')   // Takes 'file.txt' from cwd and puts it in archive inside 'dir'.\n->exclude(['dir\\/.*.zip', '.*.md'])      // Add regex (or array of regex) to the excluded patterns list.\n->run();\n?>   archiveFile($archiveFile)    *  param string  $archiveFile  addFile($placementLocation, $filesystemLocation)   Add an item to the archive. Like file_exists(), the parameter  addDir($placementLocation, $filesystemLocation)   Alias for addFile, in case anyone has angst about using  add($item)   Add a file or directory, or list of same to the archive.  exclude($ignoreList)   Allow files or folder to be excluded from the archive. Use regex, without enclosing slashes.  setOutput($output)   Sets the Console Output.",
            "title": "Pack"
        },
        {
            "location": "/tasks/Remote/",
            "text": "Remote Tasks\n\n\nRsync\n\n\nExecutes rsync in a flexible manner.\n\n\n$this->taskRsync()\n  ->fromPath('src/')\n  ->toHost('localhost')\n  ->toUser('dev')\n  ->toPath('/var/www/html/app/')\n  ->remoteShell('ssh -i public_key')\n  ->recursive()\n  ->excludeVcs()\n  ->checksum()\n  ->wholeFile()\n  ->verbose()\n  ->progress()\n  ->humanReadable()\n  ->stats()\n  ->run();\n\n\n\nYou could also clone the task and do a dry-run first:\n\n\n$rsync = $this->taskRsync()\n  ->fromPath('src/')\n  ->toPath('example.com:/var/www/html/app/')\n  ->archive()\n  ->excludeVcs()\n  ->progress()\n  ->stats();\n\n$dryRun = clone $rsync;\n$dryRun->dryRun()->run();\nif ('y' === $this->ask('Do you want to run (y/n)')) {\n  $rsync->run();\n}\n\n\n\n\n\nfromPath($path)\n  This can either be a full rsync path spec (user@host:path) or just a path.\n\n\ntoPath($path)\n  This can either be a full rsync path spec (user@host:path) or just a path.\n\n\nfromUser($fromUser)\n   * \nparam string\n $fromUser\n\n\nfromHost($fromHost)\n   * \nparam string\n $fromHost\n\n\ntoUser($toUser)\n   * \nparam string\n $toUser\n\n\ntoHost($toHost)\n   * \nparam string\n $toHost\n\n\nprogress()\n   * \nreturn\n $this\n\n\nstats()\n   * \nreturn\n $this\n\n\nrecursive()\n   * \nreturn\n $this\n\n\nverbose()\n   * \nreturn\n $this\n\n\nchecksum()\n   * \nreturn\n $this\n\n\narchive()\n   * \nreturn\n $this\n\n\ncompress()\n   * \nreturn\n $this\n\n\nowner()\n   * \nreturn\n $this\n\n\ngroup()\n   * \nreturn\n $this\n\n\ntimes()\n   * \nreturn\n $this\n\n\ndelete()\n   * \nreturn\n $this\n\n\nhumanReadable()\n   * \nreturn\n $this\n\n\nwholeFile()\n   * \nreturn\n $this\n\n\ndryRun()\n   * \nreturn\n $this\n\n\nitemizeChanges()\n   * \nreturn\n $this\n\n\nexcludeVcs()\n  Excludes .git, .svn and .hg items at any depth.\n\n\nexclude($pattern)\n   * \nparam array|string\n $pattern\n\n\nexcludeFrom($file)\n   * \nparam string\n $file\n\n\nincludeFilter($pattern)\n   * \nparam array|string\n $pattern\n\n\nfilter($pattern)\n   * \nparam array|string\n $pattern\n\n\nfilesFrom($file)\n   * \nparam string\n $file\n\n\nremoteShell($command)\n   * \nparam string\n $command\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nSsh\n\n\nRuns multiple commands on a remote server.\nPer default, commands are combined with &&, unless stopOnFail is false.\n\n\n<?php\n\n$this->taskSshExec('remote.example.com', 'user')\n    ->remoteDir('/var/www/html')\n    ->exec('ls -la')\n    ->exec('chmod g+x logs')\n    ->run();\n\n\n\n\nYou can even exec other tasks (which implement CommandInterface):\n\n\n$gitTask = $this->taskGitStack()\n    ->checkout('master')\n    ->pull();\n\n$this->taskSshExec('remote.example.com')\n    ->remoteDir('/var/www/html/site')\n    ->exec($gitTask)\n    ->run();\n\n\n\nYou can configure the remote directory for all future calls:\n\n\n::configure('remoteDir', '/some-dir');\n\n\n\n\n\nhostname($hostname)\n   * \nparam string\n $hostname\n\n\nuser($user)\n   * \nparam string\n $user\n\n\nstopOnFail($stopOnFail = null)\n  Whether or not to chain commands together with && and stop the chain if one command fails.\n\n\nremoteDir($remoteDir)\n  Changes to the given directory before running commands.\n\n\nidentityFile($filename)\n   * \nparam string\n $filename\n\n\nport($port)\n   * \nparam int\n $port\n\n\nforcePseudoTty()\n   * \nreturn\n $this\n\n\nquiet()\n   * \nreturn\n $this\n\n\nverbose()\n   * \nreturn\n $this\n\n\nexec($command)\n   * \nparam string|string[]|CommandInterface\n $command\n\n\nsimulate($context)\n  {@inheritdoc}\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "SSH, Rsync Tasks"
        },
        {
            "location": "/tasks/Remote/#remote-tasks",
            "text": "",
            "title": "Remote Tasks"
        },
        {
            "location": "/tasks/Remote/#rsync",
            "text": "Executes rsync in a flexible manner.  $this->taskRsync()\n  ->fromPath('src/')\n  ->toHost('localhost')\n  ->toUser('dev')\n  ->toPath('/var/www/html/app/')\n  ->remoteShell('ssh -i public_key')\n  ->recursive()\n  ->excludeVcs()\n  ->checksum()\n  ->wholeFile()\n  ->verbose()\n  ->progress()\n  ->humanReadable()\n  ->stats()\n  ->run();  You could also clone the task and do a dry-run first:  $rsync = $this->taskRsync()\n  ->fromPath('src/')\n  ->toPath('example.com:/var/www/html/app/')\n  ->archive()\n  ->excludeVcs()\n  ->progress()\n  ->stats();\n\n$dryRun = clone $rsync;\n$dryRun->dryRun()->run();\nif ('y' === $this->ask('Do you want to run (y/n)')) {\n  $rsync->run();\n}   fromPath($path)   This can either be a full rsync path spec (user@host:path) or just a path.  toPath($path)   This can either be a full rsync path spec (user@host:path) or just a path.  fromUser($fromUser)    *  param string  $fromUser  fromHost($fromHost)    *  param string  $fromHost  toUser($toUser)    *  param string  $toUser  toHost($toHost)    *  param string  $toHost  progress()    *  return  $this  stats()    *  return  $this  recursive()    *  return  $this  verbose()    *  return  $this  checksum()    *  return  $this  archive()    *  return  $this  compress()    *  return  $this  owner()    *  return  $this  group()    *  return  $this  times()    *  return  $this  delete()    *  return  $this  humanReadable()    *  return  $this  wholeFile()    *  return  $this  dryRun()    *  return  $this  itemizeChanges()    *  return  $this  excludeVcs()   Excludes .git, .svn and .hg items at any depth.  exclude($pattern)    *  param array|string  $pattern  excludeFrom($file)    *  param string  $file  includeFilter($pattern)    *  param array|string  $pattern  filter($pattern)    *  param array|string  $pattern  filesFrom($file)    *  param string  $file  remoteShell($command)    *  param string  $command  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Rsync"
        },
        {
            "location": "/tasks/Remote/#ssh",
            "text": "Runs multiple commands on a remote server.\nPer default, commands are combined with &&, unless stopOnFail is false.  <?php\n\n$this->taskSshExec('remote.example.com', 'user')\n    ->remoteDir('/var/www/html')\n    ->exec('ls -la')\n    ->exec('chmod g+x logs')\n    ->run();  You can even exec other tasks (which implement CommandInterface):  $gitTask = $this->taskGitStack()\n    ->checkout('master')\n    ->pull();\n\n$this->taskSshExec('remote.example.com')\n    ->remoteDir('/var/www/html/site')\n    ->exec($gitTask)\n    ->run();  You can configure the remote directory for all future calls:  ::configure('remoteDir', '/some-dir');   hostname($hostname)    *  param string  $hostname  user($user)    *  param string  $user  stopOnFail($stopOnFail = null)   Whether or not to chain commands together with && and stop the chain if one command fails.  remoteDir($remoteDir)   Changes to the given directory before running commands.  identityFile($filename)    *  param string  $filename  port($port)    *  param int  $port  forcePseudoTty()    *  return  $this  quiet()    *  return  $this  verbose()    *  return  $this  exec($command)    *  param string|string[]|CommandInterface  $command  simulate($context)   {@inheritdoc}  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Ssh"
        },
        {
            "location": "/tasks/Testing/",
            "text": "Testing Tasks\n\n\nAtoum\n\n\nRuns \natoum\n tests\n\n\n<?php\n$this->taskAtoum()\n ->files('path/to/test.php')\n ->configFile('config/dev.php')\n ->run()\n\n?>\n\n\n\n\n\ntags($tags)\n  Tag or Tags to filter.\n\n\nlightReport()\n  Display result using the light reporter.\n\n\ntap()\n  Display result using the tap reporter.\n\n\nbootstrap($file)\n  Path to the bootstrap file.\n\n\nconfigFile($file)\n  Path to the config file.\n\n\ndebug()\n  Use atoum's debug mode.\n\n\nfiles($files)\n  Test file or test files to run.\n\n\ndirectories($directories)\n  Test directory or directories to run.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nBehat\n\n\nExecutes Behat tests\n\n\n<?php\n$this->taskBehat()\n     ->format('pretty')\n     ->noInteraction()\n     ->run();\n?>\n\n\n\n\n\nstopOnFail()\n   * \nreturn\n $this\n\n\nnoInteraction()\n   * \nreturn\n $this\n\n\nconfig($config_file)\n   * \nparam string\n $config_file\n\n\ncolors()\n   * \nreturn\n $this\n\n\nnoColors()\n   * \nreturn\n $this\n\n\nsuite($suite)\n   * \nparam string\n $suite\n\n\nverbose($level = null)\n   * \nparam string\n $level\n\n\nformat($formater)\n   * \nparam string\n $formater\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nCodecept\n\n\nExecutes Codeception tests\n\n\n<?php\n// config\n$this->taskCodecept()\n     ->suite('acceptance')\n     ->env('chrome')\n     ->group('admin')\n     ->xml()\n     ->html()\n     ->run();\n\n?>\n\n\n\n\n\nsuite($suite)\n   * \nparam string\n $suite\n\n\ntest($testName)\n   * \nparam string\n $testName\n\n\ngroup($group)\n  set group option. Can be called multiple times\n\n\nexcludeGroup($group)\n   * \nparam string\n $group\n\n\njson($file = null)\n  generate json report\n\n\nxml($file = null)\n  generate xml JUnit report\n\n\nhtml($dir = null)\n  Generate html report\n\n\ntap($file = null)\n  generate tap report\n\n\nconfigFile($file)\n  provides config file other then default \ncodeception.yml\n with \n-c\n option\n\n\ncoverage($cov = null)\n  collect codecoverage in raw format. You may pass name of cov file to save results\n\n\ncoverageXml($xml = null)\n  collect code coverage in xml format. You may pass name of xml file to save results\n\n\ncoverageHtml($html = null)\n  collect code coverage and generate html report. You may pass\n\n\ndebug()\n   * \nreturn\n $this\n\n\nnoRebuild()\n   * \nreturn\n $this\n\n\nnoExit()\n   * \nreturn\n $this\n\n\nfailGroup($failGroup)\n   * \nparam string\n $failGroup\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nPHPUnit\n\n\nRuns PHPUnit tests\n\n\n<?php\n$this->taskPHPUnit()\n ->group('core')\n ->bootstrap('test/bootstrap.php')\n ->run()\n\n?>\n\n\n\n\n\nfilter($filter)\n   * \nparam string\n $filter\n\n\ngroup($group)\n   * \nparam string\n $group\n\n\nexcludeGroup($group)\n   * \nparam string\n $group\n\n\njson($file = null)\n  adds \nlog-json\n option to runner\n\n\nxml($file = null)\n  adds \nlog-junit\n option\n\n\ntap($file = null)\n   * \nparam string\n $file\n\n\nbootstrap($file)\n   * \nparam string\n $file\n\n\nconfigFile($file)\n   * \nparam string\n $file\n\n\ndebug()\n   * \nreturn\n $this\n\n\nfiles($files)\n  Directory of test files or single test file to run.\n\n\nfile($file)\n  Test the provided file.\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nPhpspec\n\n\nExecutes Phpspec tests\n\n\n<?php\n$this->taskPhpspec()\n     ->format('pretty')\n     ->noInteraction()\n     ->run();\n?>\n\n\n\n\n\nstopOnFail()\n \n\n\nnoCodeGeneration()\n \n\n\nquiet()\n \n\n\nverbose($level = null)\n   * \nparam string\n $level\n\n\nnoAnsi()\n   * \nreturn\n $this\n\n\nnoInteraction()\n   * \nreturn\n $this\n\n\nconfig($config_file)\n   * \nparam string\n $config_file\n\n\nformat($formater)\n   * \nparam string\n $formater\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Testing Tasks"
        },
        {
            "location": "/tasks/Testing/#testing-tasks",
            "text": "",
            "title": "Testing Tasks"
        },
        {
            "location": "/tasks/Testing/#atoum",
            "text": "Runs  atoum  tests  <?php\n$this->taskAtoum()\n ->files('path/to/test.php')\n ->configFile('config/dev.php')\n ->run()\n\n?>   tags($tags)   Tag or Tags to filter.  lightReport()   Display result using the light reporter.  tap()   Display result using the tap reporter.  bootstrap($file)   Path to the bootstrap file.  configFile($file)   Path to the config file.  debug()   Use atoum's debug mode.  files($files)   Test file or test files to run.  directories($directories)   Test directory or directories to run.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Atoum"
        },
        {
            "location": "/tasks/Testing/#behat",
            "text": "Executes Behat tests  <?php\n$this->taskBehat()\n     ->format('pretty')\n     ->noInteraction()\n     ->run();\n?>   stopOnFail()    *  return  $this  noInteraction()    *  return  $this  config($config_file)    *  param string  $config_file  colors()    *  return  $this  noColors()    *  return  $this  suite($suite)    *  param string  $suite  verbose($level = null)    *  param string  $level  format($formater)    *  param string  $formater  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Behat"
        },
        {
            "location": "/tasks/Testing/#codecept",
            "text": "Executes Codeception tests  <?php\n// config\n$this->taskCodecept()\n     ->suite('acceptance')\n     ->env('chrome')\n     ->group('admin')\n     ->xml()\n     ->html()\n     ->run();\n\n?>   suite($suite)    *  param string  $suite  test($testName)    *  param string  $testName  group($group)   set group option. Can be called multiple times  excludeGroup($group)    *  param string  $group  json($file = null)   generate json report  xml($file = null)   generate xml JUnit report  html($dir = null)   Generate html report  tap($file = null)   generate tap report  configFile($file)   provides config file other then default  codeception.yml  with  -c  option  coverage($cov = null)   collect codecoverage in raw format. You may pass name of cov file to save results  coverageXml($xml = null)   collect code coverage in xml format. You may pass name of xml file to save results  coverageHtml($html = null)   collect code coverage and generate html report. You may pass  debug()    *  return  $this  noRebuild()    *  return  $this  noExit()    *  return  $this  failGroup($failGroup)    *  param string  $failGroup  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Codecept"
        },
        {
            "location": "/tasks/Testing/#phpunit",
            "text": "Runs PHPUnit tests  <?php\n$this->taskPHPUnit()\n ->group('core')\n ->bootstrap('test/bootstrap.php')\n ->run()\n\n?>   filter($filter)    *  param string  $filter  group($group)    *  param string  $group  excludeGroup($group)    *  param string  $group  json($file = null)   adds  log-json  option to runner  xml($file = null)   adds  log-junit  option  tap($file = null)    *  param string  $file  bootstrap($file)    *  param string  $file  configFile($file)    *  param string  $file  debug()    *  return  $this  files($files)   Directory of test files or single test file to run.  file($file)   Test the provided file.  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "PHPUnit"
        },
        {
            "location": "/tasks/Testing/#phpspec",
            "text": "Executes Phpspec tests  <?php\n$this->taskPhpspec()\n     ->format('pretty')\n     ->noInteraction()\n     ->run();\n?>   stopOnFail()    noCodeGeneration()    quiet()    verbose($level = null)    *  param string  $level  noAnsi()    *  return  $this  noInteraction()    *  return  $this  config($config_file)    *  param string  $config_file  format($formater)    *  param string  $formater  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Phpspec"
        },
        {
            "location": "/tasks/Npm/",
            "text": "Npm Tasks\n\n\nInstall\n\n\nNpm Install\n\n\n<?php\n// simple execution\n$this->taskNpmInstall()->run();\n\n// prefer dist with custom path\n$this->taskNpmInstall('path/to/my/npm')\n     ->noDev()\n     ->run();\n?>\n\n\n\n\n\nnoDev()\n  adds \nproduction\n option to npm\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nNpm Update\n\n\n<?php\n// simple execution\n$this->taskNpmUpdate()->run();\n\n// prefer dist with custom path\n$this->taskNpmUpdate('path/to/my/npm')\n     ->noDev()\n     ->run();\n?>\n\n\n\n\n\nnoDev()\n  adds \nproduction\n option to npm\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "NPM Tasks"
        },
        {
            "location": "/tasks/Npm/#npm-tasks",
            "text": "",
            "title": "Npm Tasks"
        },
        {
            "location": "/tasks/Npm/#install",
            "text": "Npm Install  <?php\n// simple execution\n$this->taskNpmInstall()->run();\n\n// prefer dist with custom path\n$this->taskNpmInstall('path/to/my/npm')\n     ->noDev()\n     ->run();\n?>   noDev()   adds  production  option to npm  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Install"
        },
        {
            "location": "/tasks/Npm/#update",
            "text": "Npm Update  <?php\n// simple execution\n$this->taskNpmUpdate()->run();\n\n// prefer dist with custom path\n$this->taskNpmUpdate('path/to/my/npm')\n     ->noDev()\n     ->run();\n?>   noDev()   adds  production  option to npm  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Update"
        },
        {
            "location": "/tasks/Bower/",
            "text": "Bower Tasks\n\n\nInstall\n\n\nBower Install\n\n\n<?php\n// simple execution\n$this->taskBowerInstall()->run();\n\n// prefer dist with custom path\n$this->taskBowerInstall('path/to/my/bower')\n     ->noDev()\n     ->run();\n?>\n\n\n\n\n\nallowRoot()\n  adds \nallow-root\n option to bower\n\n\nforceLatest()\n  adds \nforce-latest\n option to bower\n\n\nnoDev()\n  adds \nproduction\n option to bower\n\n\noffline()\n  adds \noffline\n option to bower\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nUpdate\n\n\nBower Update\n\n\n<?php\n// simple execution\n$this->taskBowerUpdate->run();\n\n// prefer dist with custom path\n$this->taskBowerUpdate('path/to/my/bower')\n     ->noDev()\n     ->run();\n?>\n\n\n\n\n\nallowRoot()\n  adds \nallow-root\n option to bower\n\n\nforceLatest()\n  adds \nforce-latest\n option to bower\n\n\nnoDev()\n  adds \nproduction\n option to bower\n\n\noffline()\n  adds \noffline\n option to bower\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Bower Tasks"
        },
        {
            "location": "/tasks/Bower/#bower-tasks",
            "text": "",
            "title": "Bower Tasks"
        },
        {
            "location": "/tasks/Bower/#install",
            "text": "Bower Install  <?php\n// simple execution\n$this->taskBowerInstall()->run();\n\n// prefer dist with custom path\n$this->taskBowerInstall('path/to/my/bower')\n     ->noDev()\n     ->run();\n?>   allowRoot()   adds  allow-root  option to bower  forceLatest()   adds  force-latest  option to bower  noDev()   adds  production  option to bower  offline()   adds  offline  option to bower  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Install"
        },
        {
            "location": "/tasks/Bower/#update",
            "text": "Bower Update  <?php\n// simple execution\n$this->taskBowerUpdate->run();\n\n// prefer dist with custom path\n$this->taskBowerUpdate('path/to/my/bower')\n     ->noDev()\n     ->run();\n?>   allowRoot()   adds  allow-root  option to bower  forceLatest()   adds  force-latest  option to bower  noDev()   adds  production  option to bower  offline()   adds  offline  option to bower  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Update"
        },
        {
            "location": "/tasks/Gulp/",
            "text": "Gulp Tasks\n\n\nRun\n\n\nGulp Run\n\n\n<?php\n// simple execution\n$this->taskGulpRun()->run();\n\n// run task 'clean' with --silent option\n$this->taskGulpRun('clean')\n     ->silent()\n     ->run();\n?>\n\n\n\n\n\nnoColor()\n  adds \n--no-color\n option to gulp\n\n\ncolor()\n  adds \n--color\n option to gulp\n\n\nsimple()\n  adds \n--tasks-simple\n option to gulp\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Gulp Tasks"
        },
        {
            "location": "/tasks/Gulp/#gulp-tasks",
            "text": "",
            "title": "Gulp Tasks"
        },
        {
            "location": "/tasks/Gulp/#run",
            "text": "Gulp Run  <?php\n// simple execution\n$this->taskGulpRun()->run();\n\n// run task 'clean' with --silent option\n$this->taskGulpRun('clean')\n     ->silent()\n     ->run();\n?>   noColor()   adds  --no-color  option to gulp  color()   adds  --color  option to gulp  simple()   adds  --tasks-simple  option to gulp  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Run"
        },
        {
            "location": "/tasks/Docker/",
            "text": "Docker Tasks\n\n\nBuild\n\n\nBuilds Docker image\n\n\n<?php\n$this->taskDockerBuild()->run();\n\n$this->taskDockerBuild('path/to/dir')\n     ->tag('database')\n     ->run();\n\n?>\n\n\n\n\nClass Build\n@package Robo\\Task\\Docker\n\n\n\n\ntag($tag)\n   * \nparam string\n $tag\n\n\nenableBuildKit()\n   * \nreturn\n $this\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nCommit\n\n\nCommits docker container to an image\n\n\n$this->taskDockerCommit($containerId)\n     ->name('my/database')\n     ->run();\n\n// alternatively you can take the result from DockerRun task:\n\n$result = $this->taskDockerRun('db')\n     ->exec('./prepare_database.sh')\n     ->run();\n\n$task->dockerCommit($result)\n     ->name('my/database')\n     ->run();\n\n\n\n\n\nname($name)\n   * \nparam string\n $name\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nExec\n\n\nExecutes command inside running Docker container\n\n\n<?php\n$test = $this->taskDockerRun('test_env')\n     ->detached()\n     ->run();\n\n$this->taskDockerExec($test)\n     ->interactive()\n     ->exec('./runtests')\n     ->run();\n\n// alternatively use commands from other tasks\n\n$this->taskDockerExec($test)\n     ->interactive()\n     ->exec($this->taskCodecept()->suite('acceptance'))\n     ->run();\n?>\n\n\n\n\n\ndetached()\n   * \nreturn\n $this\n\n\nexec($command)\n   * \nparam string|\\Robo\\Contract\\CommandInterface\n $command\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nPull\n\n\nPulls an image from DockerHub\n\n\n<?php\n$this->taskDockerPull('wordpress')\n     ->run();\n\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nRemove\n\n\nRemove docker container\n\n\n<?php\n$this->taskDockerRemove($container)\n     ->run();\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nRun\n\n\nPerforms \ndocker run\n on a container.\n\n\n<?php\n$this->taskDockerRun('mysql')->run();\n\n$result = $this->taskDockerRun('my_db_image')\n     ->env('DB', 'database_name')\n     ->volume('/path/to/data', '/data')\n     ->detached()\n     ->publish(3306)\n     ->name('my_mysql')\n     ->run();\n\n// retrieve container's cid:\n$this->say(\"Running container \".$result->getCid());\n\n// execute script inside container\n$result = $this->taskDockerRun('db')\n     ->exec('prepare_test_data.sh')\n     ->run();\n\n$this->taskDockerCommit($result)\n     ->name('test_db')\n     ->run();\n\n// link containers\n$mysql = $this->taskDockerRun('mysql')\n     ->name('wp_db') // important to set name for linked container\n     ->env('MYSQL_ROOT_PASSWORD', '123456')\n     ->run();\n\n$this->taskDockerRun('wordpress')\n     ->link($mysql)\n     ->publish(80, 8080)\n     ->detached()\n     ->run();\n\n?>\n\n\n\n\n\ndetached()\n   * \nreturn\n $this\n\n\nexec($run)\n   * \nparam string|\\Robo\\Contract\\CommandInterface\n $run\n\n\nvolume($from, $to = null)\n   * \nparam string\n $from\n\n\npublish($port = null, $portTo = null)\n   * \nparam null|int\n $port\n\n\ncontainerWorkdir($dir)\n   * \nparam string\n $dir\n\n\nuser($user)\n   * \nparam string\n $user\n\n\nprivileged()\n   * \nreturn\n $this\n\n\nname($name)\n   * \nparam string\n $name\n\n\nlink($name, $alias)\n   * \nparam string|\\Robo\\Task\\Docker\\Result\n $name\n\n\ntmpDir($dir)\n   * \nparam string\n $dir\n\n\ngetTmpDir()\n  @return string\n\n\ngetUniqId()\n  @return string\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nStart\n\n\nStarts Docker container\n\n\n<?php\n$this->taskDockerStart($cidOrResult)\n     ->run();\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.\n\n\n\n\nStop\n\n\nStops Docker container\n\n\n<?php\n$this->taskDockerStop($cidOrResult)\n     ->run();\n?>\n\n\n\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Docker Tasks"
        },
        {
            "location": "/tasks/Docker/#docker-tasks",
            "text": "",
            "title": "Docker Tasks"
        },
        {
            "location": "/tasks/Docker/#build",
            "text": "Builds Docker image  <?php\n$this->taskDockerBuild()->run();\n\n$this->taskDockerBuild('path/to/dir')\n     ->tag('database')\n     ->run();\n\n?>  Class Build\n@package Robo\\Task\\Docker   tag($tag)    *  param string  $tag  enableBuildKit()    *  return  $this  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Build"
        },
        {
            "location": "/tasks/Docker/#commit",
            "text": "Commits docker container to an image  $this->taskDockerCommit($containerId)\n     ->name('my/database')\n     ->run();\n\n// alternatively you can take the result from DockerRun task:\n\n$result = $this->taskDockerRun('db')\n     ->exec('./prepare_database.sh')\n     ->run();\n\n$task->dockerCommit($result)\n     ->name('my/database')\n     ->run();   name($name)    *  param string  $name  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Commit"
        },
        {
            "location": "/tasks/Docker/#exec",
            "text": "Executes command inside running Docker container  <?php\n$test = $this->taskDockerRun('test_env')\n     ->detached()\n     ->run();\n\n$this->taskDockerExec($test)\n     ->interactive()\n     ->exec('./runtests')\n     ->run();\n\n// alternatively use commands from other tasks\n\n$this->taskDockerExec($test)\n     ->interactive()\n     ->exec($this->taskCodecept()->suite('acceptance'))\n     ->run();\n?>   detached()    *  return  $this  exec($command)    *  param string|\\Robo\\Contract\\CommandInterface  $command  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Exec"
        },
        {
            "location": "/tasks/Docker/#pull",
            "text": "Pulls an image from DockerHub  <?php\n$this->taskDockerPull('wordpress')\n     ->run();\n\n?>   setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Pull"
        },
        {
            "location": "/tasks/Docker/#remove",
            "text": "Remove docker container  <?php\n$this->taskDockerRemove($container)\n     ->run();\n?>   setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Remove"
        },
        {
            "location": "/tasks/Docker/#run",
            "text": "Performs  docker run  on a container.  <?php\n$this->taskDockerRun('mysql')->run();\n\n$result = $this->taskDockerRun('my_db_image')\n     ->env('DB', 'database_name')\n     ->volume('/path/to/data', '/data')\n     ->detached()\n     ->publish(3306)\n     ->name('my_mysql')\n     ->run();\n\n// retrieve container's cid:\n$this->say(\"Running container \".$result->getCid());\n\n// execute script inside container\n$result = $this->taskDockerRun('db')\n     ->exec('prepare_test_data.sh')\n     ->run();\n\n$this->taskDockerCommit($result)\n     ->name('test_db')\n     ->run();\n\n// link containers\n$mysql = $this->taskDockerRun('mysql')\n     ->name('wp_db') // important to set name for linked container\n     ->env('MYSQL_ROOT_PASSWORD', '123456')\n     ->run();\n\n$this->taskDockerRun('wordpress')\n     ->link($mysql)\n     ->publish(80, 8080)\n     ->detached()\n     ->run();\n\n?>   detached()    *  return  $this  exec($run)    *  param string|\\Robo\\Contract\\CommandInterface  $run  volume($from, $to = null)    *  param string  $from  publish($port = null, $portTo = null)    *  param null|int  $port  containerWorkdir($dir)    *  param string  $dir  user($user)    *  param string  $user  privileged()    *  return  $this  name($name)    *  param string  $name  link($name, $alias)    *  param string|\\Robo\\Task\\Docker\\Result  $name  tmpDir($dir)    *  param string  $dir  getTmpDir()   @return string  getUniqId()   @return string  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Run"
        },
        {
            "location": "/tasks/Docker/#start",
            "text": "Starts Docker container  <?php\n$this->taskDockerStart($cidOrResult)\n     ->run();\n?>   setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Start"
        },
        {
            "location": "/tasks/Docker/#stop",
            "text": "Stops Docker container  <?php\n$this->taskDockerStop($cidOrResult)\n     ->run();\n?>   setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  args($args)   Pass methods parameters as arguments to executable. Argument values  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "Stop"
        },
        {
            "location": "/tasks/ApiGen/",
            "text": "ApiGen Tasks\n\n\nApiGen\n\n\nExecutes ApiGen command to generate documentation\n\n\n<?php\n// ApiGen Command\n$this->taskApiGen('./vendor/apigen/apigen.phar')\n     ->config('./apigen.neon')\n     ->templateConfig('vendor/apigen/apigen/templates/bootstrap/config.neon')\n     ->wipeout(true)\n      ->run();\n?>\n\n\n\n\n\nargs($args)\n  Pass methods parameters as arguments to executable. Argument values\n\n\nconfig($config)\n   * \nparam string\n $config\n\n\nsource($src)\n   * \nparam array|string|\\Traversable\n $src\n\n\ndestination($dest)\n   * \nparam string\n $dest\n\n\nextensions($exts)\n   * \nparam array|string\n $exts\n\n\nexclude($exclude)\n   * \nparam array|string\n $exclude\n\n\nskipDocPath($path)\n   * \nparam array|string|\\Traversable\n $path\n\n\nskipDocPrefix($prefix)\n   * \nparam array|string|\\Traversable\n $prefix\n\n\ncharset($charset)\n   * \nparam array|string\n $charset\n\n\nmainProjectNamePrefix($name)\n   * \nparam string\n $name\n\n\ntitle($title)\n   * \nparam string\n $title\n\n\nbaseUrl($baseUrl)\n   * \nparam string\n $baseUrl\n\n\ngoogleCseId($id)\n   * \nparam string\n $id\n\n\ngoogleAnalytics($trackingCode)\n   * \nparam string\n $trackingCode\n\n\ntemplateConfig($templateConfig)\n   * \nparam mixed\n $templateConfig\n\n\nallowedHtml($tags)\n   * \nparam array|string\n $tags\n\n\ngroups($groups)\n   * \nparam string\n $groups\n\n\nautocomplete($types)\n   * \nparam array|string\n $types\n\n\naccessLevels($levels)\n   * \nparam array|string\n $levels\n\n\ninternal($internal)\n   * \nparam boolean|string\n $internal\n\n\nphp($php)\n   * \nparam bool|string\n $php\n\n\ntree($tree)\n   * \nparam bool|string\n $tree\n\n\ndeprecated($dep)\n   * \nparam bool|string\n $dep\n\n\ntodo($todo)\n   * \nparam bool|string\n $todo\n\n\nsourceCode($src)\n   * \nparam bool|string\n $src\n\n\ndownload($zipped)\n   * \nparam bool|string\n $zipped\n\n\nreport($path)\n   * \nparam string\n $path\n\n\nwipeout($wipeout)\n   * \nparam bool|string\n $wipeout\n\n\nquiet($quiet)\n   * \nparam bool|string\n $quiet\n\n\nprogressbar($bar)\n   * \nparam bool|string\n $bar\n\n\ncolors($colors)\n   * \nparam bool|string\n $colors\n\n\nupdateCheck($check)\n   * \nparam bool|string\n $check\n\n\ndebug($debug)\n   * \nparam bool|string\n $debug\n\n\nsetOutput($output)\n  Sets the Console Output.\n\n\nsetProcessInput($input)\n  Pass an input to the process. Can be resource created with fopen() or string\n\n\ndir($dir)\n  Changes working directory of command\n\n\narg($arg)\n  Pass argument to executable. Its value will be automatically escaped.\n\n\nrawArg($arg)\n  Pass the provided string in its raw (as provided) form as an argument to executable.\n\n\noption($option, $value = null, $separator = null)\n  Pass option to executable. Options are prefixed with \n--\n , value can be provided in second parameter.\n\n\noptions(array $options, $separator = null)\n  Pass multiple options to executable. The associative array contains\n\n\noptionList($option, $value = null, $separator = null)\n  Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "ApiGen Tasks"
        },
        {
            "location": "/tasks/ApiGen/#apigen-tasks",
            "text": "",
            "title": "ApiGen Tasks"
        },
        {
            "location": "/tasks/ApiGen/#apigen",
            "text": "Executes ApiGen command to generate documentation  <?php\n// ApiGen Command\n$this->taskApiGen('./vendor/apigen/apigen.phar')\n     ->config('./apigen.neon')\n     ->templateConfig('vendor/apigen/apigen/templates/bootstrap/config.neon')\n     ->wipeout(true)\n      ->run();\n?>   args($args)   Pass methods parameters as arguments to executable. Argument values  config($config)    *  param string  $config  source($src)    *  param array|string|\\Traversable  $src  destination($dest)    *  param string  $dest  extensions($exts)    *  param array|string  $exts  exclude($exclude)    *  param array|string  $exclude  skipDocPath($path)    *  param array|string|\\Traversable  $path  skipDocPrefix($prefix)    *  param array|string|\\Traversable  $prefix  charset($charset)    *  param array|string  $charset  mainProjectNamePrefix($name)    *  param string  $name  title($title)    *  param string  $title  baseUrl($baseUrl)    *  param string  $baseUrl  googleCseId($id)    *  param string  $id  googleAnalytics($trackingCode)    *  param string  $trackingCode  templateConfig($templateConfig)    *  param mixed  $templateConfig  allowedHtml($tags)    *  param array|string  $tags  groups($groups)    *  param string  $groups  autocomplete($types)    *  param array|string  $types  accessLevels($levels)    *  param array|string  $levels  internal($internal)    *  param boolean|string  $internal  php($php)    *  param bool|string  $php  tree($tree)    *  param bool|string  $tree  deprecated($dep)    *  param bool|string  $dep  todo($todo)    *  param bool|string  $todo  sourceCode($src)    *  param bool|string  $src  download($zipped)    *  param bool|string  $zipped  report($path)    *  param string  $path  wipeout($wipeout)    *  param bool|string  $wipeout  quiet($quiet)    *  param bool|string  $quiet  progressbar($bar)    *  param bool|string  $bar  colors($colors)    *  param bool|string  $colors  updateCheck($check)    *  param bool|string  $check  debug($debug)    *  param bool|string  $debug  setOutput($output)   Sets the Console Output.  setProcessInput($input)   Pass an input to the process. Can be resource created with fopen() or string  dir($dir)   Changes working directory of command  arg($arg)   Pass argument to executable. Its value will be automatically escaped.  rawArg($arg)   Pass the provided string in its raw (as provided) form as an argument to executable.  option($option, $value = null, $separator = null)   Pass option to executable. Options are prefixed with  --  , value can be provided in second parameter.  options(array $options, $separator = null)   Pass multiple options to executable. The associative array contains  optionList($option, $value = null, $separator = null)   Pass an option with multiple values to executable. Value can be a string or array.",
            "title": "ApiGen"
        },
        {
            "location": "/changelog/",
            "text": "Changelog\n\n\n3.0.4 08/28/2021\n\n\n\n\nUndeprecate escapeArgument() by Mark Dorison (#1039)\n\n\nAdd setProcessInput and deprecate setInput by Rodrigo(#1034)\n\n\nAdd array as a type accepted for argv parameter by Rodrigo (#1032)\n\n\nFix null return in createContainer by Rodrigo (#1031)\n\n\nFix mkdir error in taskExtract on PHP 8 by wxa (#1028)\n\n\nrefactor: Remove hardcoded namespace by Pol Dellaiera refactor (#1026)\n\n\nrefactor: Use proper use imports by Pol Dellaiera refactor (#1025)\n\n\nRun linter in parallel by Viktor Sz\u00e9pe (#1020)\n\n\nFix task pack (#1044)\n\n\n\n\n3.0.0 02/21/2021\n\n\n\n\nPHP 8 support\n\n\nUpdate to league/container ^3\n\n\nPrefer passing \nConsoleIO $io\n to commands over \n$this->io()\n, which is now deprecated.\n\n\nloadTasks\n renamed to \nTasks\n\n\n\n\n2.2.0 09/05/2020\n\n\n\n\nNew CheckPlatformReqs task by Pierre Rudloff (#957)\n\n\nAdd Runner function for retrieving an application to be used with tests by Les Peabody (#968)\n\n\nAdd ignorelist to pack command by O'Briat (#964)\n\n\nCreate a semver file if using the SemVer task for the first time by Dan Untenzu (#960)\n\n\nAllow symfony/yaml ^5\n\n\n\n\n2.1.0 05/27/2020\n\n\n\n\nSymfony 5 support. (#940)\n\n\n\n\n2.0.4 - 2.0.5 05/22/2020\n\n\n\n\nClass ZipArchive does not have a constructor by Viktor Sz\u00e9pe (#902)\n\n\nIn instances where the simple default config rules are in use, allow for config files to be loaded from the root of the app when Robo is in the vendor directory. (#948)\n\n\nDocker builds with Buildkit by Mario Lubenka (#942)\n\n\nAdd a limit to replace via regexp by Patrick Kollitsch (#946)\n\n\nGithub access_token via query parameter is deprecated. by Dane Powell (#943)\n\n\nAdded the --no-suggest option to composer tasks by Klein Thomas (#934)\n\n\n\n\n2.0.0 - 2.0.3 02/18/2019\n\n\n\n\nCompatible with the 1.x branch, but removes support for old versions of PHP and requires Symfony 4.x.\n\n\nPHP 7.4 compatibility by Dane Powell (#923)\n\n\nextract() is not our friend by Viktor Sz\u00e9pe (#903)\n\n\nOld variables in ImageMinify by Viktor Sz\u00e9pe (#904)\n\n\nRuntimeException used realtively by Viktor Sz\u00e9pe (#905)\n\n\n\n\n1.4.10 7/29/2019\n\n\n\n\nAllow default argument for confirm() questions by Dane Powell (#850)\n\n\nAllow command classes to end in Commands or Command by Jelle Sebreghts (#878)\n\n\nImageMinify: Prevent undefined variable error by Dan (#852) (#854)\n\n\nAdd sample with changed file handling to Base/Watch documentation by Patrick Kollitsch (#847)\n\n\nClearer explanation of --load-from option by Jordan Koplowicz (#872)\n\n\nFix PHPDoc @param and @return type hints by Andor (#886)\n\n\nUpdate PHPDoc mismatch by Filippo Tessarotto (#883)\n\n\n\n\n1.4.7 - 1.4.9 2/19/2019\n\n\n\n\nRe-release 1.4.6 to remove artifacts inadvertantly added to tagged release.\n\n\n\n\n1.4.6 2/16/2019\n\n\n\n\nExtend ConfigAwareTrait from consolidation config (#838)\n\n\n\n\n1.4.5 2/15/2019\n\n\n\n\nImproved paramameter injection (#822)\n\n\n\n\n1.4.4 2/8/2019\n\n\n\n\nAdd stderr() convenience method to Robo\\Common\\OutputAwareTrait.\n\n\n\n\n1.4.0 - 1.4.3 1/2/2019\n\n\n\n\nBUGFIX: Back out 1.3.5, which contained breaking changes. Create a 1.x branch for continuation of compatible versions, and move breaking code to 2.x development (on master branch).\n\n\n\n\n1.3.4 12/20/2018\n\n\n\n\nAllow for aborting completions or rollbacks by James Sansbury (#815)\n\n\nBUGFIX: Allow commands to declare '@param InputInterface' to satisfy code style checks\n\n\n\n\n1.3.3 12/13/2018\n\n\n\n\nAdd StdinHandler to the standard Robo DI container (#814)\n\n\nBUGFIX: Add test to ensure rollback order is in reverse by James Sansbury (#812)\n\n\nBUGFIX: Fix the main Robo script entrypoint to work as a phar. (#811)\n\n\n\n\n1.3.2 11/21/2018\n\n\n\n\nUpdate to Composer Test Scenarios 3 (#803)\n\n\nSupport Windows line endings in \".semver\" file by C\u00e9dric Belin (#788)\n\n\nEnsure that environment variables are preserved in Exec by James Sansbury (#769)\n\n\nCorrect Doxygen in \\Robo\\Task\\Composer\\loadTasks. (#772)\n\n\n\n\n1.3.1 8/17/2018\n\n\n\n\nMove self:update command to consolidation/self-update project.\n\n\nFix overzealous shebang function (#759)\n\n\nActualize RoboFile of Codeception project link url in RADME.php by Valerij Ivashchenko (#756)\n\n\nWorkaround - Move g1a/composer-test-scenarios from require-dev to require.\n\n\nAdd --no-progress --no-suggest back in.\n\n\nTell dependencies.io to use --no-dev when determining if a PR should be made.\n\n\nOmit --no-dev when the PR is actually being composed.\n\n\nAdd \nEvents\n as third parameter in watch function (#751)\n\n\n\n\n1.3.0 5/26/2018\n\n\n\n\nAdd EnvConfig to Robo: set configuration values via environment variables (#737)\n\n\n\n\n1.2.4 5/25/2018\n\n\n\n\nUpdate 'Robo as a Framework' documentation to recommend https://github.com/g1a/starter\n\n\nAllow CommandStack to exec other tasks by Scott Falkingham (#726)\n\n\nFix double escape when specifying a remoteShell with rsync by Rob Peck (#715)\n\n\n\n\n1.2.3 4/5/2018\n\n\n\n\nHide progress indicator prior to 'exec'. (#707)\n\n\nDependencies.io config for version 2 preview by Dave Gaeddert (#699)\n\n\nFix path to test script in try:para\n\n\nCorrectly parameterize the app name in the self:update command help text.\n\n\nRefuse to start 'release' script if phar.readonly is set.\n\n\n\n\n1.2.2 2/27/2018\n\n\n\n\nExperimental robo plugin mechanism (backwards compatibility not yet guarenteed)\n\n\nAllow traits to be documented\n\n\nDo not export scenarios directory\n\n\nBreaking\n Typo in \n\\Robo\\Runner:errorCondtion()\n fixed as \n\\Robo\\Runner:errorCondition()\n.\n\n\n\n\n1.2.1 12/28/2017\n\n\n\n\nFixes to tests / build only.\n\n\n\n\n1.2.0 12/12/2017\n\n\n\n\nSupport Symfony 4 Components (#651)\n\n\nTest multiple composer dependency permutations with https://github.com/greg-1-anderson/composer-test-scenarios\n\n\n\n\n1.1.5 10/25/2017\n\n\n\n\nLoad option default values from $input for all options defined in the Application's input definition (#642)\n\n\nBUGFIX: Store global options in 'options' namespace rather than at the top level of config.\n\n\n\n\n1.1.4 10/16/2017\n\n\n\n\nUpdate order of command event hooks so that the option settings are injected prior to configuration being injected, so that dynamic options are available for config injection. (#636)\n\n\nAdd shallow clone method to GithubStack task. by Stefan Lange (#633)\n\n\nMake Changelog task more flexible. by Matthew Grasmick(#631)\n\n\nAdding accessToken() to GitHub task. by Matthew Grasmick (#630)\n\n\n\n\n1.1.3 09/23/2017\n\n\n\n\nAdd self:update command to update Robo phar distributions to the latest available version on GitHub. by Alexander Menk\n\n\nFix Robo\\Task\\Docker\\Base to implement CommandInterface. by Alexei Gorobet (#625)\n\n\nAdd overwrite argument to Robo\\Task\\Filesystem\\loadShortcuts.php::_rename by Alexei Gorobets (#624)\n\n\nAdd failGroup() method for Codeception run command. by Max Gorovenko (#622)\n\n\nSet up composer-lock-updater on cron. (#618)\n\n\nFix robo.yml loader by exporting processor instead of loader. By thomscode (#612)\n\n\n\n\n1.1.2 07/28/2017\n\n\n\n\nInject option default values in help (#607)\n\n\nAdd noRebuild() method for Codeception run command. By Max Gorovenko (#603)\n\n\n\n\n1.1.1 07/07/2017\n\n\n\n\nAdd an option to wait an interval of time between parallel processes. By Gemma Pou #601\n\n\nDo not print dire messages about Robo bootstrap problems when a valid command (e.g. help, list, init, --version) runs. #502\n\n\n\n\n1.1.0 06/29/2017\n\n\n\n\nConfiguration for multiple commands or multiple tasks may now be shared by attaching the configuration values to the task namespace or the command group. #597\n\n\nBreaking\n Task configuration taken from property \ntask.PARTIAL_NAMESPACE.CLASSNAME.settings\n instead of \ntask.CLASSNAME.settings\n. Breaks backwards compatibility only with experimental configuration features introduced in version 1.0.6. Config is now stable, as of this release; there will be no more breaking config changes until Robo 2.0. #596\n\n\n\n\n1.0.8 06/02/2017\n\n\n\n\nFix regression in 1.0.7: Allow tasks to return results of types other than \\Robo\\Result. #585\n\n\nAllow Copydir exclude method to specify subfolders by Alex Skrypnyk #590\n\n\nAdd composer init task, and general rounding out of composer tasks. #586\n\n\nEnhance SemVer task so that it can be used with files or strings. #589\n\n\n\n\n1.0.7 05/30/2017\n\n\n\n\nAdd a state system for collections to allow tasks to pass state to later tasks.\n\n\nEnsure that task results are returned when in stopOnFail() mode.\n\n\nMake rawArg() and detectInteractive chainable. By Matthew Grasmick #553 #558\n\n\n[CopyDir] Use Symfony Filesystem. By malikkotob #555\n\n\n[Composer] Implement CommandInterface. By Ivan Borzenkov #561\n\n\n\n\n1.0.6 03/31/2017\n\n\n\n\nAdd configuration features to inject values into commandline option and task setter methods. Experimental; incompatible changes may be introduced prior to the stable release of configuration in version 1.1.0.\n\n\n\n\n1.0.5 11/23/2016\n\n\n\n\nIncorporate word-wrapping from output-formatters 3.1.5\n\n\nIncorporate custom event handlers from annotated-command 2.2.0\n\n\n\n\n1.0.4 11/15/2016\n\n\n\n\nUpdated to latest changes in \nmaster\n branch. Phar and tag issues.\n\n\n\n\n1.0.0 10/10/2016\n\n\n\n\n[Collection] Add tasks to a collection, and implement them as a group with rollback\n\n\nTasks may be added to a collection via \n$collection->add($task);\n\n\n$collection->run();\n runs all tasks in the collection\n\n\n$collection->addCode(function () { ... } );\n to add arbitrary code to a collection\n\n\n$collection->progressMessage(...);\n will log a message\n\n\n$collection->rollback($task);\n and \n$collection->rollbackCode($callable);\n add a rollback function to clean up after a failed task\n\n\n$collection->completion($task);\n and \n$collection->completionCode($callable);\n add a function that is called once the collection completes or rolls back.\n\n\n$collection->before();\n and \n$collection->after();\n can be used to add a task or function that runs before or after (respectively) the specified named task. To use this feature, tasks must be given names via an optional \n$taskName\n parameter when they are added.\n\n\nCollections may be added to collections, if desired. \n\n\n[CollectionBuilder] Create tasks and add them to a collection in a single operation.\n\n\n$this->collectionBuilder()->taskExec('pwd')->taskExec('ls')->run()\n\n\nAdd output formatters\n\n\nIf a Robo command returns a string, or a \nResult\n object with a \n$message\n, then it will be printed\n\n\nCommands may be annotated to describe output formats that may be used\n\n\nStructured arrays returned from function results may be converted into different formats, such as a table, yml, json, etc.\n\n\nTasks must \nuse TaskIO\n for output methods. It is no longer possible to \nuse IO\n from a task. For direct access use \nRobo::output()\n (not recommended).   \n\n\nUse league/container to do Dependency Injection\n\n\nBreaking\n Tasks' loadTasks traits must use \n$this->task(TaskClass::class);\n instead of \nnew TaskClass();\n\n\nBreaking\n Tasks that use other tasks must use \n$this->collectionBuilder()->taskName();\n instead of \nnew TaskClass();\n when creating task objects to call. Implement \nRobo\\Contract\\BuilderAwareInterface\n and use \nRobo\\Contract\\BuilderAwareTrait\n to add the \ncollectionBuilder()\n method to your task class.\n\n\nBreaking\n The \narg()\n, \nargs()\n and \noption()\n methods in CommandArguments now escape the values passed in to them. There is now a \nrawArg()\n method if you need to add just one argument that has already been escaped.\n\n\nBreaking\n taskWrite is now called taskWriteToFile\n\n\n[Extract] task added\n\n\n[Pack] task added\n\n\n[TmpDir], [WorkDir] and [TmpFile] tasks added\n\n\nSupport Robo scripts that allows scripts starting with \n#!/usr/bin/env robo\n to define multiple robo commands.  Use \n#!/usr/bin/env robo run\n to define a single robo command implemented by the \nrun()\n method.\n\n\nProvide ProgresIndicatorAwareInterface and ProgressIndicatorAwareTrait that make it easy to add progress indicators to tasks\n\n\nAdd --simulate mode that causes tasks to print what they would have done, but make no changes\n\n\nAdd \nrobo generate:task\n code-generator to make new stack-based task wrappers around existing classes\n\n\nAdd \nrobo sniff\n by @dustinleblanc. Runs the PHP code sniffer followed by the code beautifier, if needed.\n\n\nImplement ArrayInterface for Result class, so result data may be accessed like an array \n\n\nDefer execution of operations in taskWriteToFile until the run() method\n\n\nAdd Write::textIfMatch() for taskWriteToFile\n\n\nResourceExistenceChecker used for error checking in DeleteDir, CopyDir, CleanDir and Concat tasks by @burzum\n\n\nProvide ResultData base class for Result; ResultData may be used in instances where a specific \n$task\n instance is not available (e.g. in a Robo command)\n\n\nArgvInput now available via $this->getInput() in RoboFile by Thomas Spigel\n\n\nAdd optional message to git tag task by Tim Tegeler\n\n\nRename 'FileSystem' to 'Filesystem' wherever it occurs.\n\n\nCurrent directory is changed with \nchdir\n only if specified via the \n--load-from\n option (RC2)\n\n\n\n\n0.6.0 10/30/2015\n\n\n\n\nAdded \n--load-from\n option to make Robo start RoboFiles from other directories. Use it like \nrobo --load-from /path/to/where/RobFile/located\n.\n\n\nRobo will not ask to create RoboFile if it does not exist, \ninit\n command should be used.\n\n\n[ImageMinify] task added by @gabor-udvari\n\n\n[OpenBrowser] task added by @oscarotero\n\n\n[FlattenDir] task added by @gabor-udvari\n\n\nRobo Runner can easily extended for custom runner by passing RoboClass and RoboFile parameters to constructor. By @rdeutz See #232\n\n\n\n\n0.5.4 08/31/2015\n\n\n\n\n[WriteToFile] Fixed by @gabor-udvari: always writing to file regardless whether any changes were made or not. This can bring the taskrunner into an inifinite loop if a replaced file is being watched.\n\n\n[Scss] task added, requires \nleafo/scssphp\n library to compile by @gabor-udvari\n\n\n[PhpSpec] TAP formatter added by @orls\n\n\n[Less] Added ability to set import dir for less compilers by @MAXakaWIZARD\n\n\n[Less] fixed passing closure as compiler by @pr0nbaer\n\n\n[Sass] task added by \n2015-08-31\n\n\n\n\n0.5.3 07/15/2015\n\n\n\n\n[Rsync] Ability to use remote shell with identity file by @Mihailoff\n\n\n[Less] Task added by @burzum\n\n\n[PHPUnit] allow to test specific files with \nfiles\n parameter by @burzum.\n\n\n[GitStack] \ntag\n added by @SebSept\n\n\n[Concat] Fixing concat, it breaks some files if there is no new line. @burzum \n2015-03-03-13\n\n\n[Minify] BC fix to support Jsqueeze 1.x and 2.x @burzum \n2015-03-12\n\n\n[PHPUnit] Replace log-xml with log-junit @vkunz \n2015-03-06\n\n\n[Minify] Making it possible to pass options to the JS minification @burzum \n2015-03-05\n\n\n[CopyDir] Create destination recursively @boedah \n2015-02-28\n\n\n\n\n0.5.2 02/24/2015\n\n\n\n\n[Phar] do not compress phar if more than 1000 files included (causes internal PHP error) \n2015-02-24\n\n\n_copyDir and _mirrorDir shortcuts fixed by @boedah \n2015-02-24\n\n\n[File\\Write] methods replace() and regexReplace() added by @asterixcapri \n2015-02-24\n\n\n[Codecept] Allow to set custom name of coverage file raw name by @raistlin \n2015-02-24\n\n\n[Ssh] Added property \nremoteDir\n by @boedah \n2015-02-24\n\n\n[PhpServer] fixed passing arguments to server \n2015-02-24\n\n\n\n\n0.5.1 01/27/2015\n\n\n\n\n[Exec] fixed execution of background jobs, processes persist till the end of PHP script \n2015-01-27\n\n\n[Ssh] Fixed SSH task by @Butochnikov \n2015-01-27\n\n\n[CopyDir] fixed shortcut usage by @boedah \n2015-01-27\n\n\nAdded default value options for Configuration trait by @TamasBarta \n2015-01-27\n\n\n\n\n0.5.0 01/22/2015\n\n\nRefactored core\n\n\n\n\nAll traits moved to \nRobo\\Common\n namespace\n\n\nInterfaces moved to \nRobo\\Contract\n namespace\n\n\nAll task extend \nRobo\\Task\\BaseTask\n to use common IO.\n\n\nAll classes follow PSR-4 standard\n\n\nTasks are loaded into RoboFile with \nloadTasks\n trait\n\n\nOne-line tasks are available as shortcuts loaded by \nloadShortucts\n and used like \n$this->_exec('ls')\n\n\nRobo runner is less coupled. Output can be set by \n\\Robo\\Config::setOutput\n, \nRoboFile\n can be changed to any provided class.\n\n\nTasks can be used outside of Robo runner (inside a project)\n\n\nTimer for long-running tasks added\n\n\nTasks can be globally configured (WIP) via \nRobo\\Config\n class.\n\n\nUpdated to Symfony >= 2.5\n\n\nIO methods added \naskHidden\n, \naskDefault\n, \nconfirm\n\n\nTaskIO methods added \nprintTaskError\n, \nprintTaskSuccess\n with different formatting.\n\n\n[Docker] Tasks added\n\n\n[Gulp] Task added by @schorsch3000\n\n\n\n\n0.4.7 12/26/2014\n\n\n\n\n[Minify] Task added by @Rarst. Requires additional dependencies installed \n2014-12-26\n\n\nHelp command is populated from annotation\n by @jonsa \n2014-12-26\n\n\nAllow empty values as defaults to optional options by @jonsa \n2014-12-26\n\n\nPHP_WINDOWS_VERSION_BUILD\n constant is used to check for Windows in tasks by @boedah \n2014-12-26\n\n\n[Copy][EmptyDir] Fixed infinite loop by @boedah \n2014-12-26\n\n\n[ApiGen] Task added by @drobert \n2014-12-26\n\n\n[FileSystem] Equalized \ncopy\n and \nchmod\n argument to defaults by @Rarst (BC break) \n2014-12-26\n\n\n[FileSystem]  Added missing umask argument to chmod() method of FileSystemStack by @Rarst\n\n\n[SemVer] Fixed file read and exit code\n\n\n[Codeception] fixed codeception coverageHtml option by @gunfrank \n2014-12-26\n\n\n[phpspec] Task added by @SebSept \n2014-12-26\n\n\nShortcut options: if option name is like foo|f, assign f as shortcut by @jschnare \n2014-12-26\n\n\n[Rsync] Shell escape rsync exclude pattern by @boedah. Fixes #77 (BC break) \n2014-12-26\n\n\n[Npm] Task added by @AAlakkad \n2014-12-26\n\n\n\n\n0.4.6 10/17/2014\n\n\n\n\n[Exec] Output from buffer is not spoiled by special chars \n2014-10-17\n\n\n[PHPUnit] detect PHPUnit on Windows or when is globally installed with Composer \n2014-10-17\n\n\nOutput: added methods askDefault and confirm by @bkawakami \n2014-10-17\n\n\n[Svn] Task added by @anvi \n2014-08-13\n\n\n[Stack] added dir and printed options \n2014-08-12\n\n\n[ExecTask] now uses Executable trait with printed, dir, arg, option methods added \n2014-08-12\n\n\n\n\n0.4.5 08/05/2014\n\n\n\n\n[Watch] bugfix: Watch only tracks last file if given array of files #46 \n2014-08-05\n\n\nAll executable tasks can configure working directory with \ndir\n option\n\n\nIf no value for an option is provided, assume it's a VALUE_NONE option. #47 by @pfaocle\n\n\n[Changelog] changed style \n2014-06-27\n\n\n[GenMarkDown] fixed formatting annotations \n2014-06-27\n\n\n\n\n0.4.4 06/05/2014\n\n\n\n\nOutput can be disabled in all executable tasks by ->printed(false)\n\n\ndisabled timeouts by default in ParallelExec\n\n\nbetter descriptions for Result output\n\n\nchanged ParallelTask to display failed process in list\n\n\nChanged Output to be stored globally in Robo\\Runner class\n\n\nAdded \nSshTask\n by @boedah\n\n\nAdded \nRsyncTask\n by @boedah\n\n\nfalse option added to proceess* callbacks in GenMarkDownTask to skip processing\n\n\n\n\n0.4.3 05/21/2014\n\n\n\n\nadded \nSemVer\n task by \n@jadb\n\n\nyell\n output method added\n\n\ntask \nFileSystemStack\n added\n\n\nMirrorDirTask\n added by \n@devster\n\n\nswitched to Symfony Filesystem component\n\n\noptions can be used to commands\n\n\narray arguments can be used in commands\n\n\n\n\n0.4.2 05/09/2014\n\n\n\n\nask can now hide answers\n\n\nTrait Executable added to provide standard way for passing arguments and options\n\n\nadded ComposerDumpAutoload task by \n@pmcjury\n\n\nadded FileSystem task by \n@jadb\n\n\nadded CommonStack metatsk to have similar interface for all stacked tasks by \n@jadb\n\n\narguments and options can be passed into variable and used in exec task\n\n\npassing options into commands\n\n\n\n\n0.4.1 05/05/2014\n\n\n\n\n[BC] \ntaskGit\n task renamed to \ntaskGitStack\n for compatibility\n\n\nunit and functional tests added\n\n\nall command tasks now use Symfony\\Process to execute them\n\n\nenabled Bower and Concat tasks\n\n\nadded \nprinted\n param to Exec task\n\n\ncodeception \nsuite\n method now returns \n$this\n\n\ntimeout options added to Exec task\n\n\n\n\n0.4.0 04/27/2014\n\n\n\n\nCodeception task added\n\n\nPHPUnit task improved\n\n\nBower task added by @jadb\n\n\nParallelExec task added\n\n\nSymfony Process component used for execution\n\n\nTask descriptions taken from first line of annotations\n\n\nCommandInterface\n added to use tasks as parameters\n\n\n\n\n0.3.3 02/25/2014\n\n\n\n\nPHPUnit basic task\n\n\nfixed doc generation\n\n\n\n\n0.3.5 02/21/2014\n\n\n\n\nchanged generated init template\n\n\n\n\n0.3.4 02/21/2014\n\n\n\n\n[PackPhar] ->executable command will remove hashbang when generated stub file\n\n\n[Git][Exec] stopOnFail option for Git and Exec stack\n\n\n[ExecStack] shortcut for executing bash commands in stack\n\n\n\n\n0.3.2 02/20/2014\n\n\n\n\nrelease process now includes phar\n\n\nphar executable method added\n\n\ngit checkout added\n\n\nphar pack created\n\n\n\n\n0.3.0 02/11/2014\n\n\n\n\nDynamic configuration via magic methods\n\n\nadded WriteToFile task\n\n\nResult class for managing exit codes and error messages\n\n\n\n\n0.2.0 01/29/2014\n\n\n\n\nMerged Tasks and Traits to same file\n\n\nAdded Watcher task\n\n\nAdded GitHubRelease task\n\n\nAdded Changelog task\n\n\nAdded ReplaceInFile task",
            "title": "Releases"
        },
        {
            "location": "/changelog/#changelog",
            "text": "",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#304-08282021",
            "text": "Undeprecate escapeArgument() by Mark Dorison (#1039)  Add setProcessInput and deprecate setInput by Rodrigo(#1034)  Add array as a type accepted for argv parameter by Rodrigo (#1032)  Fix null return in createContainer by Rodrigo (#1031)  Fix mkdir error in taskExtract on PHP 8 by wxa (#1028)  refactor: Remove hardcoded namespace by Pol Dellaiera refactor (#1026)  refactor: Use proper use imports by Pol Dellaiera refactor (#1025)  Run linter in parallel by Viktor Sz\u00e9pe (#1020)  Fix task pack (#1044)",
            "title": "3.0.4 08/28/2021"
        },
        {
            "location": "/changelog/#300-02212021",
            "text": "PHP 8 support  Update to league/container ^3  Prefer passing  ConsoleIO $io  to commands over  $this->io() , which is now deprecated.  loadTasks  renamed to  Tasks",
            "title": "3.0.0 02/21/2021"
        },
        {
            "location": "/changelog/#220-09052020",
            "text": "New CheckPlatformReqs task by Pierre Rudloff (#957)  Add Runner function for retrieving an application to be used with tests by Les Peabody (#968)  Add ignorelist to pack command by O'Briat (#964)  Create a semver file if using the SemVer task for the first time by Dan Untenzu (#960)  Allow symfony/yaml ^5",
            "title": "2.2.0 09/05/2020"
        },
        {
            "location": "/changelog/#210-05272020",
            "text": "Symfony 5 support. (#940)",
            "title": "2.1.0 05/27/2020"
        },
        {
            "location": "/changelog/#204-205-05222020",
            "text": "Class ZipArchive does not have a constructor by Viktor Sz\u00e9pe (#902)  In instances where the simple default config rules are in use, allow for config files to be loaded from the root of the app when Robo is in the vendor directory. (#948)  Docker builds with Buildkit by Mario Lubenka (#942)  Add a limit to replace via regexp by Patrick Kollitsch (#946)  Github access_token via query parameter is deprecated. by Dane Powell (#943)  Added the --no-suggest option to composer tasks by Klein Thomas (#934)",
            "title": "2.0.4 - 2.0.5 05/22/2020"
        },
        {
            "location": "/changelog/#200-203-02182019",
            "text": "Compatible with the 1.x branch, but removes support for old versions of PHP and requires Symfony 4.x.  PHP 7.4 compatibility by Dane Powell (#923)  extract() is not our friend by Viktor Sz\u00e9pe (#903)  Old variables in ImageMinify by Viktor Sz\u00e9pe (#904)  RuntimeException used realtively by Viktor Sz\u00e9pe (#905)",
            "title": "2.0.0 - 2.0.3 02/18/2019"
        },
        {
            "location": "/changelog/#1410-7292019",
            "text": "Allow default argument for confirm() questions by Dane Powell (#850)  Allow command classes to end in Commands or Command by Jelle Sebreghts (#878)  ImageMinify: Prevent undefined variable error by Dan (#852) (#854)  Add sample with changed file handling to Base/Watch documentation by Patrick Kollitsch (#847)  Clearer explanation of --load-from option by Jordan Koplowicz (#872)  Fix PHPDoc @param and @return type hints by Andor (#886)  Update PHPDoc mismatch by Filippo Tessarotto (#883)",
            "title": "1.4.10 7/29/2019"
        },
        {
            "location": "/changelog/#147-149-2192019",
            "text": "Re-release 1.4.6 to remove artifacts inadvertantly added to tagged release.",
            "title": "1.4.7 - 1.4.9 2/19/2019"
        },
        {
            "location": "/changelog/#146-2162019",
            "text": "Extend ConfigAwareTrait from consolidation config (#838)",
            "title": "1.4.6 2/16/2019"
        },
        {
            "location": "/changelog/#145-2152019",
            "text": "Improved paramameter injection (#822)",
            "title": "1.4.5 2/15/2019"
        },
        {
            "location": "/changelog/#144-282019",
            "text": "Add stderr() convenience method to Robo\\Common\\OutputAwareTrait.",
            "title": "1.4.4 2/8/2019"
        },
        {
            "location": "/changelog/#140-143-122019",
            "text": "BUGFIX: Back out 1.3.5, which contained breaking changes. Create a 1.x branch for continuation of compatible versions, and move breaking code to 2.x development (on master branch).",
            "title": "1.4.0 - 1.4.3 1/2/2019"
        },
        {
            "location": "/changelog/#134-12202018",
            "text": "Allow for aborting completions or rollbacks by James Sansbury (#815)  BUGFIX: Allow commands to declare '@param InputInterface' to satisfy code style checks",
            "title": "1.3.4 12/20/2018"
        },
        {
            "location": "/changelog/#133-12132018",
            "text": "Add StdinHandler to the standard Robo DI container (#814)  BUGFIX: Add test to ensure rollback order is in reverse by James Sansbury (#812)  BUGFIX: Fix the main Robo script entrypoint to work as a phar. (#811)",
            "title": "1.3.3 12/13/2018"
        },
        {
            "location": "/changelog/#132-11212018",
            "text": "Update to Composer Test Scenarios 3 (#803)  Support Windows line endings in \".semver\" file by C\u00e9dric Belin (#788)  Ensure that environment variables are preserved in Exec by James Sansbury (#769)  Correct Doxygen in \\Robo\\Task\\Composer\\loadTasks. (#772)",
            "title": "1.3.2 11/21/2018"
        },
        {
            "location": "/changelog/#131-8172018",
            "text": "Move self:update command to consolidation/self-update project.  Fix overzealous shebang function (#759)  Actualize RoboFile of Codeception project link url in RADME.php by Valerij Ivashchenko (#756)  Workaround - Move g1a/composer-test-scenarios from require-dev to require.  Add --no-progress --no-suggest back in.  Tell dependencies.io to use --no-dev when determining if a PR should be made.  Omit --no-dev when the PR is actually being composed.  Add  Events  as third parameter in watch function (#751)",
            "title": "1.3.1 8/17/2018"
        },
        {
            "location": "/changelog/#130-5262018",
            "text": "Add EnvConfig to Robo: set configuration values via environment variables (#737)",
            "title": "1.3.0 5/26/2018"
        },
        {
            "location": "/changelog/#124-5252018",
            "text": "Update 'Robo as a Framework' documentation to recommend https://github.com/g1a/starter  Allow CommandStack to exec other tasks by Scott Falkingham (#726)  Fix double escape when specifying a remoteShell with rsync by Rob Peck (#715)",
            "title": "1.2.4 5/25/2018"
        },
        {
            "location": "/changelog/#123-452018",
            "text": "Hide progress indicator prior to 'exec'. (#707)  Dependencies.io config for version 2 preview by Dave Gaeddert (#699)  Fix path to test script in try:para  Correctly parameterize the app name in the self:update command help text.  Refuse to start 'release' script if phar.readonly is set.",
            "title": "1.2.3 4/5/2018"
        },
        {
            "location": "/changelog/#122-2272018",
            "text": "Experimental robo plugin mechanism (backwards compatibility not yet guarenteed)  Allow traits to be documented  Do not export scenarios directory  Breaking  Typo in  \\Robo\\Runner:errorCondtion()  fixed as  \\Robo\\Runner:errorCondition() .",
            "title": "1.2.2 2/27/2018"
        },
        {
            "location": "/changelog/#121-12282017",
            "text": "Fixes to tests / build only.",
            "title": "1.2.1 12/28/2017"
        },
        {
            "location": "/changelog/#120-12122017",
            "text": "Support Symfony 4 Components (#651)  Test multiple composer dependency permutations with https://github.com/greg-1-anderson/composer-test-scenarios",
            "title": "1.2.0 12/12/2017"
        },
        {
            "location": "/changelog/#115-10252017",
            "text": "Load option default values from $input for all options defined in the Application's input definition (#642)  BUGFIX: Store global options in 'options' namespace rather than at the top level of config.",
            "title": "1.1.5 10/25/2017"
        },
        {
            "location": "/changelog/#114-10162017",
            "text": "Update order of command event hooks so that the option settings are injected prior to configuration being injected, so that dynamic options are available for config injection. (#636)  Add shallow clone method to GithubStack task. by Stefan Lange (#633)  Make Changelog task more flexible. by Matthew Grasmick(#631)  Adding accessToken() to GitHub task. by Matthew Grasmick (#630)",
            "title": "1.1.4 10/16/2017"
        },
        {
            "location": "/changelog/#113-09232017",
            "text": "Add self:update command to update Robo phar distributions to the latest available version on GitHub. by Alexander Menk  Fix Robo\\Task\\Docker\\Base to implement CommandInterface. by Alexei Gorobet (#625)  Add overwrite argument to Robo\\Task\\Filesystem\\loadShortcuts.php::_rename by Alexei Gorobets (#624)  Add failGroup() method for Codeception run command. by Max Gorovenko (#622)  Set up composer-lock-updater on cron. (#618)  Fix robo.yml loader by exporting processor instead of loader. By thomscode (#612)",
            "title": "1.1.3 09/23/2017"
        },
        {
            "location": "/changelog/#112-07282017",
            "text": "Inject option default values in help (#607)  Add noRebuild() method for Codeception run command. By Max Gorovenko (#603)",
            "title": "1.1.2 07/28/2017"
        },
        {
            "location": "/changelog/#111-07072017",
            "text": "Add an option to wait an interval of time between parallel processes. By Gemma Pou #601  Do not print dire messages about Robo bootstrap problems when a valid command (e.g. help, list, init, --version) runs. #502",
            "title": "1.1.1 07/07/2017"
        },
        {
            "location": "/changelog/#110-06292017",
            "text": "Configuration for multiple commands or multiple tasks may now be shared by attaching the configuration values to the task namespace or the command group. #597  Breaking  Task configuration taken from property  task.PARTIAL_NAMESPACE.CLASSNAME.settings  instead of  task.CLASSNAME.settings . Breaks backwards compatibility only with experimental configuration features introduced in version 1.0.6. Config is now stable, as of this release; there will be no more breaking config changes until Robo 2.0. #596",
            "title": "1.1.0 06/29/2017"
        },
        {
            "location": "/changelog/#108-06022017",
            "text": "Fix regression in 1.0.7: Allow tasks to return results of types other than \\Robo\\Result. #585  Allow Copydir exclude method to specify subfolders by Alex Skrypnyk #590  Add composer init task, and general rounding out of composer tasks. #586  Enhance SemVer task so that it can be used with files or strings. #589",
            "title": "1.0.8 06/02/2017"
        },
        {
            "location": "/changelog/#107-05302017",
            "text": "Add a state system for collections to allow tasks to pass state to later tasks.  Ensure that task results are returned when in stopOnFail() mode.  Make rawArg() and detectInteractive chainable. By Matthew Grasmick #553 #558  [CopyDir] Use Symfony Filesystem. By malikkotob #555  [Composer] Implement CommandInterface. By Ivan Borzenkov #561",
            "title": "1.0.7 05/30/2017"
        },
        {
            "location": "/changelog/#106-03312017",
            "text": "Add configuration features to inject values into commandline option and task setter methods. Experimental; incompatible changes may be introduced prior to the stable release of configuration in version 1.1.0.",
            "title": "1.0.6 03/31/2017"
        },
        {
            "location": "/changelog/#105-11232016",
            "text": "Incorporate word-wrapping from output-formatters 3.1.5  Incorporate custom event handlers from annotated-command 2.2.0",
            "title": "1.0.5 11/23/2016"
        },
        {
            "location": "/changelog/#104-11152016",
            "text": "Updated to latest changes in  master  branch. Phar and tag issues.",
            "title": "1.0.4 11/15/2016"
        },
        {
            "location": "/changelog/#100-10102016",
            "text": "[Collection] Add tasks to a collection, and implement them as a group with rollback  Tasks may be added to a collection via  $collection->add($task);  $collection->run();  runs all tasks in the collection  $collection->addCode(function () { ... } );  to add arbitrary code to a collection  $collection->progressMessage(...);  will log a message  $collection->rollback($task);  and  $collection->rollbackCode($callable);  add a rollback function to clean up after a failed task  $collection->completion($task);  and  $collection->completionCode($callable);  add a function that is called once the collection completes or rolls back.  $collection->before();  and  $collection->after();  can be used to add a task or function that runs before or after (respectively) the specified named task. To use this feature, tasks must be given names via an optional  $taskName  parameter when they are added.  Collections may be added to collections, if desired.   [CollectionBuilder] Create tasks and add them to a collection in a single operation.  $this->collectionBuilder()->taskExec('pwd')->taskExec('ls')->run()  Add output formatters  If a Robo command returns a string, or a  Result  object with a  $message , then it will be printed  Commands may be annotated to describe output formats that may be used  Structured arrays returned from function results may be converted into different formats, such as a table, yml, json, etc.  Tasks must  use TaskIO  for output methods. It is no longer possible to  use IO  from a task. For direct access use  Robo::output()  (not recommended).     Use league/container to do Dependency Injection  Breaking  Tasks' loadTasks traits must use  $this->task(TaskClass::class);  instead of  new TaskClass();  Breaking  Tasks that use other tasks must use  $this->collectionBuilder()->taskName();  instead of  new TaskClass();  when creating task objects to call. Implement  Robo\\Contract\\BuilderAwareInterface  and use  Robo\\Contract\\BuilderAwareTrait  to add the  collectionBuilder()  method to your task class.  Breaking  The  arg() ,  args()  and  option()  methods in CommandArguments now escape the values passed in to them. There is now a  rawArg()  method if you need to add just one argument that has already been escaped.  Breaking  taskWrite is now called taskWriteToFile  [Extract] task added  [Pack] task added  [TmpDir], [WorkDir] and [TmpFile] tasks added  Support Robo scripts that allows scripts starting with  #!/usr/bin/env robo  to define multiple robo commands.  Use  #!/usr/bin/env robo run  to define a single robo command implemented by the  run()  method.  Provide ProgresIndicatorAwareInterface and ProgressIndicatorAwareTrait that make it easy to add progress indicators to tasks  Add --simulate mode that causes tasks to print what they would have done, but make no changes  Add  robo generate:task  code-generator to make new stack-based task wrappers around existing classes  Add  robo sniff  by @dustinleblanc. Runs the PHP code sniffer followed by the code beautifier, if needed.  Implement ArrayInterface for Result class, so result data may be accessed like an array   Defer execution of operations in taskWriteToFile until the run() method  Add Write::textIfMatch() for taskWriteToFile  ResourceExistenceChecker used for error checking in DeleteDir, CopyDir, CleanDir and Concat tasks by @burzum  Provide ResultData base class for Result; ResultData may be used in instances where a specific  $task  instance is not available (e.g. in a Robo command)  ArgvInput now available via $this->getInput() in RoboFile by Thomas Spigel  Add optional message to git tag task by Tim Tegeler  Rename 'FileSystem' to 'Filesystem' wherever it occurs.  Current directory is changed with  chdir  only if specified via the  --load-from  option (RC2)",
            "title": "1.0.0 10/10/2016"
        },
        {
            "location": "/changelog/#060-10302015",
            "text": "Added  --load-from  option to make Robo start RoboFiles from other directories. Use it like  robo --load-from /path/to/where/RobFile/located .  Robo will not ask to create RoboFile if it does not exist,  init  command should be used.  [ImageMinify] task added by @gabor-udvari  [OpenBrowser] task added by @oscarotero  [FlattenDir] task added by @gabor-udvari  Robo Runner can easily extended for custom runner by passing RoboClass and RoboFile parameters to constructor. By @rdeutz See #232",
            "title": "0.6.0 10/30/2015"
        },
        {
            "location": "/changelog/#054-08312015",
            "text": "[WriteToFile] Fixed by @gabor-udvari: always writing to file regardless whether any changes were made or not. This can bring the taskrunner into an inifinite loop if a replaced file is being watched.  [Scss] task added, requires  leafo/scssphp  library to compile by @gabor-udvari  [PhpSpec] TAP formatter added by @orls  [Less] Added ability to set import dir for less compilers by @MAXakaWIZARD  [Less] fixed passing closure as compiler by @pr0nbaer  [Sass] task added by  2015-08-31",
            "title": "0.5.4 08/31/2015"
        },
        {
            "location": "/changelog/#053-07152015",
            "text": "[Rsync] Ability to use remote shell with identity file by @Mihailoff  [Less] Task added by @burzum  [PHPUnit] allow to test specific files with  files  parameter by @burzum.  [GitStack]  tag  added by @SebSept  [Concat] Fixing concat, it breaks some files if there is no new line. @burzum  2015-03-03-13  [Minify] BC fix to support Jsqueeze 1.x and 2.x @burzum  2015-03-12  [PHPUnit] Replace log-xml with log-junit @vkunz  2015-03-06  [Minify] Making it possible to pass options to the JS minification @burzum  2015-03-05  [CopyDir] Create destination recursively @boedah  2015-02-28",
            "title": "0.5.3 07/15/2015"
        },
        {
            "location": "/changelog/#052-02242015",
            "text": "[Phar] do not compress phar if more than 1000 files included (causes internal PHP error)  2015-02-24  _copyDir and _mirrorDir shortcuts fixed by @boedah  2015-02-24  [File\\Write] methods replace() and regexReplace() added by @asterixcapri  2015-02-24  [Codecept] Allow to set custom name of coverage file raw name by @raistlin  2015-02-24  [Ssh] Added property  remoteDir  by @boedah  2015-02-24  [PhpServer] fixed passing arguments to server  2015-02-24",
            "title": "0.5.2 02/24/2015"
        },
        {
            "location": "/changelog/#051-01272015",
            "text": "[Exec] fixed execution of background jobs, processes persist till the end of PHP script  2015-01-27  [Ssh] Fixed SSH task by @Butochnikov  2015-01-27  [CopyDir] fixed shortcut usage by @boedah  2015-01-27  Added default value options for Configuration trait by @TamasBarta  2015-01-27",
            "title": "0.5.1 01/27/2015"
        },
        {
            "location": "/changelog/#050-01222015",
            "text": "Refactored core   All traits moved to  Robo\\Common  namespace  Interfaces moved to  Robo\\Contract  namespace  All task extend  Robo\\Task\\BaseTask  to use common IO.  All classes follow PSR-4 standard  Tasks are loaded into RoboFile with  loadTasks  trait  One-line tasks are available as shortcuts loaded by  loadShortucts  and used like  $this->_exec('ls')  Robo runner is less coupled. Output can be set by  \\Robo\\Config::setOutput ,  RoboFile  can be changed to any provided class.  Tasks can be used outside of Robo runner (inside a project)  Timer for long-running tasks added  Tasks can be globally configured (WIP) via  Robo\\Config  class.  Updated to Symfony >= 2.5  IO methods added  askHidden ,  askDefault ,  confirm  TaskIO methods added  printTaskError ,  printTaskSuccess  with different formatting.  [Docker] Tasks added  [Gulp] Task added by @schorsch3000",
            "title": "0.5.0 01/22/2015"
        },
        {
            "location": "/changelog/#047-12262014",
            "text": "[Minify] Task added by @Rarst. Requires additional dependencies installed  2014-12-26  Help command is populated from annotation  by @jonsa  2014-12-26  Allow empty values as defaults to optional options by @jonsa  2014-12-26  PHP_WINDOWS_VERSION_BUILD  constant is used to check for Windows in tasks by @boedah  2014-12-26  [Copy][EmptyDir] Fixed infinite loop by @boedah  2014-12-26  [ApiGen] Task added by @drobert  2014-12-26  [FileSystem] Equalized  copy  and  chmod  argument to defaults by @Rarst (BC break)  2014-12-26  [FileSystem]  Added missing umask argument to chmod() method of FileSystemStack by @Rarst  [SemVer] Fixed file read and exit code  [Codeception] fixed codeception coverageHtml option by @gunfrank  2014-12-26  [phpspec] Task added by @SebSept  2014-12-26  Shortcut options: if option name is like foo|f, assign f as shortcut by @jschnare  2014-12-26  [Rsync] Shell escape rsync exclude pattern by @boedah. Fixes #77 (BC break)  2014-12-26  [Npm] Task added by @AAlakkad  2014-12-26",
            "title": "0.4.7 12/26/2014"
        },
        {
            "location": "/changelog/#046-10172014",
            "text": "[Exec] Output from buffer is not spoiled by special chars  2014-10-17  [PHPUnit] detect PHPUnit on Windows or when is globally installed with Composer  2014-10-17  Output: added methods askDefault and confirm by @bkawakami  2014-10-17  [Svn] Task added by @anvi  2014-08-13  [Stack] added dir and printed options  2014-08-12  [ExecTask] now uses Executable trait with printed, dir, arg, option methods added  2014-08-12",
            "title": "0.4.6 10/17/2014"
        },
        {
            "location": "/changelog/#045-08052014",
            "text": "[Watch] bugfix: Watch only tracks last file if given array of files #46  2014-08-05  All executable tasks can configure working directory with  dir  option  If no value for an option is provided, assume it's a VALUE_NONE option. #47 by @pfaocle  [Changelog] changed style  2014-06-27  [GenMarkDown] fixed formatting annotations  2014-06-27",
            "title": "0.4.5 08/05/2014"
        },
        {
            "location": "/changelog/#044-06052014",
            "text": "Output can be disabled in all executable tasks by ->printed(false)  disabled timeouts by default in ParallelExec  better descriptions for Result output  changed ParallelTask to display failed process in list  Changed Output to be stored globally in Robo\\Runner class  Added  SshTask  by @boedah  Added  RsyncTask  by @boedah  false option added to proceess* callbacks in GenMarkDownTask to skip processing",
            "title": "0.4.4 06/05/2014"
        },
        {
            "location": "/changelog/#043-05212014",
            "text": "added  SemVer  task by  @jadb  yell  output method added  task  FileSystemStack  added  MirrorDirTask  added by  @devster  switched to Symfony Filesystem component  options can be used to commands  array arguments can be used in commands",
            "title": "0.4.3 05/21/2014"
        },
        {
            "location": "/changelog/#042-05092014",
            "text": "ask can now hide answers  Trait Executable added to provide standard way for passing arguments and options  added ComposerDumpAutoload task by  @pmcjury  added FileSystem task by  @jadb  added CommonStack metatsk to have similar interface for all stacked tasks by  @jadb  arguments and options can be passed into variable and used in exec task  passing options into commands",
            "title": "0.4.2 05/09/2014"
        },
        {
            "location": "/changelog/#041-05052014",
            "text": "[BC]  taskGit  task renamed to  taskGitStack  for compatibility  unit and functional tests added  all command tasks now use Symfony\\Process to execute them  enabled Bower and Concat tasks  added  printed  param to Exec task  codeception  suite  method now returns  $this  timeout options added to Exec task",
            "title": "0.4.1 05/05/2014"
        },
        {
            "location": "/changelog/#040-04272014",
            "text": "Codeception task added  PHPUnit task improved  Bower task added by @jadb  ParallelExec task added  Symfony Process component used for execution  Task descriptions taken from first line of annotations  CommandInterface  added to use tasks as parameters",
            "title": "0.4.0 04/27/2014"
        },
        {
            "location": "/changelog/#033-02252014",
            "text": "PHPUnit basic task  fixed doc generation",
            "title": "0.3.3 02/25/2014"
        },
        {
            "location": "/changelog/#035-02212014",
            "text": "changed generated init template",
            "title": "0.3.5 02/21/2014"
        },
        {
            "location": "/changelog/#034-02212014",
            "text": "[PackPhar] ->executable command will remove hashbang when generated stub file  [Git][Exec] stopOnFail option for Git and Exec stack  [ExecStack] shortcut for executing bash commands in stack",
            "title": "0.3.4 02/21/2014"
        },
        {
            "location": "/changelog/#032-02202014",
            "text": "release process now includes phar  phar executable method added  git checkout added  phar pack created",
            "title": "0.3.2 02/20/2014"
        },
        {
            "location": "/changelog/#030-02112014",
            "text": "Dynamic configuration via magic methods  added WriteToFile task  Result class for managing exit codes and error messages",
            "title": "0.3.0 02/11/2014"
        },
        {
            "location": "/changelog/#020-01292014",
            "text": "Merged Tasks and Traits to same file  Added Watcher task  Added GitHubRelease task  Added Changelog task  Added ReplaceInFile task",
            "title": "0.2.0 01/29/2014"
        }
    ]
}